
Deep_detect_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f68  0800f240  0800f240  0001f240  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080141a8  080141a8  000241a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080141b0  080141b0  000241b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080141b4  080141b4  000241b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007f0  24000000  080141b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002a50  240007f0  080149a8  000307f0  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  20000000  20000000  00040000  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000307f0  2**0
                  CONTENTS, READONLY
 10 .comment      00000093  00000000  00000000  0003081e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000141a7  00000000  00000000  000308b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002aec  00000000  00000000  00044a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000c70  00000000  00000000  00047548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000972  00000000  00000000  000481b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000380d0  00000000  00000000  00048b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000154a0  00000000  00000000  00080bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00163279  00000000  00000000  0009609a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000043fc  00000000  00000000  001f9314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000058  00000000  00000000  001fd710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007f0 	.word	0x240007f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f21c 	.word	0x0800f21c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007f4 	.word	0x240007f4
 80002dc:	0800f21c 	.word	0x0800f21c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000692:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <main+0x140>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d11b      	bne.n	80006d6 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069e:	f3bf 8f4f 	dsb	sy
}
 80006a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a4:	f3bf 8f6f 	isb	sy
}
 80006a8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006aa:	4b48      	ldr	r3, [pc, #288]	; (80007cc <main+0x140>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b8:	f3bf 8f6f 	isb	sy
}
 80006bc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006be:	4b43      	ldr	r3, [pc, #268]	; (80007cc <main+0x140>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a42      	ldr	r2, [pc, #264]	; (80007cc <main+0x140>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	e000      	b.n	80006d8 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d8:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <main+0x140>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d138      	bne.n	8000756 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <main+0x140>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006ec:	f3bf 8f4f 	dsb	sy
}
 80006f0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006f2:	4b36      	ldr	r3, [pc, #216]	; (80007cc <main+0x140>)
 80006f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f8:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	0b5b      	lsrs	r3, r3, #13
 80006fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000702:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	08db      	lsrs	r3, r3, #3
 8000708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070c:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000716:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800071c:	492b      	ldr	r1, [pc, #172]	; (80007cc <main+0x140>)
 800071e:	4313      	orrs	r3, r2
 8000720:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	60fa      	str	r2, [r7, #12]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1ef      	bne.n	800070e <main+0x82>
    } while(sets-- != 0U);
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	613a      	str	r2, [r7, #16]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1e5      	bne.n	8000704 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000738:	f3bf 8f4f 	dsb	sy
}
 800073c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <main+0x140>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <main+0x140>)
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800074a:	f3bf 8f4f 	dsb	sy
}
 800074e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000750:	f3bf 8f6f 	isb	sy
}
 8000754:	e000      	b.n	8000758 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000756:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fcd4 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f848 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f958 	bl	8000a14 <MX_GPIO_Init>
  MX_CRC_Init();
 8000764:	f000 f8e8 	bl	8000938 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000768:	f000 f908 	bl	800097c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AI_Init();
 800076c:	f000 fa02 	bl	8000b74 <AI_Init>
  memset(uart_rx_buffer,0,784);
 8000770:	f44f 7244 	mov.w	r2, #784	; 0x310
 8000774:	2100      	movs	r1, #0
 8000776:	4816      	ldr	r0, [pc, #88]	; (80007d0 <main+0x144>)
 8000778:	f00c fb53 	bl	800ce22 <memset>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_byte, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	4915      	ldr	r1, [pc, #84]	; (80007d4 <main+0x148>)
 8000780:	4815      	ldr	r0, [pc, #84]	; (80007d8 <main+0x14c>)
 8000782:	f004 fe07 	bl	8005394 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  Uart_send(message);
	  char str[10];
	  if(goRunning>0)
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <main+0x150>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0fa      	beq.n	8000786 <main+0xfa>
	  {
		  if(uart_rx_length == ONE_FRAME_LEN)
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <main+0x154>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	f240 3213 	movw	r2, #787	; 0x313
 8000798:	4293      	cmp	r3, r2
 800079a:	d10a      	bne.n	80007b2 <main+0x126>
		  {
			  PictureCharArrayToFloat(uart_rx_buffer+1,aiInData,28*28);
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <main+0x158>)
 800079e:	f44f 7244 	mov.w	r2, #784	; 0x310
 80007a2:	4911      	ldr	r1, [pc, #68]	; (80007e8 <main+0x15c>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 fab9 	bl	8000d1c <PictureCharArrayToFloat>
			  AI_Run(aiInData, aiOutData);
 80007aa:	4910      	ldr	r1, [pc, #64]	; (80007ec <main+0x160>)
 80007ac:	480e      	ldr	r0, [pc, #56]	; (80007e8 <main+0x15c>)
 80007ae:	f000 fa1d 	bl	8000bec <AI_Run>

		  }
		  memset(uart_rx_buffer,0,784);
 80007b2:	f44f 7244 	mov.w	r2, #784	; 0x310
 80007b6:	2100      	movs	r1, #0
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <main+0x144>)
 80007ba:	f00c fb32 	bl	800ce22 <memset>
		  goRunning = 0;
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <main+0x150>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		  uart_rx_length = 0;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <main+0x154>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	801a      	strh	r2, [r3, #0]
  {
 80007ca:	e7dc      	b.n	8000786 <main+0xfa>
 80007cc:	e000ed00 	.word	0xe000ed00
 80007d0:	24002c6c 	.word	0x24002c6c
 80007d4:	24002c6a 	.word	0x24002c6a
 80007d8:	24000830 	.word	0x24000830
 80007dc:	2400306c 	.word	0x2400306c
 80007e0:	24002c68 	.word	0x24002c68
 80007e4:	24002c6d 	.word	0x24002c6d
 80007e8:	240008c8 	.word	0x240008c8
 80007ec:	24001508 	.word	0x24001508

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09e      	sub	sp, #120	; 0x78
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	224c      	movs	r2, #76	; 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00c fb0f 	bl	800ce22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2220      	movs	r2, #32
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00c fb08 	bl	800ce22 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000812:	2002      	movs	r0, #2
 8000814:	f001 fe2a 	bl	800246c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2300      	movs	r3, #0
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	4b43      	ldr	r3, [pc, #268]	; (800092c <SystemClock_Config+0x13c>)
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	4a42      	ldr	r2, [pc, #264]	; (800092c <SystemClock_Config+0x13c>)
 8000822:	f023 0301 	bic.w	r3, r3, #1
 8000826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000828:	4b40      	ldr	r3, [pc, #256]	; (800092c <SystemClock_Config+0x13c>)
 800082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <SystemClock_Config+0x140>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a3e      	ldr	r2, [pc, #248]	; (8000930 <SystemClock_Config+0x140>)
 8000838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <SystemClock_Config+0x140>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800084a:	bf00      	nop
 800084c:	4b38      	ldr	r3, [pc, #224]	; (8000930 <SystemClock_Config+0x140>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000858:	d1f8      	bne.n	800084c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <SystemClock_Config+0x144>)
 800085c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000860:	4a34      	ldr	r2, [pc, #208]	; (8000934 <SystemClock_Config+0x144>)
 8000862:	f043 0302 	orr.w	r3, r3, #2
 8000866:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <SystemClock_Config+0x144>)
 800086c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <SystemClock_Config+0x140>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a2b      	ldr	r2, [pc, #172]	; (8000930 <SystemClock_Config+0x140>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SystemClock_Config+0x140>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <SystemClock_Config+0x13c>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <SystemClock_Config+0x13c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <SystemClock_Config+0x13c>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008aa:	bf00      	nop
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <SystemClock_Config+0x140>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b8:	d1f8      	bne.n	80008ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008be:	2301      	movs	r3, #1
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fe06 	bl	80024e0 <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xee>
  {
    Error_Handler();
 80008da:	f000 fa44 	bl	8000d66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	; 0x3f
 80008e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fa44 	bl	8002d94 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000912:	f000 fa28 	bl	8000d66 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000916:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f002 fbef 	bl	8003100 <HAL_RCC_MCOConfig>
}
 8000922:	bf00      	nop
 8000924:	3778      	adds	r7, #120	; 0x78
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800
 8000934:	58024400 	.word	0x58024400

08000938 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_CRC_Init+0x3c>)
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <MX_CRC_Init+0x40>)
 8000940:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_CRC_Init+0x3c>)
 8000944:	2200      	movs	r2, #0
 8000946:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_CRC_Init+0x3c>)
 800094a:	2200      	movs	r2, #0
 800094c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_CRC_Init+0x3c>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_CRC_Init+0x3c>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_CRC_Init+0x3c>)
 800095c:	2201      	movs	r2, #1
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_CRC_Init+0x3c>)
 8000962:	f000 fd7d 	bl	8001460 <HAL_CRC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800096c:	f000 f9fb 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2400080c 	.word	0x2400080c
 8000978:	58024c00 	.word	0x58024c00

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_USART1_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009c6:	f004 fc07 	bl	80051d8 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f9c9 	bl	8000d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009d8:	f006 ff61 	bl	800789e <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f9c0 	bl	8000d66 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009ea:	f006 ff96 	bl	800791a <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f9b7 	bl	8000d66 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USART1_UART_Init+0x90>)
 80009fa:	f006 ff17 	bl	800782c <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f9af 	bl	8000d66 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	24000830 	.word	0x24000830
 8000a10:	40011000 	.word	0x40011000

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a26      	ldr	r2, [pc, #152]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <MX_GPIO_Init+0xb8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0xbc>)
 8000ac0:	f001 fb24 	bl	800210c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac4:	bf00      	nop
 8000ac6:	3728      	adds	r7, #40	; 0x28
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020000 	.word	0x58020000

08000ad4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	if(goRunning ==0)
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_RxCpltCallback+0x60>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d11c      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x4c>
	{
		if (uart_rx_length < UART_BUFF_LEN)
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aee:	d214      	bcs.n	8000b1a <HAL_UART_RxCpltCallback+0x46>
		{
			uart_rx_buffer[uart_rx_length] = uart_rx_byte;
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_RxCpltCallback+0x68>)
 8000af8:	7819      	ldrb	r1, [r3, #0]
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_RxCpltCallback+0x6c>)
 8000afc:	5499      	strb	r1, [r3, r2]
			uart_rx_length++;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000b08:	801a      	strh	r2, [r3, #0]

			if (uart_rx_byte == '\n')
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_UART_RxCpltCallback+0x68>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d106      	bne.n	8000b20 <HAL_UART_RxCpltCallback+0x4c>
			{
				goRunning = 1;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_UART_RxCpltCallback+0x60>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e002      	b.n	8000b20 <HAL_UART_RxCpltCallback+0x4c>
			}
		}
		else
		{
			//rt_kprintf("rx len over");
			uart_rx_length = 0;
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_UART_RxCpltCallback+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	801a      	strh	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&uart_rx_byte, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	4906      	ldr	r1, [pc, #24]	; (8000b3c <HAL_UART_RxCpltCallback+0x68>)
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x70>)
 8000b26:	f004 fc35 	bl	8005394 <HAL_UART_Receive_IT>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2400306c 	.word	0x2400306c
 8000b38:	24002c68 	.word	0x24002c68
 8000b3c:	24002c6a 	.word	0x24002c6a
 8000b40:	24002c6c 	.word	0x24002c6c
 8000b44:	24000830 	.word	0x24000830

08000b48 <Uart_send>:

void Uart_send(char * str)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str),0xffff);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fc15 	bl	8000380 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <Uart_send+0x28>)
 8000b62:	f004 fb89 	bl	8005278 <HAL_UART_Transmit>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	24000830 	.word	0x24000830

08000b74 <AI_Init>:

static void AI_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <AI_Init+0x64>)
 8000b7c:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4815      	ldr	r0, [pc, #84]	; (8000bdc <AI_Init+0x68>)
 8000b86:	f007 f867 	bl	8007c58 <ai_network_create_and_init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8000b8e:	793b      	ldrb	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00a      	beq.n	8000baa <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8000b94:	793b      	ldrb	r3, [r7, #4]
 8000b96:	4619      	mov	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <AI_Init+0x6c>)
 8000ba2:	f00c f8c9 	bl	800cd38 <iprintf>
    Error_Handler();
 8000ba6:	f000 f8de 	bl	8000d66 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <AI_Init+0x68>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f007 f8c5 	bl	8007d40 <ai_network_inputs_get>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <AI_Init+0x70>)
 8000bba:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <AI_Init+0x68>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f007 f8d6 	bl	8007d74 <ai_network_outputs_get>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <AI_Init+0x74>)
 8000bcc:	6013      	str	r3, [r2, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	24001530 	.word	0x24001530
 8000bdc:	240008c4 	.word	0x240008c4
 8000be0:	0800f240 	.word	0x0800f240
 8000be4:	24002c60 	.word	0x24002c60
 8000be8:	24002c64 	.word	0x24002c64

08000bec <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0b0      	sub	sp, #192	; 0xc0
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
	char logStr[100];
	char detect[50];
	int count = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float max = 0;
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <AI_Run+0x110>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8000c0c:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <AI_Run+0x114>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 8000c14:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <AI_Run+0x118>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a38      	ldr	r2, [pc, #224]	; (8000cfc <AI_Run+0x110>)
 8000c1a:	6811      	ldr	r1, [r2, #0]
 8000c1c:	4a38      	ldr	r2, [pc, #224]	; (8000d00 <AI_Run+0x114>)
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f007 f8fd 	bl	8007e20 <ai_network_run>
 8000c26:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if (batch != 1) {
 8000c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d011      	beq.n	8000c56 <AI_Run+0x6a>
    err = ai_network_get_error(network);
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <AI_Run+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f006 ffec 	bl	8007c14 <ai_network_get_error>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60fb      	str	r3, [r7, #12]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8000c40:	7b3b      	ldrb	r3, [r7, #12]
 8000c42:	4619      	mov	r1, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	482e      	ldr	r0, [pc, #184]	; (8000d08 <AI_Run+0x11c>)
 8000c4e:	f00c f873 	bl	800cd38 <iprintf>
    Error_Handler();
 8000c52:	f000 f888 	bl	8000d66 <Error_Handler>
  }
  for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000c5c:	e039      	b.n	8000cd2 <AI_Run+0xe6>

	  Uart_send("number:");
 8000c5e:	482b      	ldr	r0, [pc, #172]	; (8000d0c <AI_Run+0x120>)
 8000c60:	f7ff ff72 	bl	8000b48 <Uart_send>
	  sprintf(logStr,"%d  %8.6f\r\n",i,aiOutData[i]);
 8000c64:	4a2a      	ldr	r2, [pc, #168]	; (8000d10 <AI_Run+0x124>)
 8000c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c7a:	ed8d 7b00 	vstr	d7, [sp]
 8000c7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000c82:	4924      	ldr	r1, [pc, #144]	; (8000d14 <AI_Run+0x128>)
 8000c84:	4618      	mov	r0, r3
 8000c86:	f00c f869 	bl	800cd5c <siprintf>
	  Uart_send(logStr);
 8000c8a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff5a 	bl	8000b48 <Uart_send>
	  if(max<aiOutData[i])
 8000c94:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <AI_Run+0x124>)
 8000c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	edd3 7a00 	vldr	s15, [r3]
 8000ca2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8000ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cae:	d50b      	bpl.n	8000cc8 <AI_Run+0xdc>
	  {
		  count = i;
 8000cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		  max= aiOutData[i];
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <AI_Run+0x124>)
 8000cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000cc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cd6:	2b09      	cmp	r3, #9
 8000cd8:	d9c1      	bls.n	8000c5e <AI_Run+0x72>
	  }
  }
  sprintf(logStr,"current number is %d\r\n",count);
 8000cda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <AI_Run+0x12c>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f00c f839 	bl	800cd5c <siprintf>
  Uart_send(logStr);
 8000cea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff2a 	bl	8000b48 <Uart_send>
}
 8000cf4:	bf00      	nop
 8000cf6:	37b8      	adds	r7, #184	; 0xb8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24002c60 	.word	0x24002c60
 8000d00:	24002c64 	.word	0x24002c64
 8000d04:	240008c4 	.word	0x240008c4
 8000d08:	0800f26c 	.word	0x0800f26c
 8000d0c:	0800f298 	.word	0x0800f298
 8000d10:	24001508 	.word	0x24001508
 8000d14:	0800f2a0 	.word	0x0800f2a0
 8000d18:	0800f2ac 	.word	0x0800f2ac

08000d1c <PictureCharArrayToFloat>:

void PictureCharArrayToFloat(uint8_t *srcBuf,float *dstBuf,int len)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e010      	b.n	8000d50 <PictureCharArrayToFloat+0x34>
	{
		dstBuf[i] = srcBuf[i];//==1?0:1;
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	7819      	ldrb	r1, [r3, #0]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	ee07 1a90 	vmov	s15, r1
 8000d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d46:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<len;i++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbea      	blt.n	8000d2e <PictureCharArrayToFloat+0x12>
	}
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6a:	b672      	cpsid	i
}
 8000d6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_CRC_MspInit+0x3c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10e      	bne.n	8000dd4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_CRC_MspInit+0x40>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_CRC_MspInit+0x40>)
 8000dbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <HAL_CRC_MspInit+0x40>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	58024c00 	.word	0x58024c00
 8000de4:	58024400 	.word	0x58024400

08000de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b0ba      	sub	sp, #232	; 0xe8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	22c0      	movs	r2, #192	; 0xc0
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00c f80a 	bl	800ce22 <memset>
  if(huart->Instance==USART1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <HAL_UART_MspInit+0xd8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d14e      	bne.n	8000eb6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e18:	f04f 0201 	mov.w	r2, #1
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fba6 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e3a:	f7ff ff94 	bl	8000d66 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <HAL_UART_MspInit+0xdc>)
 8000e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <HAL_UART_MspInit+0xdc>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0xdc>)
 8000e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_UART_MspInit+0xdc>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0xdc>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0xdc>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e7a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e94:	2304      	movs	r3, #4
 8000e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <HAL_UART_MspInit+0xe0>)
 8000ea2:	f001 f933 	bl	800210c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2025      	movs	r0, #37	; 0x25
 8000eac:	f000 faa3 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000eb0:	2025      	movs	r0, #37	; 0x25
 8000eb2:	f000 faba 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	37e8      	adds	r7, #232	; 0xe8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020400 	.word	0x58020400

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f966 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART1_IRQHandler+0x10>)
 8000f26:	f004 fa81 	bl	800542c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	24000830 	.word	0x24000830

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f00b ffc0 	bl	800cee8 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	24080000 	.word	0x24080000
 8000f94:	00000800 	.word	0x00000800
 8000f98:	24003070 	.word	0x24003070
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <SystemInit+0xe4>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a36      	ldr	r2, [pc, #216]	; (8001084 <SystemInit+0xe4>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <SystemInit+0xe8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d807      	bhi.n	8000fd0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <SystemInit+0xe8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f023 030f 	bic.w	r3, r3, #15
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <SystemInit+0xe8>)
 8000fca:	f043 0307 	orr.w	r3, r3, #7
 8000fce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <SystemInit+0xec>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2d      	ldr	r2, [pc, #180]	; (800108c <SystemInit+0xec>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <SystemInit+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <SystemInit+0xec>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4929      	ldr	r1, [pc, #164]	; (800108c <SystemInit+0xec>)
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <SystemInit+0xf0>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fee:	4b26      	ldr	r3, [pc, #152]	; (8001088 <SystemInit+0xe8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ffa:	4b23      	ldr	r3, [pc, #140]	; (8001088 <SystemInit+0xe8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 030f 	bic.w	r3, r3, #15
 8001002:	4a21      	ldr	r2, [pc, #132]	; (8001088 <SystemInit+0xe8>)
 8001004:	f043 0307 	orr.w	r3, r3, #7
 8001008:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <SystemInit+0xec>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <SystemInit+0xec>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <SystemInit+0xec>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <SystemInit+0xec>)
 800101e:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <SystemInit+0xf4>)
 8001020:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <SystemInit+0xec>)
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <SystemInit+0xf8>)
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <SystemInit+0xec>)
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <SystemInit+0xfc>)
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <SystemInit+0xec>)
 8001030:	2200      	movs	r2, #0
 8001032:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <SystemInit+0xec>)
 8001036:	4a19      	ldr	r2, [pc, #100]	; (800109c <SystemInit+0xfc>)
 8001038:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <SystemInit+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <SystemInit+0xec>)
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <SystemInit+0xfc>)
 8001044:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <SystemInit+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <SystemInit+0xec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <SystemInit+0xec>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <SystemInit+0xec>)
 800105a:	2200      	movs	r2, #0
 800105c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <SystemInit+0x100>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <SystemInit+0x104>)
 8001064:	4013      	ands	r3, r2
 8001066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800106a:	d202      	bcs.n	8001072 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <SystemInit+0x108>)
 800106e:	2201      	movs	r2, #1
 8001070:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <SystemInit+0x10c>)
 8001074:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001078:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	52002000 	.word	0x52002000
 800108c:	58024400 	.word	0x58024400
 8001090:	eaf6ed7f 	.word	0xeaf6ed7f
 8001094:	02020200 	.word	0x02020200
 8001098:	01ff0000 	.word	0x01ff0000
 800109c:	01010280 	.word	0x01010280
 80010a0:	5c001000 	.word	0x5c001000
 80010a4:	ffff0000 	.word	0xffff0000
 80010a8:	51008108 	.word	0x51008108
 80010ac:	52004000 	.word	0x52004000

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b4:	f7ff ff74 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f00b ff09 	bl	800cef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fad3 	bl	800068c <main>
  bx  lr
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010f0:	240007f0 	.word	0x240007f0
  ldr r2, =_sidata
 80010f4:	080141b8 	.word	0x080141b8
  ldr r2, =_sbss
 80010f8:	240007f0 	.word	0x240007f0
  ldr r4, =_ebss
 80010fc:	24003240 	.word	0x24003240

08001100 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC3_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110a:	2003      	movs	r0, #3
 800110c:	f000 f968 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001110:	f002 f860 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8001114:	4602      	mov	r2, r0
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_Init+0x68>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	4913      	ldr	r1, [pc, #76]	; (8001170 <HAL_Init+0x6c>)
 8001122:	5ccb      	ldrb	r3, [r1, r3]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa22 f303 	lsr.w	r3, r2, r3
 800112c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_Init+0x68>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_Init+0x6c>)
 8001138:	5cd3      	ldrb	r3, [r2, r3]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_Init+0x70>)
 8001146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_Init+0x74>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800114e:	200f      	movs	r0, #15
 8001150:	f000 f814 	bl	800117c <HAL_InitTick>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e002      	b.n	8001164 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800115e:	f7ff fe07 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	58024400 	.word	0x58024400
 8001170:	0800f2f4 	.word	0x0800f2f4
 8001174:	24000004 	.word	0x24000004
 8001178:	24000000 	.word	0x24000000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_InitTick+0x60>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e021      	b.n	80011d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_InitTick+0x64>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_InitTick+0x60>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f94d 	bl	8001446 <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f917 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x68>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2400000c 	.word	0x2400000c
 80011e0:	24000000 	.word	0x24000000
 80011e4:	24000008 	.word	0x24000008

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2400000c 	.word	0x2400000c
 800120c:	24003074 	.word	0x24003074

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	24003074 	.word	0x24003074

08001228 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetREVID+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0c1b      	lsrs	r3, r3, #16
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	5c001000 	.word	0x5c001000

08001240 <__NVIC_SetPriorityGrouping>:
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <__NVIC_SetPriorityGrouping+0x40>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	4313      	orrs	r3, r2
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x40>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	05fa0000 	.word	0x05fa0000

08001288 <__NVIC_GetPriorityGrouping>:
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_EnableIRQ>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	db0b      	blt.n	80012ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	f003 021f 	and.w	r2, r3, #31
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <__NVIC_EnableIRQ+0x38>)
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	2001      	movs	r0, #1
 80012c6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100

080012e0 <__NVIC_SetPriority>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db0a      	blt.n	800130a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	490c      	ldr	r1, [pc, #48]	; (800132c <__NVIC_SetPriority+0x4c>)
 80012fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012fe:	0112      	lsls	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	440b      	add	r3, r1
 8001304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001308:	e00a      	b.n	8001320 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <__NVIC_SetPriority+0x50>)
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	3b04      	subs	r3, #4
 8001318:	0112      	lsls	r2, r2, #4
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	440b      	add	r3, r1
 800131e:	761a      	strb	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <NVIC_EncodePriority>:
{
 8001334:	b480      	push	{r7}
 8001336:	b089      	sub	sp, #36	; 0x24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2b04      	cmp	r3, #4
 8001350:	bf28      	it	cs
 8001352:	2304      	movcs	r3, #4
 8001354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	2b06      	cmp	r3, #6
 800135c:	d902      	bls.n	8001364 <NVIC_EncodePriority+0x30>
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3b03      	subs	r3, #3
 8001362:	e000      	b.n	8001366 <NVIC_EncodePriority+0x32>
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	f04f 32ff 	mov.w	r2, #4294967295
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	401a      	ands	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	43d9      	mvns	r1, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	4313      	orrs	r3, r2
}
 800138e:	4618      	mov	r0, r3
 8001390:	3724      	adds	r7, #36	; 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff8e 	bl	80012e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff29 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff40 	bl	8001288 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff90 	bl	8001334 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff33 	bl	80012a4 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa4 	bl	800139c <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e054      	b.n	800151c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7f5b      	ldrb	r3, [r3, #29]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fc8e 	bl	8000da4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2202      	movs	r2, #2
 800148c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_CRC_Init+0xc4>)
 800149c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0218 	bic.w	r2, r2, #24
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	e00c      	b.n	80014ca <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6899      	ldr	r1, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	461a      	mov	r2, r3
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f834 	bl	8001528 <HAL_CRCEx_Polynomial_Set>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e028      	b.n	800151c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	795b      	ldrb	r3, [r3, #5]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d105      	bne.n	80014de <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f04f 32ff 	mov.w	r2, #4294967295
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	e004      	b.n	80014e8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6912      	ldr	r2, [r2, #16]
 80014e6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	04c11db7 	.word	0x04c11db7

08001528 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001538:	231f      	movs	r3, #31
 800153a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	75fb      	strb	r3, [r7, #23]
 800154a:	e063      	b.n	8001614 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800154c:	bf00      	nop
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1e5a      	subs	r2, r3, #1
 8001552:	613a      	str	r2, [r7, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <HAL_CRCEx_Polynomial_Set+0x44>
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b18      	cmp	r3, #24
 8001570:	d846      	bhi.n	8001600 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001607 	.word	0x08001607
 800157c:	08001601 	.word	0x08001601
 8001580:	08001601 	.word	0x08001601
 8001584:	08001601 	.word	0x08001601
 8001588:	08001601 	.word	0x08001601
 800158c:	08001601 	.word	0x08001601
 8001590:	08001601 	.word	0x08001601
 8001594:	08001601 	.word	0x08001601
 8001598:	080015f5 	.word	0x080015f5
 800159c:	08001601 	.word	0x08001601
 80015a0:	08001601 	.word	0x08001601
 80015a4:	08001601 	.word	0x08001601
 80015a8:	08001601 	.word	0x08001601
 80015ac:	08001601 	.word	0x08001601
 80015b0:	08001601 	.word	0x08001601
 80015b4:	08001601 	.word	0x08001601
 80015b8:	080015e9 	.word	0x080015e9
 80015bc:	08001601 	.word	0x08001601
 80015c0:	08001601 	.word	0x08001601
 80015c4:	08001601 	.word	0x08001601
 80015c8:	08001601 	.word	0x08001601
 80015cc:	08001601 	.word	0x08001601
 80015d0:	08001601 	.word	0x08001601
 80015d4:	08001601 	.word	0x08001601
 80015d8:	080015dd 	.word	0x080015dd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d913      	bls.n	800160a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80015e6:	e010      	b.n	800160a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	2b07      	cmp	r3, #7
 80015ec:	d90f      	bls.n	800160e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80015f2:	e00c      	b.n	800160e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d90b      	bls.n	8001612 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80015fe:	e008      	b.n	8001612 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	75fb      	strb	r3, [r7, #23]
        break;
 8001604:	e006      	b.n	8001614 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001606:	bf00      	nop
 8001608:	e004      	b.n	8001614 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800160a:	bf00      	nop
 800160c:	e002      	b.n	8001614 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800160e:	bf00      	nop
 8001610:	e000      	b.n	8001614 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001612:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10d      	bne.n	8001636 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 0118 	bic.w	r1, r3, #24
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
}
 8001638:	4618      	mov	r0, r3
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800164c:	f7ff fde0 	bl	8001210 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e2dc      	b.n	8001c16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d008      	beq.n	800167a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e2cd      	b.n	8001c16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a76      	ldr	r2, [pc, #472]	; (8001858 <HAL_DMA_Abort+0x214>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d04a      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a74      	ldr	r2, [pc, #464]	; (800185c <HAL_DMA_Abort+0x218>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d045      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_DMA_Abort+0x21c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d040      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a71      	ldr	r2, [pc, #452]	; (8001864 <HAL_DMA_Abort+0x220>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d03b      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a70      	ldr	r2, [pc, #448]	; (8001868 <HAL_DMA_Abort+0x224>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d036      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6e      	ldr	r2, [pc, #440]	; (800186c <HAL_DMA_Abort+0x228>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d031      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6d      	ldr	r2, [pc, #436]	; (8001870 <HAL_DMA_Abort+0x22c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d02c      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6b      	ldr	r2, [pc, #428]	; (8001874 <HAL_DMA_Abort+0x230>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d027      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6a      	ldr	r2, [pc, #424]	; (8001878 <HAL_DMA_Abort+0x234>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d022      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a68      	ldr	r2, [pc, #416]	; (800187c <HAL_DMA_Abort+0x238>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d01d      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a67      	ldr	r2, [pc, #412]	; (8001880 <HAL_DMA_Abort+0x23c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d018      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_DMA_Abort+0x240>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a64      	ldr	r2, [pc, #400]	; (8001888 <HAL_DMA_Abort+0x244>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a62      	ldr	r2, [pc, #392]	; (800188c <HAL_DMA_Abort+0x248>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d009      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a61      	ldr	r2, [pc, #388]	; (8001890 <HAL_DMA_Abort+0x24c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d004      	beq.n	800171a <HAL_DMA_Abort+0xd6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a5f      	ldr	r2, [pc, #380]	; (8001894 <HAL_DMA_Abort+0x250>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_DMA_Abort+0xda>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_DMA_Abort+0xdc>
 800171e:	2300      	movs	r3, #0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 021e 	bic.w	r2, r2, #30
 8001732:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001742:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e00a      	b.n	8001762 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020e 	bic.w	r2, r2, #14
 800175a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <HAL_DMA_Abort+0x214>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d072      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <HAL_DMA_Abort+0x218>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d06d      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a39      	ldr	r2, [pc, #228]	; (8001860 <HAL_DMA_Abort+0x21c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d068      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a37      	ldr	r2, [pc, #220]	; (8001864 <HAL_DMA_Abort+0x220>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d063      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a36      	ldr	r2, [pc, #216]	; (8001868 <HAL_DMA_Abort+0x224>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d05e      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a34      	ldr	r2, [pc, #208]	; (800186c <HAL_DMA_Abort+0x228>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d059      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_DMA_Abort+0x22c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d054      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a31      	ldr	r2, [pc, #196]	; (8001874 <HAL_DMA_Abort+0x230>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d04f      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_DMA_Abort+0x234>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04a      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a2e      	ldr	r2, [pc, #184]	; (800187c <HAL_DMA_Abort+0x238>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d045      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <HAL_DMA_Abort+0x23c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d040      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a2b      	ldr	r2, [pc, #172]	; (8001884 <HAL_DMA_Abort+0x240>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d03b      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_DMA_Abort+0x244>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d036      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_DMA_Abort+0x248>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d031      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a27      	ldr	r2, [pc, #156]	; (8001890 <HAL_DMA_Abort+0x24c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d02c      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <HAL_DMA_Abort+0x250>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d027      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a24      	ldr	r2, [pc, #144]	; (8001898 <HAL_DMA_Abort+0x254>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d022      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_DMA_Abort+0x258>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01d      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <HAL_DMA_Abort+0x25c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d018      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <HAL_DMA_Abort+0x260>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_DMA_Abort+0x264>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <HAL_DMA_Abort+0x268>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_DMA_Abort+0x26c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d004      	beq.n	8001852 <HAL_DMA_Abort+0x20e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_DMA_Abort+0x270>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d132      	bne.n	80018b8 <HAL_DMA_Abort+0x274>
 8001852:	2301      	movs	r3, #1
 8001854:	e031      	b.n	80018ba <HAL_DMA_Abort+0x276>
 8001856:	bf00      	nop
 8001858:	40020010 	.word	0x40020010
 800185c:	40020028 	.word	0x40020028
 8001860:	40020040 	.word	0x40020040
 8001864:	40020058 	.word	0x40020058
 8001868:	40020070 	.word	0x40020070
 800186c:	40020088 	.word	0x40020088
 8001870:	400200a0 	.word	0x400200a0
 8001874:	400200b8 	.word	0x400200b8
 8001878:	40020410 	.word	0x40020410
 800187c:	40020428 	.word	0x40020428
 8001880:	40020440 	.word	0x40020440
 8001884:	40020458 	.word	0x40020458
 8001888:	40020470 	.word	0x40020470
 800188c:	40020488 	.word	0x40020488
 8001890:	400204a0 	.word	0x400204a0
 8001894:	400204b8 	.word	0x400204b8
 8001898:	58025408 	.word	0x58025408
 800189c:	5802541c 	.word	0x5802541c
 80018a0:	58025430 	.word	0x58025430
 80018a4:	58025444 	.word	0x58025444
 80018a8:	58025458 	.word	0x58025458
 80018ac:	5802546c 	.word	0x5802546c
 80018b0:	58025480 	.word	0x58025480
 80018b4:	58025494 	.word	0x58025494
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6d      	ldr	r2, [pc, #436]	; (8001a88 <HAL_DMA_Abort+0x444>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d04a      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <HAL_DMA_Abort+0x448>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d045      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_DMA_Abort+0x44c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d040      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a68      	ldr	r2, [pc, #416]	; (8001a94 <HAL_DMA_Abort+0x450>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d03b      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_DMA_Abort+0x454>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d036      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a65      	ldr	r2, [pc, #404]	; (8001a9c <HAL_DMA_Abort+0x458>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d031      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a64      	ldr	r2, [pc, #400]	; (8001aa0 <HAL_DMA_Abort+0x45c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d02c      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a62      	ldr	r2, [pc, #392]	; (8001aa4 <HAL_DMA_Abort+0x460>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d027      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a61      	ldr	r2, [pc, #388]	; (8001aa8 <HAL_DMA_Abort+0x464>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a5f      	ldr	r2, [pc, #380]	; (8001aac <HAL_DMA_Abort+0x468>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01d      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_DMA_Abort+0x46c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d018      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_DMA_Abort+0x470>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a5b      	ldr	r2, [pc, #364]	; (8001ab8 <HAL_DMA_Abort+0x474>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00e      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a59      	ldr	r2, [pc, #356]	; (8001abc <HAL_DMA_Abort+0x478>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d009      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_DMA_Abort+0x47c>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_DMA_Abort+0x32a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a56      	ldr	r2, [pc, #344]	; (8001ac4 <HAL_DMA_Abort+0x480>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d108      	bne.n	8001980 <HAL_DMA_Abort+0x33c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_DMA_Abort+0x34c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0201 	bic.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001990:	e013      	b.n	80019ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001992:	f7ff fc3d 	bl	8001210 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b05      	cmp	r3, #5
 800199e:	d90c      	bls.n	80019ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2220      	movs	r2, #32
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e12d      	b.n	8001c16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1e5      	bne.n	8001992 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_DMA_Abort+0x444>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_DMA_Abort+0x448>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_DMA_Abort+0x44c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <HAL_DMA_Abort+0x450>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <HAL_DMA_Abort+0x454>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_DMA_Abort+0x458>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_DMA_Abort+0x45c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a24      	ldr	r2, [pc, #144]	; (8001aa4 <HAL_DMA_Abort+0x460>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <HAL_DMA_Abort+0x464>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_DMA_Abort+0x468>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_DMA_Abort+0x46c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_DMA_Abort+0x470>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_DMA_Abort+0x474>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <HAL_DMA_Abort+0x478>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_DMA_Abort+0x47c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort+0x422>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a18      	ldr	r2, [pc, #96]	; (8001ac4 <HAL_DMA_Abort+0x480>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_DMA_Abort+0x426>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_DMA_Abort+0x428>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d02b      	beq.n	8001ac8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	223f      	movs	r2, #63	; 0x3f
 8001a80:	409a      	lsls	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	e02a      	b.n	8001ade <HAL_DMA_Abort+0x49a>
 8001a88:	40020010 	.word	0x40020010
 8001a8c:	40020028 	.word	0x40020028
 8001a90:	40020040 	.word	0x40020040
 8001a94:	40020058 	.word	0x40020058
 8001a98:	40020070 	.word	0x40020070
 8001a9c:	40020088 	.word	0x40020088
 8001aa0:	400200a0 	.word	0x400200a0
 8001aa4:	400200b8 	.word	0x400200b8
 8001aa8:	40020410 	.word	0x40020410
 8001aac:	40020428 	.word	0x40020428
 8001ab0:	40020440 	.word	0x40020440
 8001ab4:	40020458 	.word	0x40020458
 8001ab8:	40020470 	.word	0x40020470
 8001abc:	40020488 	.word	0x40020488
 8001ac0:	400204a0 	.word	0x400204a0
 8001ac4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	f003 031f 	and.w	r3, r3, #31
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a4f      	ldr	r2, [pc, #316]	; (8001c20 <HAL_DMA_Abort+0x5dc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d072      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a4d      	ldr	r2, [pc, #308]	; (8001c24 <HAL_DMA_Abort+0x5e0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d06d      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4c      	ldr	r2, [pc, #304]	; (8001c28 <HAL_DMA_Abort+0x5e4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d068      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_DMA_Abort+0x5e8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d063      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_DMA_Abort+0x5ec>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_DMA_Abort+0x5f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d059      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_DMA_Abort+0x5f4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d054      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a44      	ldr	r2, [pc, #272]	; (8001c3c <HAL_DMA_Abort+0x5f8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d04f      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a43      	ldr	r2, [pc, #268]	; (8001c40 <HAL_DMA_Abort+0x5fc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04a      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_DMA_Abort+0x600>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d045      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a40      	ldr	r2, [pc, #256]	; (8001c48 <HAL_DMA_Abort+0x604>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d040      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_DMA_Abort+0x608>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d03b      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <HAL_DMA_Abort+0x60c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d036      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_DMA_Abort+0x610>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <HAL_DMA_Abort+0x614>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02c      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_DMA_Abort+0x618>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d027      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a37      	ldr	r2, [pc, #220]	; (8001c60 <HAL_DMA_Abort+0x61c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <HAL_DMA_Abort+0x620>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <HAL_DMA_Abort+0x624>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d018      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <HAL_DMA_Abort+0x628>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a31      	ldr	r2, [pc, #196]	; (8001c70 <HAL_DMA_Abort+0x62c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_DMA_Abort+0x630>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <HAL_DMA_Abort+0x634>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_DMA_Abort+0x58a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_DMA_Abort+0x638>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Abort+0x58e>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_DMA_Abort+0x590>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d015      	beq.n	8001c04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001be0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020010 	.word	0x40020010
 8001c24:	40020028 	.word	0x40020028
 8001c28:	40020040 	.word	0x40020040
 8001c2c:	40020058 	.word	0x40020058
 8001c30:	40020070 	.word	0x40020070
 8001c34:	40020088 	.word	0x40020088
 8001c38:	400200a0 	.word	0x400200a0
 8001c3c:	400200b8 	.word	0x400200b8
 8001c40:	40020410 	.word	0x40020410
 8001c44:	40020428 	.word	0x40020428
 8001c48:	40020440 	.word	0x40020440
 8001c4c:	40020458 	.word	0x40020458
 8001c50:	40020470 	.word	0x40020470
 8001c54:	40020488 	.word	0x40020488
 8001c58:	400204a0 	.word	0x400204a0
 8001c5c:	400204b8 	.word	0x400204b8
 8001c60:	58025408 	.word	0x58025408
 8001c64:	5802541c 	.word	0x5802541c
 8001c68:	58025430 	.word	0x58025430
 8001c6c:	58025444 	.word	0x58025444
 8001c70:	58025458 	.word	0x58025458
 8001c74:	5802546c 	.word	0x5802546c
 8001c78:	58025480 	.word	0x58025480
 8001c7c:	58025494 	.word	0x58025494

08001c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e237      	b.n	8002102 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e22c      	b.n	8002102 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5c      	ldr	r2, [pc, #368]	; (8001e20 <HAL_DMA_Abort_IT+0x1a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04a      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5b      	ldr	r2, [pc, #364]	; (8001e24 <HAL_DMA_Abort_IT+0x1a4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d045      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a59      	ldr	r2, [pc, #356]	; (8001e28 <HAL_DMA_Abort_IT+0x1a8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d040      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_DMA_Abort_IT+0x1ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d03b      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a56      	ldr	r2, [pc, #344]	; (8001e30 <HAL_DMA_Abort_IT+0x1b0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d036      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a55      	ldr	r2, [pc, #340]	; (8001e34 <HAL_DMA_Abort_IT+0x1b4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a53      	ldr	r2, [pc, #332]	; (8001e38 <HAL_DMA_Abort_IT+0x1b8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02c      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_DMA_Abort_IT+0x1bc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d027      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a50      	ldr	r2, [pc, #320]	; (8001e40 <HAL_DMA_Abort_IT+0x1c0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d022      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4f      	ldr	r2, [pc, #316]	; (8001e44 <HAL_DMA_Abort_IT+0x1c4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d01d      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4d      	ldr	r2, [pc, #308]	; (8001e48 <HAL_DMA_Abort_IT+0x1c8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d018      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4c      	ldr	r2, [pc, #304]	; (8001e4c <HAL_DMA_Abort_IT+0x1cc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_DMA_Abort_IT+0x1d0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00e      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_DMA_Abort_IT+0x1d4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a47      	ldr	r2, [pc, #284]	; (8001e58 <HAL_DMA_Abort_IT+0x1d8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d004      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_DMA_Abort_IT+0x1dc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_DMA_Abort_IT+0xcc>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_DMA_Abort_IT+0xce>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8086 	beq.w	8001e60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2204      	movs	r2, #4
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2f      	ldr	r2, [pc, #188]	; (8001e20 <HAL_DMA_Abort_IT+0x1a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d04a      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <HAL_DMA_Abort_IT+0x1a4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d045      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <HAL_DMA_Abort_IT+0x1a8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d040      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_DMA_Abort_IT+0x1ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d03b      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_DMA_Abort_IT+0x1b0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d036      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_DMA_Abort_IT+0x1b4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d031      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a26      	ldr	r2, [pc, #152]	; (8001e38 <HAL_DMA_Abort_IT+0x1b8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02c      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a25      	ldr	r2, [pc, #148]	; (8001e3c <HAL_DMA_Abort_IT+0x1bc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d027      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_DMA_Abort_IT+0x1c0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <HAL_DMA_Abort_IT+0x1c4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d01d      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <HAL_DMA_Abort_IT+0x1c8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d018      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	; (8001e4c <HAL_DMA_Abort_IT+0x1cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_DMA_Abort_IT+0x1d0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_DMA_Abort_IT+0x1d4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <HAL_DMA_Abort_IT+0x1d8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x17c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <HAL_DMA_Abort_IT+0x1dc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d108      	bne.n	8001e0e <HAL_DMA_Abort_IT+0x18e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e178      	b.n	8002100 <HAL_DMA_Abort_IT+0x480>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e16f      	b.n	8002100 <HAL_DMA_Abort_IT+0x480>
 8001e20:	40020010 	.word	0x40020010
 8001e24:	40020028 	.word	0x40020028
 8001e28:	40020040 	.word	0x40020040
 8001e2c:	40020058 	.word	0x40020058
 8001e30:	40020070 	.word	0x40020070
 8001e34:	40020088 	.word	0x40020088
 8001e38:	400200a0 	.word	0x400200a0
 8001e3c:	400200b8 	.word	0x400200b8
 8001e40:	40020410 	.word	0x40020410
 8001e44:	40020428 	.word	0x40020428
 8001e48:	40020440 	.word	0x40020440
 8001e4c:	40020458 	.word	0x40020458
 8001e50:	40020470 	.word	0x40020470
 8001e54:	40020488 	.word	0x40020488
 8001e58:	400204a0 	.word	0x400204a0
 8001e5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 020e 	bic.w	r2, r2, #14
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6c      	ldr	r2, [pc, #432]	; (8002028 <HAL_DMA_Abort_IT+0x3a8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d04a      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6b      	ldr	r2, [pc, #428]	; (800202c <HAL_DMA_Abort_IT+0x3ac>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d045      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_DMA_Abort_IT+0x3b0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d040      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a68      	ldr	r2, [pc, #416]	; (8002034 <HAL_DMA_Abort_IT+0x3b4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d03b      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a66      	ldr	r2, [pc, #408]	; (8002038 <HAL_DMA_Abort_IT+0x3b8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d036      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_DMA_Abort_IT+0x3bc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d031      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_DMA_Abort_IT+0x3c0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02c      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a62      	ldr	r2, [pc, #392]	; (8002044 <HAL_DMA_Abort_IT+0x3c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d027      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a60      	ldr	r2, [pc, #384]	; (8002048 <HAL_DMA_Abort_IT+0x3c8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d022      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a5f      	ldr	r2, [pc, #380]	; (800204c <HAL_DMA_Abort_IT+0x3cc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d01d      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a5d      	ldr	r2, [pc, #372]	; (8002050 <HAL_DMA_Abort_IT+0x3d0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d018      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a5c      	ldr	r2, [pc, #368]	; (8002054 <HAL_DMA_Abort_IT+0x3d4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a5a      	ldr	r2, [pc, #360]	; (8002058 <HAL_DMA_Abort_IT+0x3d8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00e      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a59      	ldr	r2, [pc, #356]	; (800205c <HAL_DMA_Abort_IT+0x3dc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d009      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_DMA_Abort_IT+0x3e0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d004      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x290>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_DMA_Abort_IT+0x3e4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d108      	bne.n	8001f22 <HAL_DMA_Abort_IT+0x2a2>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e007      	b.n	8001f32 <HAL_DMA_Abort_IT+0x2b2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3c      	ldr	r2, [pc, #240]	; (8002028 <HAL_DMA_Abort_IT+0x3a8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d072      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a3a      	ldr	r2, [pc, #232]	; (800202c <HAL_DMA_Abort_IT+0x3ac>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d06d      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a39      	ldr	r2, [pc, #228]	; (8002030 <HAL_DMA_Abort_IT+0x3b0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d068      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a37      	ldr	r2, [pc, #220]	; (8002034 <HAL_DMA_Abort_IT+0x3b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d063      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a36      	ldr	r2, [pc, #216]	; (8002038 <HAL_DMA_Abort_IT+0x3b8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d05e      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a34      	ldr	r2, [pc, #208]	; (800203c <HAL_DMA_Abort_IT+0x3bc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d059      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a33      	ldr	r2, [pc, #204]	; (8002040 <HAL_DMA_Abort_IT+0x3c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d054      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_DMA_Abort_IT+0x3c4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d04f      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a30      	ldr	r2, [pc, #192]	; (8002048 <HAL_DMA_Abort_IT+0x3c8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d04a      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_DMA_Abort_IT+0x3cc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d045      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_DMA_Abort_IT+0x3d0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d040      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_DMA_Abort_IT+0x3d4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d03b      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_DMA_Abort_IT+0x3d8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d036      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_DMA_Abort_IT+0x3dc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d031      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <HAL_DMA_Abort_IT+0x3e0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d02c      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <HAL_DMA_Abort_IT+0x3e4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d027      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_DMA_Abort_IT+0x3e8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d022      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_DMA_Abort_IT+0x3ec>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d01d      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_DMA_Abort_IT+0x3f0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d018      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_DMA_Abort_IT+0x3f4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_DMA_Abort_IT+0x3f8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00e      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_DMA_Abort_IT+0x3fc>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d009      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_DMA_Abort_IT+0x400>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d004      	beq.n	8002022 <HAL_DMA_Abort_IT+0x3a2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_DMA_Abort_IT+0x404>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d132      	bne.n	8002088 <HAL_DMA_Abort_IT+0x408>
 8002022:	2301      	movs	r3, #1
 8002024:	e031      	b.n	800208a <HAL_DMA_Abort_IT+0x40a>
 8002026:	bf00      	nop
 8002028:	40020010 	.word	0x40020010
 800202c:	40020028 	.word	0x40020028
 8002030:	40020040 	.word	0x40020040
 8002034:	40020058 	.word	0x40020058
 8002038:	40020070 	.word	0x40020070
 800203c:	40020088 	.word	0x40020088
 8002040:	400200a0 	.word	0x400200a0
 8002044:	400200b8 	.word	0x400200b8
 8002048:	40020410 	.word	0x40020410
 800204c:	40020428 	.word	0x40020428
 8002050:	40020440 	.word	0x40020440
 8002054:	40020458 	.word	0x40020458
 8002058:	40020470 	.word	0x40020470
 800205c:	40020488 	.word	0x40020488
 8002060:	400204a0 	.word	0x400204a0
 8002064:	400204b8 	.word	0x400204b8
 8002068:	58025408 	.word	0x58025408
 800206c:	5802541c 	.word	0x5802541c
 8002070:	58025430 	.word	0x58025430
 8002074:	58025444 	.word	0x58025444
 8002078:	58025458 	.word	0x58025458
 800207c:	5802546c 	.word	0x5802546c
 8002080:	58025480 	.word	0x58025480
 8002084:	58025494 	.word	0x58025494
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d028      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800209c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2201      	movs	r2, #1
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800211a:	4b89      	ldr	r3, [pc, #548]	; (8002340 <HAL_GPIO_Init+0x234>)
 800211c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800211e:	e194      	b.n	800244a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2101      	movs	r1, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8186 	beq.w	8002444 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d005      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d130      	bne.n	80021b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002186:	2201      	movs	r2, #1
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0201 	and.w	r2, r3, #1
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d017      	beq.n	80021ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d123      	bne.n	8002242 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	69b9      	ldr	r1, [r7, #24]
 800223e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	2203      	movs	r2, #3
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0203 	and.w	r2, r3, #3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 80e0 	beq.w	8002444 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x238>)
 8002286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228a:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <HAL_GPIO_Init+0x238>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_GPIO_Init+0x238>)
 8002296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <HAL_GPIO_Init+0x23c>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_GPIO_Init+0x240>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d052      	beq.n	8002374 <HAL_GPIO_Init+0x268>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_GPIO_Init+0x244>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d031      	beq.n	800233a <HAL_GPIO_Init+0x22e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <HAL_GPIO_Init+0x248>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d02b      	beq.n	8002336 <HAL_GPIO_Init+0x22a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_GPIO_Init+0x24c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x226>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x250>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x222>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_GPIO_Init+0x254>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x21e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x258>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x21a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_GPIO_Init+0x25c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x216>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_GPIO_Init+0x260>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x212>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_GPIO_Init+0x264>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x20e>
 8002316:	2309      	movs	r3, #9
 8002318:	e02d      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800231a:	230a      	movs	r3, #10
 800231c:	e02b      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800231e:	2308      	movs	r3, #8
 8002320:	e029      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002322:	2307      	movs	r3, #7
 8002324:	e027      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002326:	2306      	movs	r3, #6
 8002328:	e025      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800232a:	2305      	movs	r3, #5
 800232c:	e023      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800232e:	2304      	movs	r3, #4
 8002330:	e021      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002332:	2303      	movs	r3, #3
 8002334:	e01f      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 8002336:	2302      	movs	r3, #2
 8002338:	e01d      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800233a:	2301      	movs	r3, #1
 800233c:	e01b      	b.n	8002376 <HAL_GPIO_Init+0x26a>
 800233e:	bf00      	nop
 8002340:	58000080 	.word	0x58000080
 8002344:	58024400 	.word	0x58024400
 8002348:	58000400 	.word	0x58000400
 800234c:	58020000 	.word	0x58020000
 8002350:	58020400 	.word	0x58020400
 8002354:	58020800 	.word	0x58020800
 8002358:	58020c00 	.word	0x58020c00
 800235c:	58021000 	.word	0x58021000
 8002360:	58021400 	.word	0x58021400
 8002364:	58021800 	.word	0x58021800
 8002368:	58021c00 	.word	0x58021c00
 800236c:	58022000 	.word	0x58022000
 8002370:	58022400 	.word	0x58022400
 8002374:	2300      	movs	r3, #0
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f002 0203 	and.w	r2, r2, #3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4093      	lsls	r3, r2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002386:	4938      	ldr	r1, [pc, #224]	; (8002468 <HAL_GPIO_Init+0x35c>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	3301      	adds	r3, #1
 8002448:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f ae63 	bne.w	8002120 <HAL_GPIO_Init+0x14>
  }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	3724      	adds	r7, #36	; 0x24
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	58000400 	.word	0x58000400

0800246c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_PWREx_ConfigSupply+0x70>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00a      	beq.n	8002496 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_PWREx_ConfigSupply+0x70>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d001      	beq.n	8002492 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e01f      	b.n	80024d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e01d      	b.n	80024d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_PWREx_ConfigSupply+0x70>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	490f      	ldr	r1, [pc, #60]	; (80024dc <HAL_PWREx_ConfigSupply+0x70>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024a6:	f7fe feb3 	bl	8001210 <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024ac:	e009      	b.n	80024c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024ae:	f7fe feaf 	bl	8001210 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024bc:	d901      	bls.n	80024c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e007      	b.n	80024d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_PWREx_ConfigSupply+0x70>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ce:	d1ee      	bne.n	80024ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	58024800 	.word	0x58024800

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f000 bc48 	b.w	8002d84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8088 	beq.w	8002612 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002502:	4b99      	ldr	r3, [pc, #612]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800250c:	4b96      	ldr	r3, [pc, #600]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800250e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	2b10      	cmp	r3, #16
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x48>
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	2b18      	cmp	r3, #24
 800251c:	d111      	bne.n	8002542 <HAL_RCC_OscConfig+0x62>
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4b8f      	ldr	r3, [pc, #572]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d06d      	beq.n	8002610 <HAL_RCC_OscConfig+0x130>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d169      	bne.n	8002610 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f000 bc21 	b.w	8002d84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x7a>
 800254c:	4b86      	ldr	r3, [pc, #536]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a85      	ldr	r2, [pc, #532]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e02e      	b.n	80025b8 <HAL_RCC_OscConfig+0xd8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x9c>
 8002562:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a80      	ldr	r2, [pc, #512]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b7e      	ldr	r3, [pc, #504]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7d      	ldr	r2, [pc, #500]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xd8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0xc0>
 8002586:	4b78      	ldr	r3, [pc, #480]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a77      	ldr	r2, [pc, #476]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b75      	ldr	r3, [pc, #468]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a74      	ldr	r2, [pc, #464]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xd8>
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a70      	ldr	r2, [pc, #448]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b6e      	ldr	r3, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a6d      	ldr	r2, [pc, #436]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fe26 	bl	8001210 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fe22 	bl	8001210 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e3d4      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025da:	4b63      	ldr	r3, [pc, #396]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xe8>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fe12 	bl	8001210 <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fe0e 	bl	8001210 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e3c0      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002602:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x110>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80ca 	beq.w	80027b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002620:	4b51      	ldr	r3, [pc, #324]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002628:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800262a:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_RCC_OscConfig+0x166>
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2b18      	cmp	r3, #24
 800263a:	d156      	bne.n	80026ea <HAL_RCC_OscConfig+0x20a>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d151      	bne.n	80026ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002646:	4b48      	ldr	r3, [pc, #288]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x17e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e392      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0219 	bic.w	r2, r3, #25
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	493f      	ldr	r1, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800266c:	4313      	orrs	r3, r2
 800266e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7fe fdce 	bl	8001210 <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002678:	f7fe fdca 	bl	8001210 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e37c      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	f7fe fdc7 	bl	8001228 <HAL_GetREVID>
 800269a:	4603      	mov	r3, r0
 800269c:	f241 0203 	movw	r2, #4099	; 0x1003
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d817      	bhi.n	80026d4 <HAL_RCC_OscConfig+0x1f4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d108      	bne.n	80026be <HAL_RCC_OscConfig+0x1de>
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026b4:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026bc:	e07a      	b.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	031b      	lsls	r3, r3, #12
 80026cc:	4926      	ldr	r1, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d2:	e06f      	b.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	061b      	lsls	r3, r3, #24
 80026e2:	4921      	ldr	r1, [pc, #132]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e8:	e064      	b.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d047      	beq.n	8002782 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0219 	bic.w	r2, r3, #25
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	491a      	ldr	r1, [pc, #104]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fd84 	bl	8001210 <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7fe fd80 	bl	8001210 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e332      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	f7fe fd7d 	bl	8001228 <HAL_GetREVID>
 800272e:	4603      	mov	r3, r0
 8002730:	f241 0203 	movw	r2, #4099	; 0x1003
 8002734:	4293      	cmp	r3, r2
 8002736:	d819      	bhi.n	800276c <HAL_RCC_OscConfig+0x28c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d108      	bne.n	8002752 <HAL_RCC_OscConfig+0x272>
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274e:	6053      	str	r3, [r2, #4]
 8002750:	e030      	b.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	031b      	lsls	r3, r3, #12
 8002760:	4901      	ldr	r1, [pc, #4]	; (8002768 <HAL_RCC_OscConfig+0x288>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
 8002766:	e025      	b.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
 8002768:	58024400 	.word	0x58024400
 800276c:	4b9a      	ldr	r3, [pc, #616]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	4997      	ldr	r1, [pc, #604]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e018      	b.n	80027b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002782:	4b95      	ldr	r3, [pc, #596]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a94      	ldr	r2, [pc, #592]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fd3f 	bl	8001210 <HAL_GetTick>
 8002792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fd3b 	bl	8001210 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e2ed      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027a8:	4b8b      	ldr	r3, [pc, #556]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a9 	beq.w	8002914 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c2:	4b85      	ldr	r3, [pc, #532]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027cc:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d007      	beq.n	80027e8 <HAL_RCC_OscConfig+0x308>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b18      	cmp	r3, #24
 80027dc:	d13a      	bne.n	8002854 <HAL_RCC_OscConfig+0x374>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d135      	bne.n	8002854 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027e8:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x320>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e2c1      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002800:	f7fe fd12 	bl	8001228 <HAL_GetREVID>
 8002804:	4603      	mov	r3, r0
 8002806:	f241 0203 	movw	r2, #4099	; 0x1003
 800280a:	4293      	cmp	r3, r2
 800280c:	d817      	bhi.n	800283e <HAL_RCC_OscConfig+0x35e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	2b20      	cmp	r3, #32
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x348>
 8002816:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800281e:	4a6e      	ldr	r2, [pc, #440]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002824:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002826:	e075      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002828:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	069b      	lsls	r3, r3, #26
 8002836:	4968      	ldr	r1, [pc, #416]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800283c:	e06a      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800283e:	4b66      	ldr	r3, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	4962      	ldr	r1, [pc, #392]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800284e:	4313      	orrs	r3, r2
 8002850:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002852:	e05f      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d042      	beq.n	80028e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800285c:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe fcd2 	bl	8001210 <HAL_GetTick>
 800286c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002870:	f7fe fcce 	bl	8001210 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e280      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002882:	4b55      	ldr	r3, [pc, #340]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800288e:	f7fe fccb 	bl	8001228 <HAL_GetREVID>
 8002892:	4603      	mov	r3, r0
 8002894:	f241 0203 	movw	r2, #4099	; 0x1003
 8002898:	4293      	cmp	r3, r2
 800289a:	d817      	bhi.n	80028cc <HAL_RCC_OscConfig+0x3ec>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d108      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3d6>
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028ac:	4a4a      	ldr	r2, [pc, #296]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028b2:	6053      	str	r3, [r2, #4]
 80028b4:	e02e      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
 80028b6:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	4944      	ldr	r1, [pc, #272]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
 80028ca:	e023      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	061b      	lsls	r3, r3, #24
 80028da:	493f      	ldr	r1, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
 80028e0:	e018      	b.n	8002914 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe fc8f 	bl	8001210 <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028f6:	f7fe fc8b 	bl	8001210 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e23d      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002908:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d036      	beq.n	800298e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d019      	beq.n	800295c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fc6c 	bl	8001210 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe fc68 	bl	8001210 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e21a      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x45c>
 800295a:	e018      	b.n	800298e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002960:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fc52 	bl	8001210 <HAL_GetTick>
 800296c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fc4e 	bl	8001210 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e200      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d039      	beq.n	8002a0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01c      	beq.n	80029dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029ae:	f7fe fc2f 	bl	8001210 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b6:	f7fe fc2b 	bl	8001210 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1dd      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x4d6>
 80029d4:	e01b      	b.n	8002a0e <HAL_RCC_OscConfig+0x52e>
 80029d6:	bf00      	nop
 80029d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029dc:	4b9b      	ldr	r3, [pc, #620]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a9a      	ldr	r2, [pc, #616]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 80029e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e8:	f7fe fc12 	bl	8001210 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029f0:	f7fe fc0e 	bl	8001210 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1c0      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a02:	4b92      	ldr	r3, [pc, #584]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8081 	beq.w	8002b1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a1c:	4b8c      	ldr	r3, [pc, #560]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a8b      	ldr	r2, [pc, #556]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a28:	f7fe fbf2 	bl	8001210 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7fe fbee 	bl	8001210 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1a0      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a42:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x584>
 8002a56:	4b7d      	ldr	r3, [pc, #500]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a7c      	ldr	r2, [pc, #496]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	e02d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x5e0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5a6>
 8002a6c:	4b77      	ldr	r3, [pc, #476]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a70:	4a76      	ldr	r2, [pc, #472]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	; 0x70
 8002a78:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a73      	ldr	r2, [pc, #460]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x5e0>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5c8>
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a6e      	ldr	r2, [pc, #440]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a6b      	ldr	r2, [pc, #428]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x5e0>
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a67      	ldr	r2, [pc, #412]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	4b65      	ldr	r3, [pc, #404]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a64      	ldr	r2, [pc, #400]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fba2 	bl	8001210 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fb9e 	bl	8001210 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e14e      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ae6:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x5f0>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe fb8c 	bl	8001210 <HAL_GetTick>
 8002af8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7fe fb88 	bl	8001210 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e138      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b12:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ee      	bne.n	8002afc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 812d 	beq.w	8002d82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b28:	4b48      	ldr	r3, [pc, #288]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b30:	2b18      	cmp	r3, #24
 8002b32:	f000 80bd 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	f040 809e 	bne.w	8002c7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a41      	ldr	r2, [pc, #260]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fb60 	bl	8001210 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fb5c 	bl	8001210 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e10e      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b66:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_RCC_OscConfig+0x774>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4931      	ldr	r1, [pc, #196]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	3b01      	subs	r3, #1
 8002b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002bbc:	4923      	ldr	r1, [pc, #140]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <HAL_RCC_OscConfig+0x778>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bda:	00d2      	lsls	r2, r2, #3
 8002bdc:	491b      	ldr	r1, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	f023 020c 	bic.w	r2, r3, #12
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4917      	ldr	r1, [pc, #92]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bf4:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f023 0202 	bic.w	r2, r3, #2
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	4912      	ldr	r1, [pc, #72]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fae5 	bl	8001210 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c48:	e011      	b.n	8002c6e <HAL_RCC_OscConfig+0x78e>
 8002c4a:	bf00      	nop
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	58024800 	.word	0x58024800
 8002c54:	fffffc0c 	.word	0xfffffc0c
 8002c58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe fad8 	bl	8001210 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e08a      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x77c>
 8002c7a:	e082      	b.n	8002d82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b43      	ldr	r3, [pc, #268]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a42      	ldr	r2, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fac2 	bl	8001210 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fabe 	bl	8001210 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e070      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x7b0>
 8002cae:	e068      	b.n	8002d82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cb0:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cb6:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d031      	beq.n	8002d28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f003 0203 	and.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d12a      	bne.n	8002d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d122      	bne.n	8002d28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d11a      	bne.n	8002d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	0a5b      	lsrs	r3, r3, #9
 8002cf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d111      	bne.n	8002d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	0e1b      	lsrs	r3, r3, #24
 8002d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e02b      	b.n	8002d84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d01f      	beq.n	8002d82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d4e:	f7fe fa5f 	bl	8001210 <HAL_GetTick>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d54:	bf00      	nop
 8002d56:	f7fe fa5b 	bl	8001210 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d0f9      	beq.n	8002d56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_RCC_OscConfig+0x8b0>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d6e:	00d2      	lsls	r2, r2, #3
 8002d70:	4906      	ldr	r1, [pc, #24]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3730      	adds	r7, #48	; 0x30
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	58024400 	.word	0x58024400
 8002d90:	ffff0007 	.word	0xffff0007

08002d94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e19c      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b8a      	ldr	r3, [pc, #552]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	4985      	ldr	r1, [pc, #532]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b83      	ldr	r3, [pc, #524]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e184      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df4:	4b78      	ldr	r3, [pc, #480]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4975      	ldr	r1, [pc, #468]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e22:	4b6d      	ldr	r3, [pc, #436]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	496a      	ldr	r1, [pc, #424]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d908      	bls.n	8002e62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e50:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	495e      	ldr	r1, [pc, #376]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d908      	bls.n	8002e90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e7e:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4953      	ldr	r1, [pc, #332]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d908      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f023 020f 	bic.w	r2, r3, #15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4947      	ldr	r1, [pc, #284]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d055      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eca:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4940      	ldr	r1, [pc, #256]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d121      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0f6      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d115      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0ea      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0de      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0d6      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f023 0207 	bic.w	r2, r3, #7
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4925      	ldr	r1, [pc, #148]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f46:	f7fe f963 	bl	8001210 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7fe f95f 	bl	8001210 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0be      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d1eb      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d208      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d214      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 020f 	bic.w	r2, r3, #15
 8002fba:	4906      	ldr	r1, [pc, #24]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e086      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
 8002fd4:	52002000 	.word	0x52002000
 8002fd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d208      	bcs.n	800300a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	4939      	ldr	r1, [pc, #228]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003006:	4313      	orrs	r3, r2
 8003008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003022:	429a      	cmp	r2, r3
 8003024:	d208      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	492e      	ldr	r1, [pc, #184]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003034:	4313      	orrs	r3, r2
 8003036:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003050:	429a      	cmp	r2, r3
 8003052:	d208      	bcs.n	8003066 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4922      	ldr	r1, [pc, #136]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003062:	4313      	orrs	r3, r2
 8003064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800307e:	429a      	cmp	r2, r3
 8003080:	d208      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4917      	ldr	r1, [pc, #92]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003090:	4313      	orrs	r3, r2
 8003092:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003094:	f000 f89e 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	4912      	ldr	r1, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x35c>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
 80030b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_RCC_ClockConfig+0x35c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x360>)
 80030ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x364>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x368>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe f850 	bl	800117c <HAL_InitTick>
 80030dc:	4603      	mov	r3, r0
 80030de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	0800f2f4 	.word	0x0800f2f4
 80030f4:	24000004 	.word	0x24000004
 80030f8:	24000000 	.word	0x24000000
 80030fc:	24000008 	.word	0x24000008

08003100 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08c      	sub	sp, #48	; 0x30
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d12a      	bne.n	8003168 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 8003114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003118:	4a2b      	ldr	r2, [pc, #172]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 8003124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003142:	2300      	movs	r3, #0
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	4619      	mov	r1, r3
 800314c:	481f      	ldr	r0, [pc, #124]	; (80031cc <HAL_RCC_MCOConfig+0xcc>)
 800314e:	f7fe ffdd 	bl	800210c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	430b      	orrs	r3, r1
 8003160:	4919      	ldr	r1, [pc, #100]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003166:	e02a      	b.n	80031be <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 800316a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316e:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 8003170:	f043 0304 	orr.w	r3, r3, #4
 8003174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 800317a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003190:	2303      	movs	r3, #3
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	480b      	ldr	r0, [pc, #44]	; (80031d0 <HAL_RCC_MCOConfig+0xd0>)
 80031a4:	f7fe ffb2 	bl	800210c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	01d9      	lsls	r1, r3, #7
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	430b      	orrs	r3, r1
 80031b8:	4903      	ldr	r1, [pc, #12]	; (80031c8 <HAL_RCC_MCOConfig+0xc8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]
}
 80031be:	bf00      	nop
 80031c0:	3730      	adds	r7, #48	; 0x30
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	58024400 	.word	0x58024400
 80031cc:	58020000 	.word	0x58020000
 80031d0:	58020800 	.word	0x58020800

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031da:	4bb3      	ldr	r3, [pc, #716]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e2:	2b18      	cmp	r3, #24
 80031e4:	f200 8155 	bhi.w	8003492 <HAL_RCC_GetSysClockFreq+0x2be>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003493 	.word	0x08003493
 80031f8:	08003493 	.word	0x08003493
 80031fc:	08003493 	.word	0x08003493
 8003200:	08003493 	.word	0x08003493
 8003204:	08003493 	.word	0x08003493
 8003208:	08003493 	.word	0x08003493
 800320c:	08003493 	.word	0x08003493
 8003210:	0800327b 	.word	0x0800327b
 8003214:	08003493 	.word	0x08003493
 8003218:	08003493 	.word	0x08003493
 800321c:	08003493 	.word	0x08003493
 8003220:	08003493 	.word	0x08003493
 8003224:	08003493 	.word	0x08003493
 8003228:	08003493 	.word	0x08003493
 800322c:	08003493 	.word	0x08003493
 8003230:	08003281 	.word	0x08003281
 8003234:	08003493 	.word	0x08003493
 8003238:	08003493 	.word	0x08003493
 800323c:	08003493 	.word	0x08003493
 8003240:	08003493 	.word	0x08003493
 8003244:	08003493 	.word	0x08003493
 8003248:	08003493 	.word	0x08003493
 800324c:	08003493 	.word	0x08003493
 8003250:	08003287 	.word	0x08003287
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003260:	4b91      	ldr	r3, [pc, #580]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a90      	ldr	r2, [pc, #576]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003272:	e111      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003274:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e10e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800327a:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800327c:	61bb      	str	r3, [r7, #24]
      break;
 800327e:	e10b      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003280:	4b8c      	ldr	r3, [pc, #560]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003282:	61bb      	str	r3, [r7, #24]
      break;
 8003284:	e108      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003290:	4b85      	ldr	r3, [pc, #532]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800329c:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032a6:	4b80      	ldr	r3, [pc, #512]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80e1 	beq.w	800348c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f000 8083 	beq.w	80033d8 <HAL_RCC_GetSysClockFreq+0x204>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f200 80a1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x248>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x114>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d056      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032e6:	e099      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	4a6b      	ldr	r2, [pc, #428]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b62      	ldr	r3, [pc, #392]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800334e:	e087      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003392:	e065      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033d6:	e043      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800341a:	e021      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003442:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800345e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	0a5b      	lsrs	r3, r3, #9
 8003466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346a:	3301      	adds	r3, #1
 800346c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003478:	edd7 6a07 	vldr	s13, [r7, #28]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003484:	ee17 3a90 	vmov	r3, s15
 8003488:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
      break;
 8003490:	e002      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
      break;
 8003496:	bf00      	nop
  }

  return sysclockfreq;
 8003498:	69bb      	ldr	r3, [r7, #24]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	03d09000 	.word	0x03d09000
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	46000000 	.word	0x46000000
 80034bc:	4c742400 	.word	0x4c742400
 80034c0:	4a742400 	.word	0x4a742400
 80034c4:	4af42400 	.word	0x4af42400

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ce:	f7ff fe81 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490f      	ldr	r1, [pc, #60]	; (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 8003504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	58024400 	.word	0x58024400
 800351c:	0800f2f4 	.word	0x0800f2f4
 8003520:	24000004 	.word	0x24000004
 8003524:	24000000 	.word	0x24000000

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800352c:	f7ff ffcc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024400 	.word	0x58024400
 8003550:	0800f2f4 	.word	0x0800f2f4

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003558:	f7ff ffb6 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCC_GetPCLK2Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	0800f2f4 	.word	0x0800f2f4

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b0ca      	sub	sp, #296	; 0x128
 8003586:	af00      	add	r7, sp, #0
 8003588:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003592:	2300      	movs	r3, #0
 8003594:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80035a4:	2500      	movs	r5, #0
 80035a6:	ea54 0305 	orrs.w	r3, r4, r5
 80035aa:	d049      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035b6:	d02f      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035bc:	d828      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c2:	d01a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c8:	d822      	bhi.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035d2:	d007      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035d4:	e01c      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d6:	4bb8      	ldr	r3, [pc, #736]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	4ab7      	ldr	r2, [pc, #732]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035e2:	e01a      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e8:	3308      	adds	r3, #8
 80035ea:	2102      	movs	r1, #2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fc8f 	bl	8004f10 <RCCEx_PLL2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035f8:	e00f      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fe:	3328      	adds	r3, #40	; 0x28
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f001 fd36 	bl	8005074 <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800360e:	e004      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10a      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003622:	4ba5      	ldr	r3, [pc, #660]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003630:	4aa1      	ldr	r2, [pc, #644]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003632:	430b      	orrs	r3, r1
 8003634:	6513      	str	r3, [r2, #80]	; 0x50
 8003636:	e003      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800363c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800364c:	f04f 0900 	mov.w	r9, #0
 8003650:	ea58 0309 	orrs.w	r3, r8, r9
 8003654:	d047      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	2b04      	cmp	r3, #4
 800365e:	d82a      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800367d 	.word	0x0800367d
 800366c:	0800368b 	.word	0x0800368b
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036bf 	.word	0x080036bf
 8003678:	080036bf 	.word	0x080036bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4b8e      	ldr	r3, [pc, #568]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	4a8d      	ldr	r2, [pc, #564]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003688:	e01a      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368e:	3308      	adds	r3, #8
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fc3c 	bl	8004f10 <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800369e:	e00f      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a4:	3328      	adds	r3, #40	; 0x28
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fce3 	bl	8005074 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b4:	e004      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036bc:	e000      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10a      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036c8:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036cc:	f023 0107 	bic.w	r1, r3, #7
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	4a78      	ldr	r2, [pc, #480]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6513      	str	r3, [r2, #80]	; 0x50
 80036dc:	e003      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80036f2:	f04f 0b00 	mov.w	fp, #0
 80036f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80036fa:	d04c      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d030      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370c:	d829      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800370e:	2bc0      	cmp	r3, #192	; 0xc0
 8003710:	d02d      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003712:	2bc0      	cmp	r3, #192	; 0xc0
 8003714:	d825      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003716:	2b80      	cmp	r3, #128	; 0x80
 8003718:	d018      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d821      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d007      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003726:	e01c      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003728:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	4a62      	ldr	r2, [pc, #392]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003734:	e01c      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373a:	3308      	adds	r3, #8
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fbe6 	bl	8004f10 <RCCEx_PLL2_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800374a:	e011      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	3328      	adds	r3, #40	; 0x28
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fc8d 	bl	8005074 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003760:	e006      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003768:	e002      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800376e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003778:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	4a4c      	ldr	r2, [pc, #304]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003788:	430b      	orrs	r3, r1
 800378a:	6513      	str	r3, [r2, #80]	; 0x50
 800378c:	e003      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d053      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c2:	d035      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c8:	d82e      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037ce:	d031      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037d4:	d828      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037da:	d01a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037e0:	d822      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ea:	d007      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037ec:	e01c      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ee:	4b32      	ldr	r3, [pc, #200]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	4a31      	ldr	r2, [pc, #196]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037fa:	e01c      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003800:	3308      	adds	r3, #8
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fb83 	bl	8004f10 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003810:	e011      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003816:	3328      	adds	r3, #40	; 0x28
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fc2a 	bl	8005074 <RCCEx_PLL3_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003826:	e006      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800382e:	e002      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003850:	430b      	orrs	r3, r1
 8003852:	6593      	str	r3, [r2, #88]	; 0x58
 8003854:	e003      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800386a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003874:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003878:	460b      	mov	r3, r1
 800387a:	4313      	orrs	r3, r2
 800387c:	d056      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388a:	d038      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800388c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003890:	d831      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003896:	d034      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003898:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800389c:	d82b      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800389e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a2:	d01d      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a8:	d825      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038b4:	e01f      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038b6:	bf00      	nop
 80038b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4ba2      	ldr	r3, [pc, #648]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	4aa1      	ldr	r2, [pc, #644]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c8:	e01c      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ce:	3308      	adds	r3, #8
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fb1c 	bl	8004f10 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e4:	3328      	adds	r3, #40	; 0x28
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fbc3 	bl	8005074 <RCCEx_PLL3_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800390c:	4b8e      	ldr	r3, [pc, #568]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003918:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800391c:	4a8a      	ldr	r2, [pc, #552]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391e:	430b      	orrs	r3, r1
 8003920:	6593      	str	r3, [r2, #88]	; 0x58
 8003922:	e003      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003928:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800392c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003942:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003946:	460b      	mov	r3, r1
 8003948:	4313      	orrs	r3, r2
 800394a:	d03a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	2b30      	cmp	r3, #48	; 0x30
 8003954:	d01f      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003956:	2b30      	cmp	r3, #48	; 0x30
 8003958:	d819      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800395a:	2b20      	cmp	r3, #32
 800395c:	d00c      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800395e:	2b20      	cmp	r3, #32
 8003960:	d815      	bhi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d019      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003966:	2b10      	cmp	r3, #16
 8003968:	d111      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396a:	4b77      	ldr	r3, [pc, #476]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	4a76      	ldr	r2, [pc, #472]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003974:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003976:	e011      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397c:	3308      	adds	r3, #8
 800397e:	2102      	movs	r1, #2
 8003980:	4618      	mov	r0, r3
 8003982:	f001 fac5 	bl	8004f10 <RCCEx_PLL2_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800398c:	e006      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800399a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039a4:	4b68      	ldr	r3, [pc, #416]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	4a65      	ldr	r2, [pc, #404]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b8:	e003      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80039ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80039d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80039dc:	460b      	mov	r3, r1
 80039de:	4313      	orrs	r3, r2
 80039e0:	d051      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ec:	d035      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f2:	d82e      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039f8:	d031      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039fe:	d828      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a04:	d01a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0a:	d822      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d007      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a16:	e01c      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	4a4a      	ldr	r2, [pc, #296]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a24:	e01c      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fa6e 	bl	8004f10 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a40:	3328      	adds	r3, #40	; 0x28
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fb15 	bl	8005074 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a68:	4b37      	ldr	r3, [pc, #220]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a76:	4a34      	ldr	r2, [pc, #208]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003a92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d056      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d033      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab6:	d82c      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003abc:	d02f      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac2:	d826      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ac4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac8:	d02b      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ace:	d820      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad4:	d012      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ada:	d81a      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d022      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aea:	3308      	adds	r3, #8
 8003aec:	2101      	movs	r1, #1
 8003aee:	4618      	mov	r0, r3
 8003af0:	f001 fa0e 	bl	8004f10 <RCCEx_PLL2_Config>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003afa:	e015      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b00:	3328      	adds	r3, #40	; 0x28
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 fab5 	bl	8005074 <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b10:	e00a      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b1a:	bf00      	nop
 8003b1c:	e004      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3e:	4a02      	ldr	r2, [pc, #8]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6513      	str	r3, [r2, #80]	; 0x50
 8003b44:	e006      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b46:	bf00      	nop
 8003b48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4313      	orrs	r3, r2
 8003b72:	d055      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b80:	d033      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b86:	d82c      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8c:	d02f      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d826      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b98:	d02b      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b9e:	d820      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba4:	d012      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003baa:	d81a      	bhi.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d022      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb4:	d115      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f9a6 	bl	8004f10 <RCCEx_PLL2_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bca:	e015      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd0:	3328      	adds	r3, #40	; 0x28
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 fa4d 	bl	8005074 <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003be8:	e006      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bea:	bf00      	nop
 8003bec:	e004      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c00:	4ba3      	ldr	r3, [pc, #652]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c10:	4a9f      	ldr	r2, [pc, #636]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c12:	430b      	orrs	r3, r1
 8003c14:	6593      	str	r3, [r2, #88]	; 0x58
 8003c16:	e003      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	d037      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4a:	d00e      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c50:	d816      	bhi.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5a:	d111      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5c:	4b8c      	ldr	r3, [pc, #560]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	4a8b      	ldr	r2, [pc, #556]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c68:	e00f      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6e:	3308      	adds	r3, #8
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f001 f94c 	bl	8004f10 <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c7e:	e004      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	6513      	str	r3, [r2, #80]	; 0x50
 8003ca6:	e003      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003cc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	d039      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d81c      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d1d 	.word	0x08003d1d
 8003ce4:	08003cf1 	.word	0x08003cf1
 8003ce8:	08003cff 	.word	0x08003cff
 8003cec:	08003d1d 	.word	0x08003d1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4a66      	ldr	r2, [pc, #408]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d02:	3308      	adds	r3, #8
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f902 	bl	8004f10 <RCCEx_PLL2_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2a:	f023 0103 	bic.w	r1, r3, #3
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d34:	4a56      	ldr	r2, [pc, #344]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f000 809f 	beq.w	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d66:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a4a      	ldr	r2, [pc, #296]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d72:	f7fd fa4d 	bl	8001210 <HAL_GetTick>
 8003d76:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7c:	f7fd fa48 	bl	8001210 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d903      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d92:	e005      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d94:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ed      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d179      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003da8:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003db4:	4053      	eors	r3, r2
 8003db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d015      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dbe:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003de2:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d118      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fa0a 	bl	8001210 <HAL_GetTick>
 8003dfc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e00:	e00d      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fd fa05 	bl	8001210 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003e0c:	1ad2      	subs	r2, r2, r3
 8003e0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d903      	bls.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003e1c:	e005      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0eb      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d129      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e42:	d10e      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e54:	091a      	lsrs	r2, r3, #4
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6113      	str	r3, [r2, #16]
 8003e60:	e005      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e68:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e6c:	6113      	str	r3, [r2, #16]
 8003e6e:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	4a04      	ldr	r2, [pc, #16]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	e00e      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e90:	58024400 	.word	0x58024400
 8003e94:	58024800 	.word	0x58024800
 8003e98:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f002 0301 	and.w	r3, r2, #1
 8003eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f000 8089 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ecc:	2b28      	cmp	r3, #40	; 0x28
 8003ece:	d86b      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003fb1 	.word	0x08003fb1
 8003edc:	08003fa9 	.word	0x08003fa9
 8003ee0:	08003fa9 	.word	0x08003fa9
 8003ee4:	08003fa9 	.word	0x08003fa9
 8003ee8:	08003fa9 	.word	0x08003fa9
 8003eec:	08003fa9 	.word	0x08003fa9
 8003ef0:	08003fa9 	.word	0x08003fa9
 8003ef4:	08003fa9 	.word	0x08003fa9
 8003ef8:	08003f7d 	.word	0x08003f7d
 8003efc:	08003fa9 	.word	0x08003fa9
 8003f00:	08003fa9 	.word	0x08003fa9
 8003f04:	08003fa9 	.word	0x08003fa9
 8003f08:	08003fa9 	.word	0x08003fa9
 8003f0c:	08003fa9 	.word	0x08003fa9
 8003f10:	08003fa9 	.word	0x08003fa9
 8003f14:	08003fa9 	.word	0x08003fa9
 8003f18:	08003f93 	.word	0x08003f93
 8003f1c:	08003fa9 	.word	0x08003fa9
 8003f20:	08003fa9 	.word	0x08003fa9
 8003f24:	08003fa9 	.word	0x08003fa9
 8003f28:	08003fa9 	.word	0x08003fa9
 8003f2c:	08003fa9 	.word	0x08003fa9
 8003f30:	08003fa9 	.word	0x08003fa9
 8003f34:	08003fa9 	.word	0x08003fa9
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003fa9 	.word	0x08003fa9
 8003f40:	08003fa9 	.word	0x08003fa9
 8003f44:	08003fa9 	.word	0x08003fa9
 8003f48:	08003fa9 	.word	0x08003fa9
 8003f4c:	08003fa9 	.word	0x08003fa9
 8003f50:	08003fa9 	.word	0x08003fa9
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fa9 	.word	0x08003fa9
 8003f60:	08003fa9 	.word	0x08003fa9
 8003f64:	08003fa9 	.word	0x08003fa9
 8003f68:	08003fa9 	.word	0x08003fa9
 8003f6c:	08003fa9 	.word	0x08003fa9
 8003f70:	08003fa9 	.word	0x08003fa9
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fb1 	.word	0x08003fb1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f80:	3308      	adds	r3, #8
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 ffc3 	bl	8004f10 <RCCEx_PLL2_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f90:	e00f      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 f86a 	bl	8005074 <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fba:	4bbf      	ldr	r3, [pc, #764]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc8:	4abb      	ldr	r2, [pc, #748]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	6553      	str	r3, [r2, #84]	; 0x54
 8003fce:	e003      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f002 0302 	and.w	r3, r2, #2
 8003fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003fee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	d041      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d824      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004055 	.word	0x08004055
 800400c:	08004021 	.word	0x08004021
 8004010:	08004037 	.word	0x08004037
 8004014:	08004055 	.word	0x08004055
 8004018:	08004055 	.word	0x08004055
 800401c:	08004055 	.word	0x08004055
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004024:	3308      	adds	r3, #8
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f000 ff71 	bl	8004f10 <RCCEx_PLL2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004034:	e00f      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	3328      	adds	r3, #40	; 0x28
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f001 f818 	bl	8005074 <RCCEx_PLL3_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800405e:	4b96      	ldr	r3, [pc, #600]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f023 0107 	bic.w	r1, r3, #7
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406c:	4a92      	ldr	r2, [pc, #584]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800406e:	430b      	orrs	r3, r1
 8004070:	6553      	str	r3, [r2, #84]	; 0x54
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004078:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f002 0304 	and.w	r3, r2, #4
 8004088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004092:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d044      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d825      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040fd 	.word	0x080040fd
 80040b4:	080040c9 	.word	0x080040c9
 80040b8:	080040df 	.word	0x080040df
 80040bc:	080040fd 	.word	0x080040fd
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	080040fd 	.word	0x080040fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040cc:	3308      	adds	r3, #8
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ff1d 	bl	8004f10 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e2:	3328      	adds	r3, #40	; 0x28
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ffc4 	bl	8005074 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004106:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	f023 0107 	bic.w	r1, r3, #7
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004116:	4a68      	ldr	r2, [pc, #416]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004118:	430b      	orrs	r3, r1
 800411a:	6593      	str	r3, [r2, #88]	; 0x58
 800411c:	e003      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f002 0320 	and.w	r3, r2, #32
 8004132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800413c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d055      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004152:	d033      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004158:	d82c      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d02f      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d826      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800416a:	d02b      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800416c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004170:	d820      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004176:	d012      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800417c:	d81a      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d022      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004186:	d115      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418c:	3308      	adds	r3, #8
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f000 febd 	bl	8004f10 <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800419c:	e015      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	3328      	adds	r3, #40	; 0x28
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 ff64 	bl	8005074 <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041b2:	e00a      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ba:	e006      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041bc:	bf00      	nop
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041d2:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e2:	4a35      	ldr	r2, [pc, #212]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6553      	str	r3, [r2, #84]	; 0x54
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80041fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004202:	2300      	movs	r3, #0
 8004204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004208:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800420c:	460b      	mov	r3, r1
 800420e:	4313      	orrs	r3, r2
 8004210:	d058      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800421e:	d033      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004220:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004224:	d82c      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d02f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d826      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004236:	d02b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004238:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800423c:	d820      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800423e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004242:	d012      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004248:	d81a      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d022      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800424e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004252:	d115      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004258:	3308      	adds	r3, #8
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fe57 	bl	8004f10 <RCCEx_PLL2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004268:	e015      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	3328      	adds	r3, #40	; 0x28
 8004270:	2102      	movs	r1, #2
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fefe 	bl	8005074 <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800427e:	e00a      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004286:	e006      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004288:	bf00      	nop
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10e      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042ae:	4a02      	ldr	r2, [pc, #8]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6593      	str	r3, [r2, #88]	; 0x58
 80042b4:	e006      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042b6:	bf00      	nop
 80042b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80042d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d055      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042f0:	d033      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042f6:	d82c      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fc:	d02f      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004302:	d826      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004304:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004308:	d02b      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800430a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800430e:	d820      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004314:	d012      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431a:	d81a      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d022      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d115      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432a:	3308      	adds	r3, #8
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fdee 	bl	8004f10 <RCCEx_PLL2_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800433a:	e015      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	3328      	adds	r3, #40	; 0x28
 8004342:	2102      	movs	r1, #2
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fe95 	bl	8005074 <RCCEx_PLL3_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004350:	e00a      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004358:	e006      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800435a:	bf00      	nop
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800435e:	bf00      	nop
 8004360:	e002      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004362:	bf00      	nop
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004370:	4ba1      	ldr	r3, [pc, #644]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004374:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004380:	4a9d      	ldr	r2, [pc, #628]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004382:	430b      	orrs	r3, r1
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	f002 0308 	and.w	r3, r2, #8
 800439c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043a0:	2300      	movs	r3, #0
 80043a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d01e      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	3328      	adds	r3, #40	; 0x28
 80043c4:	2102      	movs	r1, #2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fe54 	bl	8005074 <RCCEx_PLL3_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043d8:	4b87      	ldr	r3, [pc, #540]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	4a83      	ldr	r2, [pc, #524]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f002 0310 	and.w	r3, r2, #16
 80043fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043fe:	2300      	movs	r3, #0
 8004400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004404:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004408:	460b      	mov	r3, r1
 800440a:	4313      	orrs	r3, r2
 800440c:	d01e      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800441a:	d10c      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004420:	3328      	adds	r3, #40	; 0x28
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fe25 	bl	8005074 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004436:	4b70      	ldr	r3, [pc, #448]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004446:	4a6c      	ldr	r2, [pc, #432]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004462:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d03e      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004478:	d022      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800447a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447e:	d81b      	bhi.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d00b      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800448a:	e015      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004490:	3308      	adds	r3, #8
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd3b 	bl	8004f10 <RCCEx_PLL2_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044a0:	e00f      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a6:	3328      	adds	r3, #40	; 0x28
 80044a8:	2102      	movs	r1, #2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fde2 	bl	8005074 <RCCEx_PLL3_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044b6:	e004      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044be:	e000      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10b      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ca:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044da:	4a47      	ldr	r2, [pc, #284]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044dc:	430b      	orrs	r3, r1
 80044de:	6593      	str	r3, [r2, #88]	; 0x58
 80044e0:	e003      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80044f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80044f8:	2300      	movs	r3, #0
 80044fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d03b      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004512:	d01f      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004514:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004518:	d818      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800451a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451e:	d003      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004524:	d007      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004526:	e011      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004528:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004534:	e00f      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453a:	3328      	adds	r3, #40	; 0x28
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fd98 	bl	8005074 <RCCEx_PLL3_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800454a:	e004      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004562:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004570:	430b      	orrs	r3, r1
 8004572:	6553      	str	r3, [r2, #84]	; 0x54
 8004574:	e003      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800457a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800458a:	673b      	str	r3, [r7, #112]	; 0x70
 800458c:	2300      	movs	r3, #0
 800458e:	677b      	str	r3, [r7, #116]	; 0x74
 8004590:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d034      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d007      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80045aa:	e011      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ac:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045b8:	e00e      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	3308      	adds	r3, #8
 80045c0:	2102      	movs	r1, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fca4 	bl	8004f10 <RCCEx_PLL2_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10d      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	4a02      	ldr	r2, [pc, #8]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f0:	430b      	orrs	r3, r1
 80045f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045f4:	e006      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004600:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004610:	66bb      	str	r3, [r7, #104]	; 0x68
 8004612:	2300      	movs	r3, #0
 8004614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004616:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800461a:	460b      	mov	r3, r1
 800461c:	4313      	orrs	r3, r2
 800461e:	d00c      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004624:	3328      	adds	r3, #40	; 0x28
 8004626:	2102      	movs	r1, #2
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fd23 	bl	8005074 <RCCEx_PLL3_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004646:	663b      	str	r3, [r7, #96]	; 0x60
 8004648:	2300      	movs	r3, #0
 800464a:	667b      	str	r3, [r7, #100]	; 0x64
 800464c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004650:	460b      	mov	r3, r1
 8004652:	4313      	orrs	r3, r2
 8004654:	d038      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800465e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004662:	d018      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004668:	d811      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800466a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466e:	d014      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	d80b      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800467a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467e:	d106      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004680:	4bc3      	ldr	r3, [pc, #780]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	4ac2      	ldr	r2, [pc, #776]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004694:	e004      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800469e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a8:	4bb9      	ldr	r3, [pc, #740]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b8:	4ab5      	ldr	r2, [pc, #724]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6553      	str	r3, [r2, #84]	; 0x54
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80046d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80046d6:	2300      	movs	r3, #0
 80046d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046e4:	4baa      	ldr	r3, [pc, #680]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	4aa7      	ldr	r2, [pc, #668]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004704:	653b      	str	r3, [r7, #80]	; 0x50
 8004706:	2300      	movs	r3, #0
 8004708:	657b      	str	r3, [r7, #84]	; 0x54
 800470a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800470e:	460b      	mov	r3, r1
 8004710:	4313      	orrs	r3, r2
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004714:	4b9e      	ldr	r3, [pc, #632]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800471c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004720:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004724:	4a9a      	ldr	r2, [pc, #616]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004726:	430b      	orrs	r3, r1
 8004728:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
 8004738:	2300      	movs	r3, #0
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004746:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004754:	4a8e      	ldr	r2, [pc, #568]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004756:	430b      	orrs	r3, r1
 8004758:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004766:	643b      	str	r3, [r7, #64]	; 0x40
 8004768:	2300      	movs	r3, #0
 800476a:	647b      	str	r3, [r7, #68]	; 0x44
 800476c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004776:	4b86      	ldr	r3, [pc, #536]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	4a85      	ldr	r2, [pc, #532]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004780:	6113      	str	r3, [r2, #16]
 8004782:	4b83      	ldr	r3, [pc, #524]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004784:	6919      	ldr	r1, [r3, #16]
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800478e:	4a80      	ldr	r2, [pc, #512]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a2:	2300      	movs	r3, #0
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047b0:	4b77      	ldr	r3, [pc, #476]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	4a74      	ldr	r2, [pc, #464]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 80047d2:	2300      	movs	r3, #0
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
 80047d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047e0:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f0:	4a67      	ldr	r2, [pc, #412]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	2100      	movs	r1, #0
 8004800:	62b9      	str	r1, [r7, #40]	; 0x28
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004808:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d011      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004816:	3308      	adds	r3, #8
 8004818:	2100      	movs	r1, #0
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fb78 	bl	8004f10 <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	2100      	movs	r1, #0
 8004840:	6239      	str	r1, [r7, #32]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800484c:	460b      	mov	r3, r1
 800484e:	4313      	orrs	r3, r2
 8004850:	d011      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004856:	3308      	adds	r3, #8
 8004858:	2101      	movs	r1, #1
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fb58 	bl	8004f10 <RCCEx_PLL2_Config>
 8004860:	4603      	mov	r3, r0
 8004862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004872:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	2100      	movs	r1, #0
 8004880:	61b9      	str	r1, [r7, #24]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800488c:	460b      	mov	r3, r1
 800488e:	4313      	orrs	r3, r2
 8004890:	d011      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	3308      	adds	r3, #8
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fb38 	bl	8004f10 <RCCEx_PLL2_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	2100      	movs	r1, #0
 80048c0:	6139      	str	r1, [r7, #16]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d011      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fbca 	bl	8005074 <RCCEx_PLL3_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	2100      	movs	r1, #0
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d011      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004916:	3328      	adds	r3, #40	; 0x28
 8004918:	2101      	movs	r1, #1
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fbaa 	bl	8005074 <RCCEx_PLL3_Config>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	2100      	movs	r1, #0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	607b      	str	r3, [r7, #4]
 8004948:	e9d7 1200 	ldrd	r1, r2, [r7]
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d011      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004956:	3328      	adds	r3, #40	; 0x28
 8004958:	2102      	movs	r1, #2
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fb8a 	bl	8005074 <RCCEx_PLL3_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004972:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004976:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
}
 8004984:	4618      	mov	r0, r3
 8004986:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800498a:	46bd      	mov	sp, r7
 800498c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004990:	58024400 	.word	0x58024400

08004994 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004998:	f7fe fd96 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	4904      	ldr	r1, [pc, #16]	; (80049bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	58024400 	.word	0x58024400
 80049bc:	0800f2f4 	.word	0x0800f2f4

080049c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049c8:	4ba1      	ldr	r3, [pc, #644]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049d2:	4b9f      	ldr	r3, [pc, #636]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	0b1b      	lsrs	r3, r3, #12
 80049d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049de:	4b9c      	ldr	r3, [pc, #624]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049ea:	4b99      	ldr	r3, [pc, #612]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	08db      	lsrs	r3, r3, #3
 80049f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8111 	beq.w	8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f000 8083 	beq.w	8004b1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	f200 80a1 	bhi.w	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d056      	beq.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a2a:	e099      	b.n	8004b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a2c:	4b88      	ldr	r3, [pc, #544]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a38:	4b85      	ldr	r3, [pc, #532]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	4a84      	ldr	r2, [pc, #528]	; (8004c54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a44:	fa22 f303 	lsr.w	r3, r2, r3
 8004a48:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b7b      	ldr	r3, [pc, #492]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a92:	e087      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	e065      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b59      	ldr	r3, [pc, #356]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b1a:	e043      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5e:	e021      	b.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b72:	4b37      	ldr	r3, [pc, #220]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ba4:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bca:	ee17 2a90 	vmov	r2, s15
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004bd2:	4b1f      	ldr	r3, [pc, #124]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf8:	ee17 2a90 	vmov	r2, s15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c26:	ee17 2a90 	vmov	r2, s15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]
}
 8004c42:	bf00      	nop
 8004c44:	3724      	adds	r7, #36	; 0x24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	03d09000 	.word	0x03d09000
 8004c58:	46000000 	.word	0x46000000
 8004c5c:	4c742400 	.word	0x4c742400
 8004c60:	4a742400 	.word	0x4a742400
 8004c64:	4af42400 	.word	0x4af42400

08004c68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b089      	sub	sp, #36	; 0x24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c70:	4ba1      	ldr	r3, [pc, #644]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c7a:	4b9f      	ldr	r3, [pc, #636]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	0d1b      	lsrs	r3, r3, #20
 8004c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c86:	4b9c      	ldr	r3, [pc, #624]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c92:	4b99      	ldr	r3, [pc, #612]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	08db      	lsrs	r3, r3, #3
 8004c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8111 	beq.w	8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	f000 8083 	beq.w	8004dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	f200 80a1 	bhi.w	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d056      	beq.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004cd2:	e099      	b.n	8004e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cd4:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02d      	beq.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ce0:	4b85      	ldr	r3, [pc, #532]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	08db      	lsrs	r3, r3, #3
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	4a84      	ldr	r2, [pc, #528]	; (8004efc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	ee07 3a90 	vmov	s15, r3
 8004cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d0a:	4b7b      	ldr	r3, [pc, #492]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d3a:	e087      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	ee07 3a90 	vmov	s15, r3
 8004d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7e:	e065      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d92:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dc2:	e043      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dd6:	4b48      	ldr	r3, [pc, #288]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e06:	e021      	b.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b37      	ldr	r3, [pc, #220]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	0a5b      	lsrs	r3, r3, #9
 8004e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e72:	ee17 2a90 	vmov	r2, s15
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea0:	ee17 2a90 	vmov	r2, s15
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	0e1b      	lsrs	r3, r3, #24
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ece:	ee17 2a90 	vmov	r2, s15
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ed6:	e008      	b.n	8004eea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
}
 8004eea:	bf00      	nop
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	03d09000 	.word	0x03d09000
 8004f00:	46000000 	.word	0x46000000
 8004f04:	4c742400 	.word	0x4c742400
 8004f08:	4a742400 	.word	0x4a742400
 8004f0c:	4af42400 	.word	0x4af42400

08004f10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f1e:	4b53      	ldr	r3, [pc, #332]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d101      	bne.n	8004f2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e099      	b.n	8005062 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f2e:	4b4f      	ldr	r3, [pc, #316]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a4e      	ldr	r2, [pc, #312]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fc f969 	bl	8001210 <HAL_GetTick>
 8004f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f42:	f7fc f965 	bl	8001210 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e086      	b.n	8005062 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f54:	4b45      	ldr	r3, [pc, #276]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f60:	4b42      	ldr	r3, [pc, #264]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	031b      	lsls	r3, r3, #12
 8004f6e:	493f      	ldr	r1, [pc, #252]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	628b      	str	r3, [r1, #40]	; 0x28
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	025b      	lsls	r3, r3, #9
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004fa4:	4931      	ldr	r1, [pc, #196]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004faa:	4b30      	ldr	r3, [pc, #192]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	492d      	ldr	r1, [pc, #180]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f023 0220 	bic.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	4928      	ldr	r1, [pc, #160]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fce:	4b27      	ldr	r3, [pc, #156]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	4a26      	ldr	r2, [pc, #152]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fd4:	f023 0310 	bic.w	r3, r3, #16
 8004fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fda:	4b24      	ldr	r3, [pc, #144]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fde:	4b24      	ldr	r3, [pc, #144]	; (8005070 <RCCEx_PLL2_Config+0x160>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	69d2      	ldr	r2, [r2, #28]
 8004fe6:	00d2      	lsls	r2, r2, #3
 8004fe8:	4920      	ldr	r1, [pc, #128]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fee:	4b1f      	ldr	r3, [pc, #124]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	f043 0310 	orr.w	r3, r3, #16
 8004ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800500c:	e00f      	b.n	800502e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005014:	4b15      	ldr	r3, [pc, #84]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005020:	e005      	b.n	800502e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	4a11      	ldr	r2, [pc, #68]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800502c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800502e:	4b0f      	ldr	r3, [pc, #60]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a0e      	ldr	r2, [pc, #56]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503a:	f7fc f8e9 	bl	8001210 <HAL_GetTick>
 800503e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005040:	e008      	b.n	8005054 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005042:	f7fc f8e5 	bl	8001210 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e006      	b.n	8005062 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <RCCEx_PLL2_Config+0x15c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	58024400 	.word	0x58024400
 8005070:	ffff0007 	.word	0xffff0007

08005074 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005082:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d101      	bne.n	8005092 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e099      	b.n	80051c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005092:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a4e      	ldr	r2, [pc, #312]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509e:	f7fc f8b7 	bl	8001210 <HAL_GetTick>
 80050a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050a4:	e008      	b.n	80050b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050a6:	f7fc f8b3 	bl	8001210 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e086      	b.n	80051c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050b8:	4b45      	ldr	r3, [pc, #276]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f0      	bne.n	80050a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80050c4:	4b42      	ldr	r3, [pc, #264]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	493f      	ldr	r1, [pc, #252]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	628b      	str	r3, [r1, #40]	; 0x28
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	3b01      	subs	r3, #1
 80050de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	025b      	lsls	r3, r3, #9
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	3b01      	subs	r3, #1
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005108:	4931      	ldr	r1, [pc, #196]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800510a:	4313      	orrs	r3, r2
 800510c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800510e:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	492d      	ldr	r1, [pc, #180]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800511c:	4313      	orrs	r3, r2
 800511e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005120:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	4928      	ldr	r1, [pc, #160]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005132:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	4a26      	ldr	r2, [pc, #152]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800513e:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <RCCEx_PLL3_Config+0x160>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	69d2      	ldr	r2, [r2, #28]
 800514a:	00d2      	lsls	r2, r2, #3
 800514c:	4920      	ldr	r1, [pc, #128]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800514e:	4313      	orrs	r3, r2
 8005150:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005164:	4b1a      	ldr	r3, [pc, #104]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800516a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800516e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005170:	e00f      	b.n	8005192 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d106      	bne.n	8005186 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	4a14      	ldr	r2, [pc, #80]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800517e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005184:	e005      	b.n	8005192 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a11      	ldr	r2, [pc, #68]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 800518c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a0e      	ldr	r2, [pc, #56]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 8005198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519e:	f7fc f837 	bl	8001210 <HAL_GetTick>
 80051a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051a4:	e008      	b.n	80051b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051a6:	f7fc f833 	bl	8001210 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e006      	b.n	80051c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	58024400 	.word	0x58024400
 80051d4:	ffff0007 	.word	0xffff0007

080051d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e042      	b.n	8005270 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fb fdf3 	bl	8000de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2224      	movs	r2, #36	; 0x24
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f001 fa44 	bl	80066b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fcd9 	bl	8005be0 <UART_SetConfig>
 800522e:	4603      	mov	r3, r0
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e01b      	b.n	8005270 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 fac3 	bl	80067f4 <UART_CheckIdleState>
 800526e:	4603      	mov	r3, r0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	2b20      	cmp	r3, #32
 8005290:	d17b      	bne.n	800538a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_UART_Transmit+0x26>
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e074      	b.n	800538c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2221      	movs	r2, #33	; 0x21
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052b2:	f7fb ffad 	bl	8001210 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	88fa      	ldrh	r2, [r7, #6]
 80052bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	88fa      	ldrh	r2, [r7, #6]
 80052c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d108      	bne.n	80052e4 <HAL_UART_Transmit+0x6c>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d104      	bne.n	80052e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e003      	b.n	80052ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052ec:	e030      	b.n	8005350 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f001 fb25 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e03d      	b.n	800538c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	3302      	adds	r3, #2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	e007      	b.n	800533e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	3301      	adds	r3, #1
 800533c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1c8      	bne.n	80052ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2200      	movs	r2, #0
 8005364:	2140      	movs	r1, #64	; 0x40
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f001 faee 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e006      	b.n	800538c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d137      	bne.n	800541c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_UART_Receive_IT+0x24>
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e030      	b.n	800541e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_UART_Receive_IT+0x94>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d01f      	beq.n	800540c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d018      	beq.n	800540c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	613b      	str	r3, [r7, #16]
   return(result);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	623b      	str	r3, [r7, #32]
 80053fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	61bb      	str	r3, [r7, #24]
   return(result);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	461a      	mov	r2, r3
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f001 fb06 	bl	8006a24 <UART_Start_Receive_IT>
 8005418:	4603      	mov	r3, r0
 800541a:	e000      	b.n	800541e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	58000c00 	.word	0x58000c00

0800542c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0ba      	sub	sp, #232	; 0xe8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005456:	f640 030f 	movw	r3, #2063	; 0x80f
 800545a:	4013      	ands	r3, r2
 800545c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11b      	bne.n	80054a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8377 	beq.w	8005b84 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
      }
      return;
 800549e:	e371      	b.n	8005b84 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8123 	beq.w	80056f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80054aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80054ae:	4b8d      	ldr	r3, [pc, #564]	; (80056e4 <HAL_UART_IRQHandler+0x2b8>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80054b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80054ba:	4b8b      	ldr	r3, [pc, #556]	; (80056e8 <HAL_UART_IRQHandler+0x2bc>)
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8116 	beq.w	80056f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <HAL_UART_IRQHandler+0xc8>
 80054d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00b      	beq.n	80054f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2201      	movs	r2, #1
 80054e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f043 0201 	orr.w	r2, r3, #1
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d011      	beq.n	8005524 <HAL_UART_IRQHandler+0xf8>
 8005500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00b      	beq.n	8005524 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2202      	movs	r2, #2
 8005512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551a:	f043 0204 	orr.w	r2, r3, #4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d011      	beq.n	8005554 <HAL_UART_IRQHandler+0x128>
 8005530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2204      	movs	r2, #4
 8005542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554a:	f043 0202 	orr.w	r2, r3, #2
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b00      	cmp	r3, #0
 800555e:	d017      	beq.n	8005590 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d105      	bne.n	8005578 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800556c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005570:	4b5c      	ldr	r3, [pc, #368]	; (80056e4 <HAL_UART_IRQHandler+0x2b8>)
 8005572:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2208      	movs	r2, #8
 800557e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	f043 0208 	orr.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005598:	2b00      	cmp	r3, #0
 800559a:	d012      	beq.n	80055c2 <HAL_UART_IRQHandler+0x196>
 800559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f043 0220 	orr.w	r2, r3, #32
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 82dd 	beq.w	8005b88 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d2:	f003 0320 	and.w	r3, r3, #32
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80055da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80055e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800561e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005622:	2b00      	cmp	r3, #0
 8005624:	d054      	beq.n	80056d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fb1e 	bl	8006c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d146      	bne.n	80056c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3308      	adds	r3, #8
 8005662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005666:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800566a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800567e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1d9      	bne.n	800563a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d017      	beq.n	80056c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005696:	4a15      	ldr	r2, [pc, #84]	; (80056ec <HAL_UART_IRQHandler+0x2c0>)
 8005698:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fc faed 	bl	8001c80 <HAL_DMA_Abort_IT>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d019      	beq.n	80056e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80056ba:	4610      	mov	r0, r2
 80056bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056be:	e00f      	b.n	80056e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa77 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c6:	e00b      	b.n	80056e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa73 	bl	8005bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ce:	e007      	b.n	80056e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fa6f 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80056de:	e253      	b.n	8005b88 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	bf00      	nop
    return;
 80056e2:	e251      	b.n	8005b88 <HAL_UART_IRQHandler+0x75c>
 80056e4:	10000001 	.word	0x10000001
 80056e8:	04000120 	.word	0x04000120
 80056ec:	08006d35 	.word	0x08006d35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	f040 81e7 	bne.w	8005ac8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0310 	and.w	r3, r3, #16
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 81e0 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 81d9 	beq.w	8005ac8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2210      	movs	r2, #16
 800571c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	f040 8151 	bne.w	80059d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a96      	ldr	r2, [pc, #600]	; (8005990 <HAL_UART_IRQHandler+0x564>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d068      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a93      	ldr	r2, [pc, #588]	; (8005994 <HAL_UART_IRQHandler+0x568>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d061      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a91      	ldr	r2, [pc, #580]	; (8005998 <HAL_UART_IRQHandler+0x56c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d05a      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a8e      	ldr	r2, [pc, #568]	; (800599c <HAL_UART_IRQHandler+0x570>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d053      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a8c      	ldr	r2, [pc, #560]	; (80059a0 <HAL_UART_IRQHandler+0x574>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d04c      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a89      	ldr	r2, [pc, #548]	; (80059a4 <HAL_UART_IRQHandler+0x578>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d045      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a87      	ldr	r2, [pc, #540]	; (80059a8 <HAL_UART_IRQHandler+0x57c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d03e      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a84      	ldr	r2, [pc, #528]	; (80059ac <HAL_UART_IRQHandler+0x580>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d037      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a82      	ldr	r2, [pc, #520]	; (80059b0 <HAL_UART_IRQHandler+0x584>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d030      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7f      	ldr	r2, [pc, #508]	; (80059b4 <HAL_UART_IRQHandler+0x588>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d029      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7d      	ldr	r2, [pc, #500]	; (80059b8 <HAL_UART_IRQHandler+0x58c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a7a      	ldr	r2, [pc, #488]	; (80059bc <HAL_UART_IRQHandler+0x590>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d01b      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a78      	ldr	r2, [pc, #480]	; (80059c0 <HAL_UART_IRQHandler+0x594>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d014      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a75      	ldr	r2, [pc, #468]	; (80059c4 <HAL_UART_IRQHandler+0x598>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00d      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a73      	ldr	r2, [pc, #460]	; (80059c8 <HAL_UART_IRQHandler+0x59c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d006      	beq.n	800580e <HAL_UART_IRQHandler+0x3e2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a70      	ldr	r2, [pc, #448]	; (80059cc <HAL_UART_IRQHandler+0x5a0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d106      	bne.n	800581c <HAL_UART_IRQHandler+0x3f0>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	b29b      	uxth	r3, r3
 800581a:	e005      	b.n	8005828 <HAL_UART_IRQHandler+0x3fc>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800582c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 81ab 	beq.w	8005b8c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800583c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005840:	429a      	cmp	r2, r3
 8005842:	f080 81a3 	bcs.w	8005b8c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800584c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	f000 8087 	beq.w	800596e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800588a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800588e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1da      	bne.n	8005860 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e1      	bne.n	80058aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3308      	adds	r3, #8
 8005906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800590a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800590c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e3      	bne.n	80058e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800594e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005950:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005954:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e4      	bne.n	800592c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005968:	4618      	mov	r0, r3
 800596a:	f7fb fe6b 	bl	8001644 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005980:	b29b      	uxth	r3, r3
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	b29b      	uxth	r3, r3
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f91d 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800598e:	e0fd      	b.n	8005b8c <HAL_UART_IRQHandler+0x760>
 8005990:	40020010 	.word	0x40020010
 8005994:	40020028 	.word	0x40020028
 8005998:	40020040 	.word	0x40020040
 800599c:	40020058 	.word	0x40020058
 80059a0:	40020070 	.word	0x40020070
 80059a4:	40020088 	.word	0x40020088
 80059a8:	400200a0 	.word	0x400200a0
 80059ac:	400200b8 	.word	0x400200b8
 80059b0:	40020410 	.word	0x40020410
 80059b4:	40020428 	.word	0x40020428
 80059b8:	40020440 	.word	0x40020440
 80059bc:	40020458 	.word	0x40020458
 80059c0:	40020470 	.word	0x40020470
 80059c4:	40020488 	.word	0x40020488
 80059c8:	400204a0 	.word	0x400204a0
 80059cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80cf 	beq.w	8005b90 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80059f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80ca 	beq.w	8005b90 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e4      	bne.n	80059fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	623b      	str	r3, [r7, #32]
   return(result);
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	4b55      	ldr	r3, [pc, #340]	; (8005b9c <HAL_UART_IRQHandler+0x770>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a56:	633a      	str	r2, [r7, #48]	; 0x30
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e3      	bne.n	8005a32 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	69b9      	ldr	r1, [r7, #24]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	617b      	str	r3, [r7, #20]
   return(result);
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e4      	bne.n	8005a7e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f881 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ac6:	e063      	b.n	8005b90 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <HAL_UART_IRQHandler+0x6c6>
 8005ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 fe80 	bl	80077f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005af0:	e051      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d014      	beq.n	8005b28 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d03a      	beq.n	8005b94 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
    }
    return;
 8005b26:	e035      	b.n	8005b94 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d009      	beq.n	8005b48 <HAL_UART_IRQHandler+0x71c>
 8005b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 f90d 	bl	8006d60 <UART_EndTransmit_IT>
    return;
 8005b46:	e026      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d009      	beq.n	8005b68 <HAL_UART_IRQHandler+0x73c>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fe59 	bl	8007818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b66:	e016      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d010      	beq.n	8005b96 <HAL_UART_IRQHandler+0x76a>
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	da0c      	bge.n	8005b96 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 fe41 	bl	8007804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b82:	e008      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
      return;
 8005b84:	bf00      	nop
 8005b86:	e006      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
    return;
 8005b88:	bf00      	nop
 8005b8a:	e004      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
      return;
 8005b8c:	bf00      	nop
 8005b8e:	e002      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
      return;
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <HAL_UART_IRQHandler+0x76a>
    return;
 8005b94:	bf00      	nop
  }
}
 8005b96:	37e8      	adds	r7, #232	; 0xe8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	effffffe 	.word	0xeffffffe

08005ba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be4:	b092      	sub	sp, #72	; 0x48
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4bbe      	ldr	r3, [pc, #760]	; (8005f08 <UART_SetConfig+0x328>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4ab3      	ldr	r2, [pc, #716]	; (8005f0c <UART_SetConfig+0x32c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	4baf      	ldr	r3, [pc, #700]	; (8005f10 <UART_SetConfig+0x330>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	f023 010f 	bic.w	r1, r3, #15
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4aa6      	ldr	r2, [pc, #664]	; (8005f14 <UART_SetConfig+0x334>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d177      	bne.n	8005d70 <UART_SetConfig+0x190>
 8005c80:	4ba5      	ldr	r3, [pc, #660]	; (8005f18 <UART_SetConfig+0x338>)
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c88:	2b28      	cmp	r3, #40	; 0x28
 8005c8a:	d86d      	bhi.n	8005d68 <UART_SetConfig+0x188>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0xb4>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d69 	.word	0x08005d69
 8005c9c:	08005d69 	.word	0x08005d69
 8005ca0:	08005d69 	.word	0x08005d69
 8005ca4:	08005d69 	.word	0x08005d69
 8005ca8:	08005d69 	.word	0x08005d69
 8005cac:	08005d69 	.word	0x08005d69
 8005cb0:	08005d69 	.word	0x08005d69
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d69 	.word	0x08005d69
 8005cbc:	08005d69 	.word	0x08005d69
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d69 	.word	0x08005d69
 8005cc8:	08005d69 	.word	0x08005d69
 8005ccc:	08005d69 	.word	0x08005d69
 8005cd0:	08005d69 	.word	0x08005d69
 8005cd4:	08005d49 	.word	0x08005d49
 8005cd8:	08005d69 	.word	0x08005d69
 8005cdc:	08005d69 	.word	0x08005d69
 8005ce0:	08005d69 	.word	0x08005d69
 8005ce4:	08005d69 	.word	0x08005d69
 8005ce8:	08005d69 	.word	0x08005d69
 8005cec:	08005d69 	.word	0x08005d69
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d51 	.word	0x08005d51
 8005cf8:	08005d69 	.word	0x08005d69
 8005cfc:	08005d69 	.word	0x08005d69
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005d69 	.word	0x08005d69
 8005d0c:	08005d69 	.word	0x08005d69
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005d69 	.word	0x08005d69
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d69 	.word	0x08005d69
 8005d28:	08005d69 	.word	0x08005d69
 8005d2c:	08005d69 	.word	0x08005d69
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e222      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e21e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e21a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e216      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d58:	2320      	movs	r3, #32
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e212      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e20e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e20a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a69      	ldr	r2, [pc, #420]	; (8005f1c <UART_SetConfig+0x33c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d130      	bne.n	8005ddc <UART_SetConfig+0x1fc>
 8005d7a:	4b67      	ldr	r3, [pc, #412]	; (8005f18 <UART_SetConfig+0x338>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	d826      	bhi.n	8005dd4 <UART_SetConfig+0x1f4>
 8005d86:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <UART_SetConfig+0x1ac>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005da5 	.word	0x08005da5
 8005d90:	08005dad 	.word	0x08005dad
 8005d94:	08005db5 	.word	0x08005db5
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005dc5 	.word	0x08005dc5
 8005da0:	08005dcd 	.word	0x08005dcd
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e1ec      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dac:	2304      	movs	r3, #4
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e1e8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005db4:	2308      	movs	r3, #8
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e1e4      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e1e0      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dc4:	2320      	movs	r3, #32
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e1dc      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dcc:	2340      	movs	r3, #64	; 0x40
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dd2:	e1d8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dda:	e1d4      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4f      	ldr	r2, [pc, #316]	; (8005f20 <UART_SetConfig+0x340>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d130      	bne.n	8005e48 <UART_SetConfig+0x268>
 8005de6:	4b4c      	ldr	r3, [pc, #304]	; (8005f18 <UART_SetConfig+0x338>)
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d826      	bhi.n	8005e40 <UART_SetConfig+0x260>
 8005df2:	a201      	add	r2, pc, #4	; (adr r2, 8005df8 <UART_SetConfig+0x218>)
 8005df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df8:	08005e11 	.word	0x08005e11
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	08005e21 	.word	0x08005e21
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e1b6      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e1b2      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e1ae      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e1aa      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e30:	2320      	movs	r3, #32
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e1a6      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e38:	2340      	movs	r3, #64	; 0x40
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e1a2      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e19e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a35      	ldr	r2, [pc, #212]	; (8005f24 <UART_SetConfig+0x344>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d130      	bne.n	8005eb4 <UART_SetConfig+0x2d4>
 8005e52:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <UART_SetConfig+0x338>)
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d826      	bhi.n	8005eac <UART_SetConfig+0x2cc>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0x284>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e7d 	.word	0x08005e7d
 8005e68:	08005e85 	.word	0x08005e85
 8005e6c:	08005e8d 	.word	0x08005e8d
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e180      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e17c      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e178      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e174      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e170      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e16c      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e168      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <UART_SetConfig+0x348>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d142      	bne.n	8005f44 <UART_SetConfig+0x364>
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <UART_SetConfig+0x338>)
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d838      	bhi.n	8005f3c <UART_SetConfig+0x35c>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x2f0>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ee9 	.word	0x08005ee9
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ef9 	.word	0x08005ef9
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e14a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e146      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e142      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e13e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f08:	cfff69f3 	.word	0xcfff69f3
 8005f0c:	58000c00 	.word	0x58000c00
 8005f10:	11fff4ff 	.word	0x11fff4ff
 8005f14:	40011000 	.word	0x40011000
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	40004400 	.word	0x40004400
 8005f20:	40004800 	.word	0x40004800
 8005f24:	40004c00 	.word	0x40004c00
 8005f28:	40005000 	.word	0x40005000
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e128      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e124      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f3c:	2380      	movs	r3, #128	; 0x80
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e120      	b.n	8006186 <UART_SetConfig+0x5a6>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4acb      	ldr	r2, [pc, #812]	; (8006278 <UART_SetConfig+0x698>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d176      	bne.n	800603c <UART_SetConfig+0x45c>
 8005f4e:	4bcb      	ldr	r3, [pc, #812]	; (800627c <UART_SetConfig+0x69c>)
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f56:	2b28      	cmp	r3, #40	; 0x28
 8005f58:	d86c      	bhi.n	8006034 <UART_SetConfig+0x454>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x380>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08006005 	.word	0x08006005
 8005f64:	08006035 	.word	0x08006035
 8005f68:	08006035 	.word	0x08006035
 8005f6c:	08006035 	.word	0x08006035
 8005f70:	08006035 	.word	0x08006035
 8005f74:	08006035 	.word	0x08006035
 8005f78:	08006035 	.word	0x08006035
 8005f7c:	08006035 	.word	0x08006035
 8005f80:	0800600d 	.word	0x0800600d
 8005f84:	08006035 	.word	0x08006035
 8005f88:	08006035 	.word	0x08006035
 8005f8c:	08006035 	.word	0x08006035
 8005f90:	08006035 	.word	0x08006035
 8005f94:	08006035 	.word	0x08006035
 8005f98:	08006035 	.word	0x08006035
 8005f9c:	08006035 	.word	0x08006035
 8005fa0:	08006015 	.word	0x08006015
 8005fa4:	08006035 	.word	0x08006035
 8005fa8:	08006035 	.word	0x08006035
 8005fac:	08006035 	.word	0x08006035
 8005fb0:	08006035 	.word	0x08006035
 8005fb4:	08006035 	.word	0x08006035
 8005fb8:	08006035 	.word	0x08006035
 8005fbc:	08006035 	.word	0x08006035
 8005fc0:	0800601d 	.word	0x0800601d
 8005fc4:	08006035 	.word	0x08006035
 8005fc8:	08006035 	.word	0x08006035
 8005fcc:	08006035 	.word	0x08006035
 8005fd0:	08006035 	.word	0x08006035
 8005fd4:	08006035 	.word	0x08006035
 8005fd8:	08006035 	.word	0x08006035
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006025 	.word	0x08006025
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006035 	.word	0x08006035
 8005fec:	08006035 	.word	0x08006035
 8005ff0:	08006035 	.word	0x08006035
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	08006035 	.word	0x08006035
 8005ffc:	08006035 	.word	0x08006035
 8006000:	0800602d 	.word	0x0800602d
 8006004:	2301      	movs	r3, #1
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e0bc      	b.n	8006186 <UART_SetConfig+0x5a6>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e0b8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e0b4      	b.n	8006186 <UART_SetConfig+0x5a6>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e0b0      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006024:	2320      	movs	r3, #32
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e0ac      	b.n	8006186 <UART_SetConfig+0x5a6>
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e0a8      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e0a4      	b.n	8006186 <UART_SetConfig+0x5a6>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a8f      	ldr	r2, [pc, #572]	; (8006280 <UART_SetConfig+0x6a0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d130      	bne.n	80060a8 <UART_SetConfig+0x4c8>
 8006046:	4b8d      	ldr	r3, [pc, #564]	; (800627c <UART_SetConfig+0x69c>)
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	2b05      	cmp	r3, #5
 8006050:	d826      	bhi.n	80060a0 <UART_SetConfig+0x4c0>
 8006052:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x478>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	08006071 	.word	0x08006071
 800605c:	08006079 	.word	0x08006079
 8006060:	08006081 	.word	0x08006081
 8006064:	08006089 	.word	0x08006089
 8006068:	08006091 	.word	0x08006091
 800606c:	08006099 	.word	0x08006099
 8006070:	2300      	movs	r3, #0
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e086      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006078:	2304      	movs	r3, #4
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e082      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006080:	2308      	movs	r3, #8
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e07e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006088:	2310      	movs	r3, #16
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e07a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006090:	2320      	movs	r3, #32
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e076      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006098:	2340      	movs	r3, #64	; 0x40
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e072      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e06e      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a75      	ldr	r2, [pc, #468]	; (8006284 <UART_SetConfig+0x6a4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d130      	bne.n	8006114 <UART_SetConfig+0x534>
 80060b2:	4b72      	ldr	r3, [pc, #456]	; (800627c <UART_SetConfig+0x69c>)
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d826      	bhi.n	800610c <UART_SetConfig+0x52c>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x4e4>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060dd 	.word	0x080060dd
 80060c8:	080060e5 	.word	0x080060e5
 80060cc:	080060ed 	.word	0x080060ed
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	2300      	movs	r3, #0
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e050      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060e4:	2304      	movs	r3, #4
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e04c      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060ec:	2308      	movs	r3, #8
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f2:	e048      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060f4:	2310      	movs	r3, #16
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fa:	e044      	b.n	8006186 <UART_SetConfig+0x5a6>
 80060fc:	2320      	movs	r3, #32
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e040      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006104:	2340      	movs	r3, #64	; 0x40
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e03c      	b.n	8006186 <UART_SetConfig+0x5a6>
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e038      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a5b      	ldr	r2, [pc, #364]	; (8006288 <UART_SetConfig+0x6a8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d130      	bne.n	8006180 <UART_SetConfig+0x5a0>
 800611e:	4b57      	ldr	r3, [pc, #348]	; (800627c <UART_SetConfig+0x69c>)
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b05      	cmp	r3, #5
 8006128:	d826      	bhi.n	8006178 <UART_SetConfig+0x598>
 800612a:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <UART_SetConfig+0x550>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006149 	.word	0x08006149
 8006134:	08006151 	.word	0x08006151
 8006138:	08006159 	.word	0x08006159
 800613c:	08006161 	.word	0x08006161
 8006140:	08006169 	.word	0x08006169
 8006144:	08006171 	.word	0x08006171
 8006148:	2302      	movs	r3, #2
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e01a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006150:	2304      	movs	r3, #4
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e016      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006158:	2308      	movs	r3, #8
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e012      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006160:	2310      	movs	r3, #16
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e00e      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006168:	2320      	movs	r3, #32
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e00a      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006170:	2340      	movs	r3, #64	; 0x40
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e006      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e002      	b.n	8006186 <UART_SetConfig+0x5a6>
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a3f      	ldr	r2, [pc, #252]	; (8006288 <UART_SetConfig+0x6a8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	f040 80f8 	bne.w	8006382 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006192:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006196:	2b20      	cmp	r3, #32
 8006198:	dc46      	bgt.n	8006228 <UART_SetConfig+0x648>
 800619a:	2b02      	cmp	r3, #2
 800619c:	f2c0 8082 	blt.w	80062a4 <UART_SetConfig+0x6c4>
 80061a0:	3b02      	subs	r3, #2
 80061a2:	2b1e      	cmp	r3, #30
 80061a4:	d87e      	bhi.n	80062a4 <UART_SetConfig+0x6c4>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <UART_SetConfig+0x5cc>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	0800622f 	.word	0x0800622f
 80061b0:	080062a5 	.word	0x080062a5
 80061b4:	08006237 	.word	0x08006237
 80061b8:	080062a5 	.word	0x080062a5
 80061bc:	080062a5 	.word	0x080062a5
 80061c0:	080062a5 	.word	0x080062a5
 80061c4:	08006247 	.word	0x08006247
 80061c8:	080062a5 	.word	0x080062a5
 80061cc:	080062a5 	.word	0x080062a5
 80061d0:	080062a5 	.word	0x080062a5
 80061d4:	080062a5 	.word	0x080062a5
 80061d8:	080062a5 	.word	0x080062a5
 80061dc:	080062a5 	.word	0x080062a5
 80061e0:	080062a5 	.word	0x080062a5
 80061e4:	08006257 	.word	0x08006257
 80061e8:	080062a5 	.word	0x080062a5
 80061ec:	080062a5 	.word	0x080062a5
 80061f0:	080062a5 	.word	0x080062a5
 80061f4:	080062a5 	.word	0x080062a5
 80061f8:	080062a5 	.word	0x080062a5
 80061fc:	080062a5 	.word	0x080062a5
 8006200:	080062a5 	.word	0x080062a5
 8006204:	080062a5 	.word	0x080062a5
 8006208:	080062a5 	.word	0x080062a5
 800620c:	080062a5 	.word	0x080062a5
 8006210:	080062a5 	.word	0x080062a5
 8006214:	080062a5 	.word	0x080062a5
 8006218:	080062a5 	.word	0x080062a5
 800621c:	080062a5 	.word	0x080062a5
 8006220:	080062a5 	.word	0x080062a5
 8006224:	08006297 	.word	0x08006297
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d037      	beq.n	800629c <UART_SetConfig+0x6bc>
 800622c:	e03a      	b.n	80062a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800622e:	f7fe fbb1 	bl	8004994 <HAL_RCCEx_GetD3PCLK1Freq>
 8006232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006234:	e03c      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fbc0 	bl	80049c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006244:	e034      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006246:	f107 0318 	add.w	r3, r7, #24
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fd0c 	bl	8004c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006254:	e02c      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <UART_SetConfig+0x69c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <UART_SetConfig+0x69c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	4a07      	ldr	r2, [pc, #28]	; (800628c <UART_SetConfig+0x6ac>)
 800626e:	fa22 f303 	lsr.w	r3, r2, r3
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006274:	e01c      	b.n	80062b0 <UART_SetConfig+0x6d0>
 8006276:	bf00      	nop
 8006278:	40011400 	.word	0x40011400
 800627c:	58024400 	.word	0x58024400
 8006280:	40007800 	.word	0x40007800
 8006284:	40007c00 	.word	0x40007c00
 8006288:	58000c00 	.word	0x58000c00
 800628c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006290:	4b9d      	ldr	r3, [pc, #628]	; (8006508 <UART_SetConfig+0x928>)
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006294:	e00c      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006296:	4b9d      	ldr	r3, [pc, #628]	; (800650c <UART_SetConfig+0x92c>)
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800629a:	e009      	b.n	80062b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a2:	e005      	b.n	80062b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81de 	beq.w	8006674 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	4a94      	ldr	r2, [pc, #592]	; (8006510 <UART_SetConfig+0x930>)
 80062be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d8:	429a      	cmp	r2, r3
 80062da:	d305      	bcc.n	80062e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d903      	bls.n	80062f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062ee:	e1c1      	b.n	8006674 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f2:	2200      	movs	r2, #0
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	60fa      	str	r2, [r7, #12]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	4a84      	ldr	r2, [pc, #528]	; (8006510 <UART_SetConfig+0x930>)
 80062fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006302:	b29b      	uxth	r3, r3
 8006304:	2200      	movs	r2, #0
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006312:	f7fa f83d 	bl	8000390 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	020b      	lsls	r3, r1, #8
 8006328:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800632c:	0202      	lsls	r2, r0, #8
 800632e:	6979      	ldr	r1, [r7, #20]
 8006330:	6849      	ldr	r1, [r1, #4]
 8006332:	0849      	lsrs	r1, r1, #1
 8006334:	2000      	movs	r0, #0
 8006336:	460c      	mov	r4, r1
 8006338:	4605      	mov	r5, r0
 800633a:	eb12 0804 	adds.w	r8, r2, r4
 800633e:	eb43 0905 	adc.w	r9, r3, r5
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	469a      	mov	sl, r3
 800634a:	4693      	mov	fp, r2
 800634c:	4652      	mov	r2, sl
 800634e:	465b      	mov	r3, fp
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa f81c 	bl	8000390 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4613      	mov	r3, r2
 800635e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006366:	d308      	bcc.n	800637a <UART_SetConfig+0x79a>
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636e:	d204      	bcs.n	800637a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006376:	60da      	str	r2, [r3, #12]
 8006378:	e17c      	b.n	8006674 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006380:	e178      	b.n	8006674 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638a:	f040 80c5 	bne.w	8006518 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800638e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006392:	2b20      	cmp	r3, #32
 8006394:	dc48      	bgt.n	8006428 <UART_SetConfig+0x848>
 8006396:	2b00      	cmp	r3, #0
 8006398:	db7b      	blt.n	8006492 <UART_SetConfig+0x8b2>
 800639a:	2b20      	cmp	r3, #32
 800639c:	d879      	bhi.n	8006492 <UART_SetConfig+0x8b2>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0x7c4>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	0800642f 	.word	0x0800642f
 80063a8:	08006437 	.word	0x08006437
 80063ac:	08006493 	.word	0x08006493
 80063b0:	08006493 	.word	0x08006493
 80063b4:	0800643f 	.word	0x0800643f
 80063b8:	08006493 	.word	0x08006493
 80063bc:	08006493 	.word	0x08006493
 80063c0:	08006493 	.word	0x08006493
 80063c4:	0800644f 	.word	0x0800644f
 80063c8:	08006493 	.word	0x08006493
 80063cc:	08006493 	.word	0x08006493
 80063d0:	08006493 	.word	0x08006493
 80063d4:	08006493 	.word	0x08006493
 80063d8:	08006493 	.word	0x08006493
 80063dc:	08006493 	.word	0x08006493
 80063e0:	08006493 	.word	0x08006493
 80063e4:	0800645f 	.word	0x0800645f
 80063e8:	08006493 	.word	0x08006493
 80063ec:	08006493 	.word	0x08006493
 80063f0:	08006493 	.word	0x08006493
 80063f4:	08006493 	.word	0x08006493
 80063f8:	08006493 	.word	0x08006493
 80063fc:	08006493 	.word	0x08006493
 8006400:	08006493 	.word	0x08006493
 8006404:	08006493 	.word	0x08006493
 8006408:	08006493 	.word	0x08006493
 800640c:	08006493 	.word	0x08006493
 8006410:	08006493 	.word	0x08006493
 8006414:	08006493 	.word	0x08006493
 8006418:	08006493 	.word	0x08006493
 800641c:	08006493 	.word	0x08006493
 8006420:	08006493 	.word	0x08006493
 8006424:	08006485 	.word	0x08006485
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d02e      	beq.n	800648a <UART_SetConfig+0x8aa>
 800642c:	e031      	b.n	8006492 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642e:	f7fd f87b 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8006432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006434:	e033      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006436:	f7fd f88d 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 800643a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800643c:	e02f      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800643e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fabc 	bl	80049c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800644c:	e027      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644e:	f107 0318 	add.w	r3, r7, #24
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fc08 	bl	8004c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800645c:	e01f      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645e:	4b2d      	ldr	r3, [pc, #180]	; (8006514 <UART_SetConfig+0x934>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800646a:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <UART_SetConfig+0x934>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	08db      	lsrs	r3, r3, #3
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	4a24      	ldr	r2, [pc, #144]	; (8006508 <UART_SetConfig+0x928>)
 8006476:	fa22 f303 	lsr.w	r3, r2, r3
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800647c:	e00f      	b.n	800649e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <UART_SetConfig+0x928>)
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006482:	e00c      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006484:	4b21      	ldr	r3, [pc, #132]	; (800650c <UART_SetConfig+0x92c>)
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006488:	e009      	b.n	800649e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006490:	e005      	b.n	800649e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800649c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80e7 	beq.w	8006674 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	4a19      	ldr	r2, [pc, #100]	; (8006510 <UART_SetConfig+0x930>)
 80064ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b0:	461a      	mov	r2, r3
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b8:	005a      	lsls	r2, r3, #1
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	085b      	lsrs	r3, r3, #1
 80064c0:	441a      	add	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	2b0f      	cmp	r3, #15
 80064d0:	d916      	bls.n	8006500 <UART_SetConfig+0x920>
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d8:	d212      	bcs.n	8006500 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f023 030f 	bic.w	r3, r3, #15
 80064e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064f2:	4313      	orrs	r3, r2
 80064f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80064fc:	60da      	str	r2, [r3, #12]
 80064fe:	e0b9      	b.n	8006674 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006506:	e0b5      	b.n	8006674 <UART_SetConfig+0xa94>
 8006508:	03d09000 	.word	0x03d09000
 800650c:	003d0900 	.word	0x003d0900
 8006510:	0800f304 	.word	0x0800f304
 8006514:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006518:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800651c:	2b20      	cmp	r3, #32
 800651e:	dc49      	bgt.n	80065b4 <UART_SetConfig+0x9d4>
 8006520:	2b00      	cmp	r3, #0
 8006522:	db7c      	blt.n	800661e <UART_SetConfig+0xa3e>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d87a      	bhi.n	800661e <UART_SetConfig+0xa3e>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x950>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	080065bb 	.word	0x080065bb
 8006534:	080065c3 	.word	0x080065c3
 8006538:	0800661f 	.word	0x0800661f
 800653c:	0800661f 	.word	0x0800661f
 8006540:	080065cb 	.word	0x080065cb
 8006544:	0800661f 	.word	0x0800661f
 8006548:	0800661f 	.word	0x0800661f
 800654c:	0800661f 	.word	0x0800661f
 8006550:	080065db 	.word	0x080065db
 8006554:	0800661f 	.word	0x0800661f
 8006558:	0800661f 	.word	0x0800661f
 800655c:	0800661f 	.word	0x0800661f
 8006560:	0800661f 	.word	0x0800661f
 8006564:	0800661f 	.word	0x0800661f
 8006568:	0800661f 	.word	0x0800661f
 800656c:	0800661f 	.word	0x0800661f
 8006570:	080065eb 	.word	0x080065eb
 8006574:	0800661f 	.word	0x0800661f
 8006578:	0800661f 	.word	0x0800661f
 800657c:	0800661f 	.word	0x0800661f
 8006580:	0800661f 	.word	0x0800661f
 8006584:	0800661f 	.word	0x0800661f
 8006588:	0800661f 	.word	0x0800661f
 800658c:	0800661f 	.word	0x0800661f
 8006590:	0800661f 	.word	0x0800661f
 8006594:	0800661f 	.word	0x0800661f
 8006598:	0800661f 	.word	0x0800661f
 800659c:	0800661f 	.word	0x0800661f
 80065a0:	0800661f 	.word	0x0800661f
 80065a4:	0800661f 	.word	0x0800661f
 80065a8:	0800661f 	.word	0x0800661f
 80065ac:	0800661f 	.word	0x0800661f
 80065b0:	08006611 	.word	0x08006611
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	d02e      	beq.n	8006616 <UART_SetConfig+0xa36>
 80065b8:	e031      	b.n	800661e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ba:	f7fc ffb5 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80065be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065c0:	e033      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c2:	f7fc ffc7 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 80065c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065c8:	e02f      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe f9f6 	bl	80049c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d8:	e027      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065da:	f107 0318 	add.w	r3, r7, #24
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fb42 	bl	8004c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065e8:	e01f      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ea:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <UART_SetConfig+0xac0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <UART_SetConfig+0xac0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	4a28      	ldr	r2, [pc, #160]	; (80066a4 <UART_SetConfig+0xac4>)
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006608:	e00f      	b.n	800662a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800660a:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <UART_SetConfig+0xac4>)
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800660e:	e00c      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <UART_SetConfig+0xac8>)
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006614:	e009      	b.n	800662a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	e005      	b.n	800662a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006628:	bf00      	nop
    }

    if (pclk != 0U)
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d021      	beq.n	8006674 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <UART_SetConfig+0xacc>)
 8006636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663a:	461a      	mov	r2, r3
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	441a      	add	r2, r3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006656:	2b0f      	cmp	r3, #15
 8006658:	d909      	bls.n	800666e <UART_SetConfig+0xa8e>
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006660:	d205      	bcs.n	800666e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	b29a      	uxth	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e002      	b.n	8006674 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2201      	movs	r2, #1
 8006678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2201      	movs	r2, #1
 8006680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006690:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006694:	4618      	mov	r0, r3
 8006696:	3748      	adds	r7, #72	; 0x48
 8006698:	46bd      	mov	sp, r7
 800669a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	03d09000 	.word	0x03d09000
 80066a8:	003d0900 	.word	0x003d0900
 80066ac:	0800f304 	.word	0x0800f304

080066b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	f003 0304 	and.w	r3, r3, #4
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ae:	d10a      	bne.n	80067c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b098      	sub	sp, #96	; 0x60
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006804:	f7fa fd04 	bl	8001210 <HAL_GetTick>
 8006808:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d12f      	bne.n	8006878 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006820:	2200      	movs	r2, #0
 8006822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f88e 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d022      	beq.n	8006878 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006846:	653b      	str	r3, [r7, #80]	; 0x50
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006850:	647b      	str	r3, [r7, #68]	; 0x44
 8006852:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e063      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d149      	bne.n	800691a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006886:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688e:	2200      	movs	r2, #0
 8006890:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f857 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d03c      	beq.n	800691a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	623b      	str	r3, [r7, #32]
   return(result);
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068be:	633b      	str	r3, [r7, #48]	; 0x30
 80068c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e6      	bne.n	80068a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0301 	bic.w	r3, r3, #1
 80068e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3308      	adds	r3, #8
 80068f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e5      	bne.n	80068d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e012      	b.n	8006940 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3758      	adds	r7, #88	; 0x58
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e04f      	b.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d04b      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fa fc55 	bl	8001210 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e04e      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d037      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b80      	cmp	r3, #128	; 0x80
 800698e:	d034      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d031      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d110      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f95b 	bl	8006c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2208      	movs	r2, #8
 80069b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e029      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d4:	d111      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f941 	bl	8006c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e00f      	b.n	8006a1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4013      	ands	r3, r2
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	bf0c      	ite	eq
 8006a0a:	2301      	moveq	r3, #1
 8006a0c:	2300      	movne	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d0a0      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b0a3      	sub	sp, #140	; 0x8c
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	88fa      	ldrh	r2, [r7, #6]
 8006a3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a56:	d10e      	bne.n	8006a76 <UART_Start_Receive_IT+0x52>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <UART_Start_Receive_IT+0x48>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a6a:	e02d      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	22ff      	movs	r2, #255	; 0xff
 8006a70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a74:	e028      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <UART_Start_Receive_IT+0x76>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <UART_Start_Receive_IT+0x6c>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	22ff      	movs	r2, #255	; 0xff
 8006a8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a8e:	e01b      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	227f      	movs	r2, #127	; 0x7f
 8006a94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a98:	e016      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa2:	d10d      	bne.n	8006ac0 <UART_Start_Receive_IT+0x9c>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <UART_Start_Receive_IT+0x92>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	227f      	movs	r2, #127	; 0x7f
 8006ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ab4:	e008      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	223f      	movs	r2, #63	; 0x3f
 8006aba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006abe:	e003      	b.n	8006ac8 <UART_Start_Receive_IT+0xa4>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2222      	movs	r2, #34	; 0x22
 8006ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3308      	adds	r3, #8
 8006af8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006afc:	673a      	str	r2, [r7, #112]	; 0x70
 8006afe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006b02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e3      	bne.n	8006ad8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b18:	d14f      	bne.n	8006bba <UART_Start_Receive_IT+0x196>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d349      	bcc.n	8006bba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2e:	d107      	bne.n	8006b40 <UART_Start_Receive_IT+0x11c>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a47      	ldr	r2, [pc, #284]	; (8006c58 <UART_Start_Receive_IT+0x234>)
 8006b3c:	675a      	str	r2, [r3, #116]	; 0x74
 8006b3e:	e002      	b.n	8006b46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a46      	ldr	r2, [pc, #280]	; (8006c5c <UART_Start_Receive_IT+0x238>)
 8006b44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d01a      	beq.n	8006b84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b56:	e853 3f00 	ldrex	r3, [r3]
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e4      	bne.n	8006b4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ba4:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ba6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e5      	bne.n	8006b84 <UART_Start_Receive_IT+0x160>
 8006bb8:	e046      	b.n	8006c48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d107      	bne.n	8006bd4 <UART_Start_Receive_IT+0x1b0>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a24      	ldr	r2, [pc, #144]	; (8006c60 <UART_Start_Receive_IT+0x23c>)
 8006bd0:	675a      	str	r2, [r3, #116]	; 0x74
 8006bd2:	e002      	b.n	8006bda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4a23      	ldr	r2, [pc, #140]	; (8006c64 <UART_Start_Receive_IT+0x240>)
 8006bd8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d019      	beq.n	8006c16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
 8006c02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_Start_Receive_IT+0x1be>
 8006c14:	e018      	b.n	8006c48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f043 0320 	orr.w	r3, r3, #32
 8006c2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	69f9      	ldr	r1, [r7, #28]
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	378c      	adds	r7, #140	; 0x8c
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	08007489 	.word	0x08007489
 8006c5c:	08007129 	.word	0x08007129
 8006c60:	08006f71 	.word	0x08006f71
 8006c64:	08006db9 	.word	0x08006db9

08006c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b095      	sub	sp, #84	; 0x54
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e6      	bne.n	8006c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	4b1e      	ldr	r3, [pc, #120]	; (8006d30 <UART_EndRxTransfer+0xc8>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e5      	bne.n	8006ca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d118      	bne.n	8006d10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6979      	ldr	r1, [r7, #20]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e6      	bne.n	8006cde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d24:	bf00      	nop
 8006d26:	3754      	adds	r7, #84	; 0x54
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	effffffe 	.word	0xeffffffe

08006d34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7fe ff2e 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d58:	bf00      	nop
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6979      	ldr	r1, [r7, #20]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	613b      	str	r3, [r7, #16]
   return(result);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e6      	bne.n	8006d68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fe fef9 	bl	8005ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dae:	bf00      	nop
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b09c      	sub	sp, #112	; 0x70
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dc6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd0:	2b22      	cmp	r3, #34	; 0x22
 8006dd2:	f040 80be 	bne.w	8006f52 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006de0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006de4:	b2d9      	uxtb	r1, r3
 8006de6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	400a      	ands	r2, r1
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f040 80a1 	bne.w	8006f62 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e6      	bne.n	8006e20 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	667b      	str	r3, [r7, #100]	; 0x64
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e72:	647a      	str	r2, [r7, #68]	; 0x44
 8006e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e5      	bne.n	8006e52 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a33      	ldr	r2, [pc, #204]	; (8006f6c <UART_RxISR_8BIT+0x1b4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d01f      	beq.n	8006ee4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d018      	beq.n	8006ee4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d12e      	bne.n	8006f4a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0310 	bic.w	r3, r3, #16
 8006f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	69b9      	ldr	r1, [r7, #24]
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d103      	bne.n	8006f3a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fe fe40 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f48:	e00b      	b.n	8006f62 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7f9 fdc2 	bl	8000ad4 <HAL_UART_RxCpltCallback>
}
 8006f50:	e007      	b.n	8006f62 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0208 	orr.w	r2, r2, #8
 8006f60:	619a      	str	r2, [r3, #24]
}
 8006f62:	bf00      	nop
 8006f64:	3770      	adds	r7, #112	; 0x70
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	58000c00 	.word	0x58000c00

08006f70 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b09c      	sub	sp, #112	; 0x70
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f88:	2b22      	cmp	r3, #34	; 0x22
 8006f8a:	f040 80be 	bne.w	800710a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006fa2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	1c9a      	adds	r2, r3, #2
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 80a1 	bne.w	800711a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fec:	667b      	str	r3, [r7, #100]	; 0x64
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ff8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e6      	bne.n	8006fd8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3308      	adds	r3, #8
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007014:	e853 3f00 	ldrex	r3, [r3]
 8007018:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	f023 0301 	bic.w	r3, r3, #1
 8007020:	663b      	str	r3, [r7, #96]	; 0x60
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3308      	adds	r3, #8
 8007028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800702a:	643a      	str	r2, [r7, #64]	; 0x40
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e5      	bne.n	800700a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a33      	ldr	r2, [pc, #204]	; (8007124 <UART_RxISR_16BIT+0x1b4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d01f      	beq.n	800709c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d018      	beq.n	800709c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	61fb      	str	r3, [r7, #28]
   return(result);
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800707e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800708a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800708e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e6      	bne.n	800706a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d12e      	bne.n	8007102 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6979      	ldr	r1, [r7, #20]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	613b      	str	r3, [r7, #16]
   return(result);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d103      	bne.n	80070f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2210      	movs	r2, #16
 80070f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fe fd64 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007100:	e00b      	b.n	800711a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7f9 fce6 	bl	8000ad4 <HAL_UART_RxCpltCallback>
}
 8007108:	e007      	b.n	800711a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0208 	orr.w	r2, r2, #8
 8007118:	619a      	str	r2, [r3, #24]
}
 800711a:	bf00      	nop
 800711c:	3770      	adds	r7, #112	; 0x70
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	58000c00 	.word	0x58000c00

08007128 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b0ac      	sub	sp, #176	; 0xb0
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007136:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800715e:	2b22      	cmp	r3, #34	; 0x22
 8007160:	f040 8180 	bne.w	8007464 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800716a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800716e:	e123      	b.n	80073b8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800717a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800717e:	b2d9      	uxtb	r1, r3
 8007180:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007184:	b2da      	uxtb	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718a:	400a      	ands	r2, r1
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d053      	beq.n	800726a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d011      	beq.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80071ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80071d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2201      	movs	r2, #1
 80071e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	f043 0201 	orr.w	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d011      	beq.n	8007222 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80071fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2202      	movs	r2, #2
 8007210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007218:	f043 0204 	orr.w	r2, r3, #4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800722e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2204      	movs	r2, #4
 8007240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007248:	f043 0202 	orr.w	r2, r3, #2
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fe fca9 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	f040 80a0 	bne.w	80073b8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800729a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800729c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80072a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80072a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e4      	bne.n	8007278 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80072be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c0:	4b6e      	ldr	r3, [pc, #440]	; (800747c <UART_RxISR_8BIT_FIFOEN+0x354>)
 80072c2:	4013      	ands	r3, r2
 80072c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3308      	adds	r3, #8
 80072ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80072d4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80072d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80072e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e3      	bne.n	80072ae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a60      	ldr	r2, [pc, #384]	; (8007480 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d021      	beq.n	8007348 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01a      	beq.n	8007348 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007322:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007334:	657b      	str	r3, [r7, #84]	; 0x54
 8007336:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800733a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800734c:	2b01      	cmp	r3, #1
 800734e:	d130      	bne.n	80073b2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	f023 0310 	bic.w	r3, r3, #16
 800736a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007378:	643b      	str	r3, [r7, #64]	; 0x40
 800737a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800737e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e4      	bne.n	8007356 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b10      	cmp	r3, #16
 8007398:	d103      	bne.n	80073a2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2210      	movs	r2, #16
 80073a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fe fc0c 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
 80073b0:	e002      	b.n	80073b8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7f9 fb8e 	bl	8000ad4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073b8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80073c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f47f aed1 	bne.w	8007170 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d049      	beq.n	8007474 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073e6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d242      	bcs.n	8007474 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007404:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e3      	bne.n	80073ee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a16      	ldr	r2, [pc, #88]	; (8007484 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800742a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	60bb      	str	r3, [r7, #8]
   return(result);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f043 0320 	orr.w	r3, r3, #32
 8007440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800744e:	61bb      	str	r3, [r7, #24]
 8007450:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	613b      	str	r3, [r7, #16]
   return(result);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e4      	bne.n	800742c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007462:	e007      	b.n	8007474 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	699a      	ldr	r2, [r3, #24]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0208 	orr.w	r2, r2, #8
 8007472:	619a      	str	r2, [r3, #24]
}
 8007474:	bf00      	nop
 8007476:	37b0      	adds	r7, #176	; 0xb0
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	effffffe 	.word	0xeffffffe
 8007480:	58000c00 	.word	0x58000c00
 8007484:	08006db9 	.word	0x08006db9

08007488 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b0ae      	sub	sp, #184	; 0xb8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007496:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074be:	2b22      	cmp	r3, #34	; 0x22
 80074c0:	f040 8184 	bne.w	80077cc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074ca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074ce:	e127      	b.n	8007720 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80074e2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80074e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80074ea:	4013      	ands	r3, r2
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f8:	1c9a      	adds	r2, r3, #2
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800751a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b00      	cmp	r3, #0
 8007524:	d053      	beq.n	80075ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d011      	beq.n	8007556 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00b      	beq.n	8007556 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2201      	movs	r2, #1
 8007544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	f043 0201 	orr.w	r2, r3, #1
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2202      	movs	r2, #2
 8007574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757c:	f043 0204 	orr.w	r2, r3, #4
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d011      	beq.n	80075b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00b      	beq.n	80075b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2204      	movs	r2, #4
 80075a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ac:	f043 0202 	orr.w	r2, r3, #2
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7fe faf7 	bl	8005bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 80a2 	bne.w	8007720 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007602:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e2      	bne.n	80075dc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007626:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007628:	4b6e      	ldr	r3, [pc, #440]	; (80077e4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800762a:	4013      	ands	r3, r2
 800762c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800763a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800763c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e3      	bne.n	8007616 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a60      	ldr	r2, [pc, #384]	; (80077e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d021      	beq.n	80076b0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01a      	beq.n	80076b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800768e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800769c:	65bb      	str	r3, [r7, #88]	; 0x58
 800769e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e4      	bne.n	800767a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d130      	bne.n	800771a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ce:	f023 0310 	bic.w	r3, r3, #16
 80076d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80076e0:	647b      	str	r3, [r7, #68]	; 0x44
 80076e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e4      	bne.n	80076be <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	f003 0310 	and.w	r3, r3, #16
 80076fe:	2b10      	cmp	r3, #16
 8007700:	d103      	bne.n	800770a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2210      	movs	r2, #16
 8007708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fe fa58 	bl	8005bc8 <HAL_UARTEx_RxEventCallback>
 8007718:	e002      	b.n	8007720 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7f9 f9da 	bl	8000ad4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007720:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007724:	2b00      	cmp	r3, #0
 8007726:	d006      	beq.n	8007736 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f aecd 	bne.w	80074d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800773c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007740:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007744:	2b00      	cmp	r3, #0
 8007746:	d049      	beq.n	80077dc <UART_RxISR_16BIT_FIFOEN+0x354>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800774e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007752:	429a      	cmp	r2, r3
 8007754:	d242      	bcs.n	80077dc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	623b      	str	r3, [r7, #32]
   return(result);
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3308      	adds	r3, #8
 8007776:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800777a:	633a      	str	r2, [r7, #48]	; 0x30
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e3      	bne.n	8007756 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a16      	ldr	r2, [pc, #88]	; (80077ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007792:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f043 0320 	orr.w	r3, r3, #32
 80077a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	69b9      	ldr	r1, [r7, #24]
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	617b      	str	r3, [r7, #20]
   return(result);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e4      	bne.n	8007794 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077ca:	e007      	b.n	80077dc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699a      	ldr	r2, [r3, #24]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0208 	orr.w	r2, r2, #8
 80077da:	619a      	str	r2, [r3, #24]
}
 80077dc:	bf00      	nop
 80077de:	37b8      	adds	r7, #184	; 0xb8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	effffffe 	.word	0xeffffffe
 80077e8:	58000c00 	.word	0x58000c00
 80077ec:	08006f71 	.word	0x08006f71

080077f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_UARTEx_DisableFifoMode+0x16>
 800783e:	2302      	movs	r3, #2
 8007840:	e027      	b.n	8007892 <HAL_UARTEx_DisableFifoMode+0x66>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2224      	movs	r2, #36	; 0x24
 800784e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0201 	bic.w	r2, r2, #1
 8007868:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2220      	movs	r2, #32
 8007884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e02d      	b.n	8007912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2224      	movs	r2, #36	; 0x24
 80078c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f850 	bl	8007998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b084      	sub	sp, #16
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800792e:	2302      	movs	r3, #2
 8007930:	e02d      	b.n	800798e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2224      	movs	r2, #36	; 0x24
 800793e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0201 	bic.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f812 	bl	8007998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d108      	bne.n	80079ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079b8:	e031      	b.n	8007a1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ba:	2310      	movs	r3, #16
 80079bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079be:	2310      	movs	r3, #16
 80079c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	0e5b      	lsrs	r3, r3, #25
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	0f5b      	lsrs	r3, r3, #29
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079e2:	7bbb      	ldrb	r3, [r7, #14]
 80079e4:	7b3a      	ldrb	r2, [r7, #12]
 80079e6:	4911      	ldr	r1, [pc, #68]	; (8007a2c <UARTEx_SetNbDataToProcess+0x94>)
 80079e8:	5c8a      	ldrb	r2, [r1, r2]
 80079ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079ee:	7b3a      	ldrb	r2, [r7, #12]
 80079f0:	490f      	ldr	r1, [pc, #60]	; (8007a30 <UARTEx_SetNbDataToProcess+0x98>)
 80079f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	7b7a      	ldrb	r2, [r7, #13]
 8007a04:	4909      	ldr	r1, [pc, #36]	; (8007a2c <UARTEx_SetNbDataToProcess+0x94>)
 8007a06:	5c8a      	ldrb	r2, [r1, r2]
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a0c:	7b7a      	ldrb	r2, [r7, #13]
 8007a0e:	4908      	ldr	r1, [pc, #32]	; (8007a30 <UARTEx_SetNbDataToProcess+0x98>)
 8007a10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a1e:	bf00      	nop
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	0800f31c 	.word	0x0800f31c
 8007a30:	0800f324 	.word	0x0800f324

08007a34 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	2101      	movs	r1, #1
 8007a42:	4822      	ldr	r0, [pc, #136]	; (8007acc <network_configure_activations+0x98>)
 8007a44:	f000 face 	bl	8007fe4 <ai_platform_get_activations_map>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d033      	beq.n	8007ab6 <network_configure_activations+0x82>
    /* Updating activations (byte) offsets */
    
    serving_default_fixed_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007a4e:	4b1f      	ldr	r3, [pc, #124]	; (8007acc <network_configure_activations+0x98>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <network_configure_activations+0x9c>)
 8007a54:	6093      	str	r3, [r2, #8]
    serving_default_fixed_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8007a56:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <network_configure_activations+0x98>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1d      	ldr	r2, [pc, #116]	; (8007ad0 <network_configure_activations+0x9c>)
 8007a5c:	60d3      	str	r3, [r2, #12]
    
    lstm_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3136);
 8007a5e:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <network_configure_activations+0x98>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8007a66:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <network_configure_activations+0xa0>)
 8007a68:	6093      	str	r3, [r2, #8]
    lstm_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 3136);
 8007a6a:	4b18      	ldr	r3, [pc, #96]	; (8007acc <network_configure_activations+0x98>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <network_configure_activations+0xa0>)
 8007a74:	60d3      	str	r3, [r2, #12]
    
    lstm_0_output0_array.data = AI_PTR(g_network_activations_map[0] + 3696);
 8007a76:	4b15      	ldr	r3, [pc, #84]	; (8007acc <network_configure_activations+0x98>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8007a7e:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <network_configure_activations+0xa4>)
 8007a80:	6093      	str	r3, [r2, #8]
    lstm_0_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 3696);
 8007a82:	4b12      	ldr	r3, [pc, #72]	; (8007acc <network_configure_activations+0x98>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8007a8a:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <network_configure_activations+0xa4>)
 8007a8c:	60d3      	str	r3, [r2, #12]
    
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <network_configure_activations+0x98>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a12      	ldr	r2, [pc, #72]	; (8007adc <network_configure_activations+0xa8>)
 8007a94:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <network_configure_activations+0x98>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a10      	ldr	r2, [pc, #64]	; (8007adc <network_configure_activations+0xa8>)
 8007a9c:	60d3      	str	r3, [r2, #12]
    
    nl_3_output_array.data = AI_PTR(g_network_activations_map[0] + 40);
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <network_configure_activations+0x98>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3328      	adds	r3, #40	; 0x28
 8007aa4:	4a0e      	ldr	r2, [pc, #56]	; (8007ae0 <network_configure_activations+0xac>)
 8007aa6:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 40);
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <network_configure_activations+0x98>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3328      	adds	r3, #40	; 0x28
 8007aae:	4a0c      	ldr	r2, [pc, #48]	; (8007ae0 <network_configure_activations+0xac>)
 8007ab0:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e005      	b.n	8007ac2 <network_configure_activations+0x8e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8007ab6:	2213      	movs	r2, #19
 8007ab8:	2130      	movs	r1, #48	; 0x30
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fc10 	bl	80082e0 <ai_platform_network_set_error>
  return false;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	24003078 	.word	0x24003078
 8007ad0:	24000070 	.word	0x24000070
 8007ad4:	24000060 	.word	0x24000060
 8007ad8:	24000080 	.word	0x24000080
 8007adc:	24000090 	.word	0x24000090
 8007ae0:	240000a0 	.word	0x240000a0

08007ae4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	2101      	movs	r1, #1
 8007af2:	4841      	ldr	r0, [pc, #260]	; (8007bf8 <network_configure_weights+0x114>)
 8007af4:	f000 fa1e 	bl	8007f34 <ai_platform_get_weights_map>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d071      	beq.n	8007be2 <network_configure_weights+0xfe>
    /* Updating weights (byte) offsets */
    
    lstm_0_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8007afe:	4b3f      	ldr	r3, [pc, #252]	; (8007bfc <network_configure_weights+0x118>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b06:	4a3d      	ldr	r2, [pc, #244]	; (8007bfc <network_configure_weights+0x118>)
 8007b08:	6013      	str	r3, [r2, #0]
    lstm_0_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8007b0a:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <network_configure_weights+0x114>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a3b      	ldr	r2, [pc, #236]	; (8007bfc <network_configure_weights+0x118>)
 8007b10:	6093      	str	r3, [r2, #8]
    lstm_0_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8007b12:	4b39      	ldr	r3, [pc, #228]	; (8007bf8 <network_configure_weights+0x114>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a39      	ldr	r2, [pc, #228]	; (8007bfc <network_configure_weights+0x118>)
 8007b18:	60d3      	str	r3, [r2, #12]
    
    lstm_0_peephole_array.format |= AI_FMT_FLAG_CONST;
 8007b1a:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <network_configure_weights+0x11c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b22:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <network_configure_weights+0x11c>)
 8007b24:	6013      	str	r3, [r2, #0]
    lstm_0_peephole_array.data = AI_PTR(g_network_weights_map[0] + 6400);
 8007b26:	4b34      	ldr	r3, [pc, #208]	; (8007bf8 <network_configure_weights+0x114>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8007b2e:	4a34      	ldr	r2, [pc, #208]	; (8007c00 <network_configure_weights+0x11c>)
 8007b30:	6093      	str	r3, [r2, #8]
    lstm_0_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 6400);
 8007b32:	4b31      	ldr	r3, [pc, #196]	; (8007bf8 <network_configure_weights+0x114>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8007b3a:	4a31      	ldr	r2, [pc, #196]	; (8007c00 <network_configure_weights+0x11c>)
 8007b3c:	60d3      	str	r3, [r2, #12]
    
    lstm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8007b3e:	4b31      	ldr	r3, [pc, #196]	; (8007c04 <network_configure_weights+0x120>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b46:	4a2f      	ldr	r2, [pc, #188]	; (8007c04 <network_configure_weights+0x120>)
 8007b48:	6013      	str	r3, [r2, #0]
    lstm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 6640);
 8007b4a:	4b2b      	ldr	r3, [pc, #172]	; (8007bf8 <network_configure_weights+0x114>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f641 13f0 	movw	r3, #6640	; 0x19f0
 8007b52:	4413      	add	r3, r2
 8007b54:	4a2b      	ldr	r2, [pc, #172]	; (8007c04 <network_configure_weights+0x120>)
 8007b56:	6093      	str	r3, [r2, #8]
    lstm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 6640);
 8007b58:	4b27      	ldr	r3, [pc, #156]	; (8007bf8 <network_configure_weights+0x114>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	f641 13f0 	movw	r3, #6640	; 0x19f0
 8007b60:	4413      	add	r3, r2
 8007b62:	4a28      	ldr	r2, [pc, #160]	; (8007c04 <network_configure_weights+0x120>)
 8007b64:	60d3      	str	r3, [r2, #12]
    
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8007b66:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <network_configure_weights+0x124>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b6e:	4a26      	ldr	r2, [pc, #152]	; (8007c08 <network_configure_weights+0x124>)
 8007b70:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 7024);
 8007b72:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <network_configure_weights+0x114>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	f641 3370 	movw	r3, #7024	; 0x1b70
 8007b7a:	4413      	add	r3, r2
 8007b7c:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <network_configure_weights+0x124>)
 8007b7e:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 6960);
 8007b80:	4b1d      	ldr	r3, [pc, #116]	; (8007bf8 <network_configure_weights+0x114>)
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	f641 3330 	movw	r3, #6960	; 0x1b30
 8007b88:	4413      	add	r3, r2
 8007b8a:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <network_configure_weights+0x124>)
 8007b8c:	60d3      	str	r3, [r2, #12]
    
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8007b8e:	4b1f      	ldr	r3, [pc, #124]	; (8007c0c <network_configure_weights+0x128>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b96:	4a1d      	ldr	r2, [pc, #116]	; (8007c0c <network_configure_weights+0x128>)
 8007b98:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 9824);
 8007b9a:	4b17      	ldr	r3, [pc, #92]	; (8007bf8 <network_configure_weights+0x114>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	f242 6360 	movw	r3, #9824	; 0x2660
 8007ba2:	4413      	add	r3, r2
 8007ba4:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <network_configure_weights+0x128>)
 8007ba6:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 9824);
 8007ba8:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <network_configure_weights+0x114>)
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	f242 6360 	movw	r3, #9824	; 0x2660
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <network_configure_weights+0x128>)
 8007bb4:	60d3      	str	r3, [r2, #12]
    
    lstm_0_kernel_array.format |= AI_FMT_FLAG_CONST;
 8007bb6:	4b16      	ldr	r3, [pc, #88]	; (8007c10 <network_configure_weights+0x12c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bbe:	4a14      	ldr	r2, [pc, #80]	; (8007c10 <network_configure_weights+0x12c>)
 8007bc0:	6013      	str	r3, [r2, #0]
    lstm_0_kernel_array.data = AI_PTR(g_network_weights_map[0] + 9864);
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <network_configure_weights+0x114>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	f242 6388 	movw	r3, #9864	; 0x2688
 8007bca:	4413      	add	r3, r2
 8007bcc:	4a10      	ldr	r2, [pc, #64]	; (8007c10 <network_configure_weights+0x12c>)
 8007bce:	6093      	str	r3, [r2, #8]
    lstm_0_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 9864);
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <network_configure_weights+0x114>)
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	f242 6388 	movw	r3, #9864	; 0x2688
 8007bd8:	4413      	add	r3, r2
 8007bda:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <network_configure_weights+0x12c>)
 8007bdc:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e005      	b.n	8007bee <network_configure_weights+0x10a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007be2:	2212      	movs	r2, #18
 8007be4:	2130      	movs	r1, #48	; 0x30
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fb7a 	bl	80082e0 <ai_platform_network_set_error>
  return false;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	2400307c 	.word	0x2400307c
 8007bfc:	24000010 	.word	0x24000010
 8007c00:	24000020 	.word	0x24000020
 8007c04:	24000030 	.word	0x24000030
 8007c08:	24000040 	.word	0x24000040
 8007c0c:	24000050 	.word	0x24000050
 8007c10:	240000b0 	.word	0x240000b0

08007c14 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa53 	bl	80080c8 <ai_platform_network_get_error>
 8007c22:	4603      	mov	r3, r0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8007c36:	2300      	movs	r3, #0
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	2305      	movs	r3, #5
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4a04      	ldr	r2, [pc, #16]	; (8007c54 <ai_network_create+0x28>)
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fe65 	bl	8008914 <ai_platform_network_create>
 8007c4a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	24000578 	.word	0x24000578

08007c58 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b096      	sub	sp, #88	; 0x58
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff ffe0 	bl	8007c2c <ai_network_create>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8007c70:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <ai_network_create_and_init+0x24>
        return err;
 8007c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7a:	e05d      	b.n	8007d38 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 f8dd 	bl	8007e40 <ai_network_data_params_get>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f083 0301 	eor.w	r3, r3, #1
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ffbc 	bl	8007c14 <ai_network_get_error>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8007ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca2:	e049      	b.n	8007d38 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d016      	beq.n	8007cd8 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	657b      	str	r3, [r7, #84]	; 0x54
 8007cae:	e00e      	b.n	8007cce <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8007cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	4413      	add	r3, r2
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 f922 	bl	8007f0c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cca:	3301      	adds	r3, #1
 8007ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8007cce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	dbeb      	blt.n	8007cb0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d016      	beq.n	8007d0c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007cde:	2300      	movs	r3, #0
 8007ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ce2:	e00e      	b.n	8007d02 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8007ce4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	f107 0314 	add.w	r3, r7, #20
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 f908 	bl	8007f0c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cfe:	3301      	adds	r3, #1
 8007d00:	653b      	str	r3, [r7, #80]	; 0x50
 8007d02:	8b7b      	ldrh	r3, [r7, #26]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	dbeb      	blt.n	8007ce4 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f107 0214 	add.w	r2, r7, #20
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 f846 	bl	8007da8 <ai_network_init>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f083 0301 	eor.w	r3, r3, #1
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d006      	beq.n	8007d36 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff ff71 	bl	8007c14 <ai_network_get_error>
 8007d32:	4603      	mov	r3, r0
 8007d34:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8007d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3758      	adds	r7, #88	; 0x58
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007d50:	4b06      	ldr	r3, [pc, #24]	; (8007d6c <ai_network_inputs_get+0x2c>)
 8007d52:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a06      	ldr	r2, [pc, #24]	; (8007d70 <ai_network_inputs_get+0x30>)
 8007d58:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fac5 	bl	80082ec <ai_platform_inputs_get>
 8007d62:	4603      	mov	r3, r0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	24000578 	.word	0x24000578
 8007d70:	a1c00100 	.word	0xa1c00100

08007d74 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <ai_network_outputs_get+0x2c>)
 8007d86:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a06      	ldr	r2, [pc, #24]	; (8007da4 <ai_network_outputs_get+0x30>)
 8007d8c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc37 	bl	8008604 <ai_platform_outputs_get>
 8007d96:	4603      	mov	r3, r0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	24000578 	.word	0x24000578
 8007da4:	a1c00100 	.word	0xa1c00100

08007da8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 ff87 	bl	8008cc8 <ai_platform_network_init>
 8007dba:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <ai_network_init+0x1e>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	e028      	b.n	8007e18 <ai_network_init+0x70>

  ai_bool ok = true;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fe89 	bl	8007ae4 <network_configure_weights>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff fe24 	bl	8007a34 <network_configure_activations>
 8007dec:	4603      	mov	r3, r0
 8007dee:	461a      	mov	r2, r3
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	4013      	ands	r3, r2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf14      	ite	ne
 8007df8:	2301      	movne	r3, #1
 8007dfa:	2300      	moveq	r3, #0
 8007dfc:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f001 f8fe 	bl	8009000 <ai_platform_network_post_init>
 8007e04:	4603      	mov	r3, r0
 8007e06:	461a      	mov	r2, r3
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bf14      	ite	ne
 8007e10:	2301      	movne	r3, #1
 8007e12:	2300      	moveq	r3, #0
 8007e14:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007e16:	7afb      	ldrb	r3, [r7, #11]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f001 fa0f 	bl	8009254 <ai_platform_network_process>
 8007e36:	4603      	mov	r3, r0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <ai_network_data_params_get+0x12>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e016      	b.n	8007e80 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8007e52:	4a0d      	ldr	r2, [pc, #52]	; (8007e88 <ai_network_data_params_get+0x48>)
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e5c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007e60:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <ai_network_data_params_get+0x4c>)
 8007e62:	f107 0308 	add.w	r3, r7, #8
 8007e66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007e6a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8007e6e:	f107 0210 	add.w	r2, r7, #16
 8007e72:	f107 0308 	add.w	r3, r7, #8
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f90b 	bl	8008094 <ai_platform_bind_network_params>
 8007e7e:	4603      	mov	r3, r0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	0800f2e4 	.word	0x0800f2e4
 8007e8c:	0800f2ec 	.word	0x0800f2ec

08007e90 <ai_buffer_get_size>:
 8007e90:	b368      	cbz	r0, 8007eee <ai_buffer_get_size+0x5e>
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <ai_buffer_get_size+0x60>)
 8007e94:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <ai_buffer_get_size+0x64>)
 8007e96:	b410      	push	{r4}
 8007e98:	6804      	ldr	r4, [r0, #0]
 8007e9a:	4023      	ands	r3, r4
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d123      	bne.n	8007ee8 <ai_buffer_get_size+0x58>
 8007ea0:	b311      	cbz	r1, 8007ee8 <ai_buffer_get_size+0x58>
 8007ea2:	6984      	ldr	r4, [r0, #24]
 8007ea4:	6862      	ldr	r2, [r4, #4]
 8007ea6:	321f      	adds	r2, #31
 8007ea8:	f022 021f 	bic.w	r2, r2, #31
 8007eac:	7d03      	ldrb	r3, [r0, #20]
 8007eae:	6941      	ldr	r1, [r0, #20]
 8007eb0:	f1a3 0301 	sub.w	r3, r3, #1
 8007eb4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8007eb8:	fab3 f383 	clz	r3, r3
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8007ec2:	da0c      	bge.n	8007ede <ai_buffer_get_size+0x4e>
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d103      	bne.n	8007ed0 <ai_buffer_get_size+0x40>
 8007ec8:	2802      	cmp	r0, #2
 8007eca:	f04f 0302 	mov.w	r3, #2
 8007ece:	d006      	beq.n	8007ede <ai_buffer_get_size+0x4e>
 8007ed0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	4298      	cmp	r0, r3
 8007ed8:	fb01 f202 	mul.w	r2, r1, r2
 8007edc:	d1f2      	bne.n	8007ec4 <ai_buffer_get_size+0x34>
 8007ede:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8007ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	6984      	ldr	r4, [r0, #24]
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	e7de      	b.n	8007eac <ai_buffer_get_size+0x1c>
 8007eee:	4770      	bx	lr
 8007ef0:	017fffff 	.word	0x017fffff
 8007ef4:	000400c0 	.word	0x000400c0

08007ef8 <ai_buffer_array_sane>:
 8007ef8:	b138      	cbz	r0, 8007f0a <ai_buffer_array_sane+0x12>
 8007efa:	6843      	ldr	r3, [r0, #4]
 8007efc:	b123      	cbz	r3, 8007f08 <ai_buffer_array_sane+0x10>
 8007efe:	8840      	ldrh	r0, [r0, #2]
 8007f00:	3800      	subs	r0, #0
 8007f02:	bf18      	it	ne
 8007f04:	2001      	movne	r0, #1
 8007f06:	4770      	bx	lr
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4770      	bx	lr

08007f0c <ai_buffer_array_item_set_address>:
 8007f0c:	b150      	cbz	r0, 8007f24 <ai_buffer_array_item_set_address+0x18>
 8007f0e:	6843      	ldr	r3, [r0, #4]
 8007f10:	b14b      	cbz	r3, 8007f26 <ai_buffer_array_item_set_address+0x1a>
 8007f12:	8840      	ldrh	r0, [r0, #2]
 8007f14:	b900      	cbnz	r0, 8007f18 <ai_buffer_array_item_set_address+0xc>
 8007f16:	4770      	bx	lr
 8007f18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007f1c:	2001      	movs	r0, #1
 8007f1e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007f22:	604a      	str	r2, [r1, #4]
 8007f24:	4770      	bx	lr
 8007f26:	4618      	mov	r0, r3
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop

08007f2c <_ai_platform_acquire_crc>:
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	4770      	bx	lr

08007f30 <_ai_platform_release_crc>:
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop

08007f34 <ai_platform_get_weights_map>:
 8007f34:	2900      	cmp	r1, #0
 8007f36:	bf18      	it	ne
 8007f38:	2800      	cmpne	r0, #0
 8007f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3c:	bf0c      	ite	eq
 8007f3e:	2401      	moveq	r4, #1
 8007f40:	2400      	movne	r4, #0
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	bf08      	it	eq
 8007f46:	f044 0401 	orreq.w	r4, r4, #1
 8007f4a:	b114      	cbz	r4, 8007f52 <ai_platform_get_weights_map+0x1e>
 8007f4c:	2400      	movs	r4, #0
 8007f4e:	4620      	mov	r0, r4
 8007f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f52:	4616      	mov	r6, r2
 8007f54:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <ai_platform_get_weights_map+0xac>)
 8007f56:	6812      	ldr	r2, [r2, #0]
 8007f58:	4605      	mov	r5, r0
 8007f5a:	460f      	mov	r7, r1
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d022      	beq.n	8007fa6 <ai_platform_get_weights_map+0x72>
 8007f60:	6870      	ldr	r0, [r6, #4]
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0f2      	beq.n	8007f4c <ai_platform_get_weights_map+0x18>
 8007f66:	6806      	ldr	r6, [r0, #0]
 8007f68:	429e      	cmp	r6, r3
 8007f6a:	d006      	beq.n	8007f7a <ai_platform_get_weights_map+0x46>
 8007f6c:	f1a1 0401 	sub.w	r4, r1, #1
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	fab4 f484 	clz	r4, r4
 8007f76:	0964      	lsrs	r4, r4, #5
 8007f78:	e7e9      	b.n	8007f4e <ai_platform_get_weights_map+0x1a>
 8007f7a:	3d04      	subs	r5, #4
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4621      	mov	r1, r4
 8007f80:	e000      	b.n	8007f84 <ai_platform_get_weights_map+0x50>
 8007f82:	4619      	mov	r1, r3
 8007f84:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007f88:	42b3      	cmp	r3, r6
 8007f8a:	d025      	beq.n	8007fd8 <ai_platform_get_weights_map+0xa4>
 8007f8c:	f845 3f04 	str.w	r3, [r5, #4]!
 8007f90:	1c4b      	adds	r3, r1, #1
 8007f92:	429f      	cmp	r7, r3
 8007f94:	d8f5      	bhi.n	8007f82 <ai_platform_get_weights_map+0x4e>
 8007f96:	d1da      	bne.n	8007f4e <ai_platform_get_weights_map+0x1a>
 8007f98:	3102      	adds	r1, #2
 8007f9a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8007f9e:	42b3      	cmp	r3, r6
 8007fa0:	d1d5      	bne.n	8007f4e <ai_platform_get_weights_map+0x1a>
 8007fa2:	2401      	movs	r4, #1
 8007fa4:	e7d3      	b.n	8007f4e <ai_platform_get_weights_map+0x1a>
 8007fa6:	1d30      	adds	r0, r6, #4
 8007fa8:	f7ff ffa6 	bl	8007ef8 <ai_buffer_array_sane>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d0cd      	beq.n	8007f4c <ai_platform_get_weights_map+0x18>
 8007fb0:	88f3      	ldrh	r3, [r6, #6]
 8007fb2:	429f      	cmp	r7, r3
 8007fb4:	d1ca      	bne.n	8007f4c <ai_platform_get_weights_map+0x18>
 8007fb6:	3d04      	subs	r5, #4
 8007fb8:	4622      	mov	r2, r4
 8007fba:	68b3      	ldr	r3, [r6, #8]
 8007fbc:	4423      	add	r3, r4
 8007fbe:	341c      	adds	r4, #28
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b123      	cbz	r3, 8007fce <ai_platform_get_weights_map+0x9a>
 8007fc4:	3201      	adds	r2, #1
 8007fc6:	f845 3f04 	str.w	r3, [r5, #4]!
 8007fca:	4297      	cmp	r7, r2
 8007fcc:	d8f5      	bhi.n	8007fba <ai_platform_get_weights_map+0x86>
 8007fce:	1abc      	subs	r4, r7, r2
 8007fd0:	fab4 f484 	clz	r4, r4
 8007fd4:	0964      	lsrs	r4, r4, #5
 8007fd6:	e7ba      	b.n	8007f4e <ai_platform_get_weights_map+0x1a>
 8007fd8:	428f      	cmp	r7, r1
 8007fda:	d1b8      	bne.n	8007f4e <ai_platform_get_weights_map+0x1a>
 8007fdc:	e7e1      	b.n	8007fa2 <ai_platform_get_weights_map+0x6e>
 8007fde:	bf00      	nop
 8007fe0:	a1facade 	.word	0xa1facade

08007fe4 <ai_platform_get_activations_map>:
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	bf18      	it	ne
 8007fe8:	2800      	cmpne	r0, #0
 8007fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fec:	bf0c      	ite	eq
 8007fee:	2401      	moveq	r4, #1
 8007ff0:	2400      	movne	r4, #0
 8007ff2:	2a00      	cmp	r2, #0
 8007ff4:	bf08      	it	eq
 8007ff6:	f044 0401 	orreq.w	r4, r4, #1
 8007ffa:	b114      	cbz	r4, 8008002 <ai_platform_get_activations_map+0x1e>
 8007ffc:	2400      	movs	r4, #0
 8007ffe:	4620      	mov	r0, r4
 8008000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008002:	4616      	mov	r6, r2
 8008004:	4b22      	ldr	r3, [pc, #136]	; (8008090 <ai_platform_get_activations_map+0xac>)
 8008006:	6812      	ldr	r2, [r2, #0]
 8008008:	4605      	mov	r5, r0
 800800a:	460f      	mov	r7, r1
 800800c:	429a      	cmp	r2, r3
 800800e:	d022      	beq.n	8008056 <ai_platform_get_activations_map+0x72>
 8008010:	6a30      	ldr	r0, [r6, #32]
 8008012:	2800      	cmp	r0, #0
 8008014:	d0f2      	beq.n	8007ffc <ai_platform_get_activations_map+0x18>
 8008016:	6806      	ldr	r6, [r0, #0]
 8008018:	429e      	cmp	r6, r3
 800801a:	d006      	beq.n	800802a <ai_platform_get_activations_map+0x46>
 800801c:	f1a1 0401 	sub.w	r4, r1, #1
 8008020:	6028      	str	r0, [r5, #0]
 8008022:	fab4 f484 	clz	r4, r4
 8008026:	0964      	lsrs	r4, r4, #5
 8008028:	e7e9      	b.n	8007ffe <ai_platform_get_activations_map+0x1a>
 800802a:	3d04      	subs	r5, #4
 800802c:	4602      	mov	r2, r0
 800802e:	4621      	mov	r1, r4
 8008030:	e000      	b.n	8008034 <ai_platform_get_activations_map+0x50>
 8008032:	4619      	mov	r1, r3
 8008034:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8008038:	42b3      	cmp	r3, r6
 800803a:	d026      	beq.n	800808a <ai_platform_get_activations_map+0xa6>
 800803c:	f845 3f04 	str.w	r3, [r5, #4]!
 8008040:	1c4b      	adds	r3, r1, #1
 8008042:	429f      	cmp	r7, r3
 8008044:	d8f5      	bhi.n	8008032 <ai_platform_get_activations_map+0x4e>
 8008046:	d1da      	bne.n	8007ffe <ai_platform_get_activations_map+0x1a>
 8008048:	3102      	adds	r1, #2
 800804a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800804e:	42b3      	cmp	r3, r6
 8008050:	d1d5      	bne.n	8007ffe <ai_platform_get_activations_map+0x1a>
 8008052:	2401      	movs	r4, #1
 8008054:	e7d3      	b.n	8007ffe <ai_platform_get_activations_map+0x1a>
 8008056:	f106 000c 	add.w	r0, r6, #12
 800805a:	f7ff ff4d 	bl	8007ef8 <ai_buffer_array_sane>
 800805e:	2800      	cmp	r0, #0
 8008060:	d0cc      	beq.n	8007ffc <ai_platform_get_activations_map+0x18>
 8008062:	89f3      	ldrh	r3, [r6, #14]
 8008064:	429f      	cmp	r7, r3
 8008066:	d1c9      	bne.n	8007ffc <ai_platform_get_activations_map+0x18>
 8008068:	3d04      	subs	r5, #4
 800806a:	4622      	mov	r2, r4
 800806c:	6933      	ldr	r3, [r6, #16]
 800806e:	4423      	add	r3, r4
 8008070:	341c      	adds	r4, #28
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	b123      	cbz	r3, 8008080 <ai_platform_get_activations_map+0x9c>
 8008076:	3201      	adds	r2, #1
 8008078:	f845 3f04 	str.w	r3, [r5, #4]!
 800807c:	4297      	cmp	r7, r2
 800807e:	d8f5      	bhi.n	800806c <ai_platform_get_activations_map+0x88>
 8008080:	1abc      	subs	r4, r7, r2
 8008082:	fab4 f484 	clz	r4, r4
 8008086:	0964      	lsrs	r4, r4, #5
 8008088:	e7b9      	b.n	8007ffe <ai_platform_get_activations_map+0x1a>
 800808a:	428f      	cmp	r7, r1
 800808c:	d1b7      	bne.n	8007ffe <ai_platform_get_activations_map+0x1a>
 800808e:	e7e0      	b.n	8008052 <ai_platform_get_activations_map+0x6e>
 8008090:	a1facade 	.word	0xa1facade

08008094 <ai_platform_bind_network_params>:
 8008094:	2a00      	cmp	r2, #0
 8008096:	bf18      	it	ne
 8008098:	2900      	cmpne	r1, #0
 800809a:	d010      	beq.n	80080be <ai_platform_bind_network_params+0x2a>
 800809c:	b178      	cbz	r0, 80080be <ai_platform_bind_network_params+0x2a>
 800809e:	4603      	mov	r3, r0
 80080a0:	4808      	ldr	r0, [pc, #32]	; (80080c4 <ai_platform_bind_network_params+0x30>)
 80080a2:	f103 0c0c 	add.w	ip, r3, #12
 80080a6:	f843 0b04 	str.w	r0, [r3], #4
 80080aa:	c903      	ldmia	r1, {r0, r1}
 80080ac:	e883 0003 	stmia.w	r3, {r0, r1}
 80080b0:	2301      	movs	r3, #1
 80080b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80080b6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80080ba:	4618      	mov	r0, r3
 80080bc:	4770      	bx	lr
 80080be:	2300      	movs	r3, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	4770      	bx	lr
 80080c4:	a1facade 	.word	0xa1facade

080080c8 <ai_platform_network_get_error>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d03f      	beq.n	800814e <ai_platform_network_get_error+0x86>
 80080ce:	4b7d      	ldr	r3, [pc, #500]	; (80082c4 <ai_platform_network_get_error+0x1fc>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	6802      	ldr	r2, [r0, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d13a      	bne.n	800814e <ai_platform_network_get_error+0x86>
 80080d8:	f7ff ff28 	bl	8007f2c <_ai_platform_acquire_crc>
 80080dc:	4b7a      	ldr	r3, [pc, #488]	; (80082c8 <ai_platform_network_get_error+0x200>)
 80080de:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e8:	189a      	adds	r2, r3, r2
 80080ea:	2a01      	cmp	r2, #1
 80080ec:	f240 8086 	bls.w	80081fc <ai_platform_network_get_error+0x134>
 80080f0:	f240 4249 	movw	r2, #1097	; 0x449
 80080f4:	4293      	cmp	r3, r2
 80080f6:	f000 8081 	beq.w	80081fc <ai_platform_network_get_error+0x134>
 80080fa:	4a74      	ldr	r2, [pc, #464]	; (80082cc <ai_platform_network_get_error+0x204>)
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008102:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008106:	f000 8087 	beq.w	8008218 <ai_platform_network_get_error+0x150>
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	f240 4183 	movw	r1, #1155	; 0x483
 8008110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008114:	428b      	cmp	r3, r1
 8008116:	f000 80a9 	beq.w	800826c <ai_platform_network_get_error+0x1a4>
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008120:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008124:	f000 80c0 	beq.w	80082a8 <ai_platform_network_get_error+0x1e0>
 8008128:	6813      	ldr	r3, [r2, #0]
 800812a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 8082 	bne.w	8008238 <ai_platform_network_get_error+0x170>
 8008134:	4a66      	ldr	r2, [pc, #408]	; (80082d0 <ai_platform_network_get_error+0x208>)
 8008136:	2301      	movs	r3, #1
 8008138:	6093      	str	r3, [r2, #8]
 800813a:	6893      	ldr	r3, [r2, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1fc      	bne.n	800813a <ai_platform_network_get_error+0x72>
 8008140:	4964      	ldr	r1, [pc, #400]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 8008142:	4b65      	ldr	r3, [pc, #404]	; (80082d8 <ai_platform_network_get_error+0x210>)
 8008144:	6011      	str	r1, [r2, #0]
 8008146:	6812      	ldr	r2, [r2, #0]
 8008148:	429a      	cmp	r2, r3
 800814a:	d075      	beq.n	8008238 <ai_platform_network_get_error+0x170>
 800814c:	e7fe      	b.n	800814c <ai_platform_network_get_error+0x84>
 800814e:	f7ff feed 	bl	8007f2c <_ai_platform_acquire_crc>
 8008152:	4b5d      	ldr	r3, [pc, #372]	; (80082c8 <ai_platform_network_get_error+0x200>)
 8008154:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800815e:	185a      	adds	r2, r3, r1
 8008160:	2a01      	cmp	r2, #1
 8008162:	d929      	bls.n	80081b8 <ai_platform_network_get_error+0xf0>
 8008164:	f240 4249 	movw	r2, #1097	; 0x449
 8008168:	4293      	cmp	r3, r2
 800816a:	d025      	beq.n	80081b8 <ai_platform_network_get_error+0xf0>
 800816c:	4a57      	ldr	r2, [pc, #348]	; (80082cc <ai_platform_network_get_error+0x204>)
 800816e:	6813      	ldr	r3, [r2, #0]
 8008170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008174:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008178:	d02b      	beq.n	80081d2 <ai_platform_network_get_error+0x10a>
 800817a:	6813      	ldr	r3, [r2, #0]
 800817c:	f240 4183 	movw	r1, #1155	; 0x483
 8008180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008184:	428b      	cmp	r3, r1
 8008186:	d060      	beq.n	800824a <ai_platform_network_get_error+0x182>
 8008188:	6813      	ldr	r3, [r2, #0]
 800818a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800818e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008192:	d07c      	beq.n	800828e <ai_platform_network_get_error+0x1c6>
 8008194:	6813      	ldr	r3, [r2, #0]
 8008196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800819a:	2b00      	cmp	r3, #0
 800819c:	d129      	bne.n	80081f2 <ai_platform_network_get_error+0x12a>
 800819e:	4a4c      	ldr	r2, [pc, #304]	; (80082d0 <ai_platform_network_get_error+0x208>)
 80081a0:	2301      	movs	r3, #1
 80081a2:	6093      	str	r3, [r2, #8]
 80081a4:	6893      	ldr	r3, [r2, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1fc      	bne.n	80081a4 <ai_platform_network_get_error+0xdc>
 80081aa:	494a      	ldr	r1, [pc, #296]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 80081ac:	4b4a      	ldr	r3, [pc, #296]	; (80082d8 <ai_platform_network_get_error+0x210>)
 80081ae:	6011      	str	r1, [r2, #0]
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d01d      	beq.n	80081f2 <ai_platform_network_get_error+0x12a>
 80081b6:	e7fe      	b.n	80081b6 <ai_platform_network_get_error+0xee>
 80081b8:	4a45      	ldr	r2, [pc, #276]	; (80082d0 <ai_platform_network_get_error+0x208>)
 80081ba:	2301      	movs	r3, #1
 80081bc:	6093      	str	r3, [r2, #8]
 80081be:	6893      	ldr	r3, [r2, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1fc      	bne.n	80081be <ai_platform_network_get_error+0xf6>
 80081c4:	4943      	ldr	r1, [pc, #268]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 80081c6:	4b44      	ldr	r3, [pc, #272]	; (80082d8 <ai_platform_network_get_error+0x210>)
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d010      	beq.n	80081f2 <ai_platform_network_get_error+0x12a>
 80081d0:	e7fe      	b.n	80081d0 <ai_platform_network_get_error+0x108>
 80081d2:	4a42      	ldr	r2, [pc, #264]	; (80082dc <ai_platform_network_get_error+0x214>)
 80081d4:	2301      	movs	r3, #1
 80081d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80081da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1fb      	bne.n	80081da <ai_platform_network_get_error+0x112>
 80081e2:	493c      	ldr	r1, [pc, #240]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 80081e4:	4b3c      	ldr	r3, [pc, #240]	; (80082d8 <ai_platform_network_get_error+0x210>)
 80081e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80081ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d111      	bne.n	8008216 <ai_platform_network_get_error+0x14e>
 80081f2:	f7ff fe9d 	bl	8007f30 <_ai_platform_release_crc>
 80081f6:	f241 0010 	movw	r0, #4112	; 0x1010
 80081fa:	bd10      	pop	{r4, pc}
 80081fc:	4a34      	ldr	r2, [pc, #208]	; (80082d0 <ai_platform_network_get_error+0x208>)
 80081fe:	2301      	movs	r3, #1
 8008200:	6093      	str	r3, [r2, #8]
 8008202:	6893      	ldr	r3, [r2, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1fc      	bne.n	8008202 <ai_platform_network_get_error+0x13a>
 8008208:	4932      	ldr	r1, [pc, #200]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 800820a:	4b33      	ldr	r3, [pc, #204]	; (80082d8 <ai_platform_network_get_error+0x210>)
 800820c:	6011      	str	r1, [r2, #0]
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d011      	beq.n	8008238 <ai_platform_network_get_error+0x170>
 8008214:	e7fe      	b.n	8008214 <ai_platform_network_get_error+0x14c>
 8008216:	e7fe      	b.n	8008216 <ai_platform_network_get_error+0x14e>
 8008218:	4a30      	ldr	r2, [pc, #192]	; (80082dc <ai_platform_network_get_error+0x214>)
 800821a:	2301      	movs	r3, #1
 800821c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008220:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1fb      	bne.n	8008220 <ai_platform_network_get_error+0x158>
 8008228:	492a      	ldr	r1, [pc, #168]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 800822a:	4b2b      	ldr	r3, [pc, #172]	; (80082d8 <ai_platform_network_get_error+0x210>)
 800822c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008230:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008234:	429a      	cmp	r2, r3
 8008236:	d107      	bne.n	8008248 <ai_platform_network_get_error+0x180>
 8008238:	f7ff fe7a 	bl	8007f30 <_ai_platform_release_crc>
 800823c:	f104 0010 	add.w	r0, r4, #16
 8008240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008244:	f001 bae4 	b.w	8009810 <core_get_error>
 8008248:	e7fe      	b.n	8008248 <ai_platform_network_get_error+0x180>
 800824a:	4a24      	ldr	r2, [pc, #144]	; (80082dc <ai_platform_network_get_error+0x214>)
 800824c:	2301      	movs	r3, #1
 800824e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008252:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1fb      	bne.n	8008252 <ai_platform_network_get_error+0x18a>
 800825a:	491e      	ldr	r1, [pc, #120]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 800825c:	4b1e      	ldr	r3, [pc, #120]	; (80082d8 <ai_platform_network_get_error+0x210>)
 800825e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008262:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008266:	429a      	cmp	r2, r3
 8008268:	d0c3      	beq.n	80081f2 <ai_platform_network_get_error+0x12a>
 800826a:	e7fe      	b.n	800826a <ai_platform_network_get_error+0x1a2>
 800826c:	4a1b      	ldr	r2, [pc, #108]	; (80082dc <ai_platform_network_get_error+0x214>)
 800826e:	2301      	movs	r3, #1
 8008270:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008274:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1fb      	bne.n	8008274 <ai_platform_network_get_error+0x1ac>
 800827c:	4915      	ldr	r1, [pc, #84]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 800827e:	4b16      	ldr	r3, [pc, #88]	; (80082d8 <ai_platform_network_get_error+0x210>)
 8008280:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008284:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008288:	429a      	cmp	r2, r3
 800828a:	d0d5      	beq.n	8008238 <ai_platform_network_get_error+0x170>
 800828c:	e7fe      	b.n	800828c <ai_platform_network_get_error+0x1c4>
 800828e:	4a10      	ldr	r2, [pc, #64]	; (80082d0 <ai_platform_network_get_error+0x208>)
 8008290:	2301      	movs	r3, #1
 8008292:	6093      	str	r3, [r2, #8]
 8008294:	6893      	ldr	r3, [r2, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1fc      	bne.n	8008294 <ai_platform_network_get_error+0x1cc>
 800829a:	490e      	ldr	r1, [pc, #56]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <ai_platform_network_get_error+0x210>)
 800829e:	6011      	str	r1, [r2, #0]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d0a5      	beq.n	80081f2 <ai_platform_network_get_error+0x12a>
 80082a6:	e7fe      	b.n	80082a6 <ai_platform_network_get_error+0x1de>
 80082a8:	4a09      	ldr	r2, [pc, #36]	; (80082d0 <ai_platform_network_get_error+0x208>)
 80082aa:	2301      	movs	r3, #1
 80082ac:	6093      	str	r3, [r2, #8]
 80082ae:	6893      	ldr	r3, [r2, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1fc      	bne.n	80082ae <ai_platform_network_get_error+0x1e6>
 80082b4:	4907      	ldr	r1, [pc, #28]	; (80082d4 <ai_platform_network_get_error+0x20c>)
 80082b6:	4b08      	ldr	r3, [pc, #32]	; (80082d8 <ai_platform_network_get_error+0x210>)
 80082b8:	6011      	str	r1, [r2, #0]
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d0bb      	beq.n	8008238 <ai_platform_network_get_error+0x170>
 80082c0:	e7fe      	b.n	80082c0 <ai_platform_network_get_error+0x1f8>
 80082c2:	bf00      	nop
 80082c4:	a1c00100 	.word	0xa1c00100
 80082c8:	e0042000 	.word	0xe0042000
 80082cc:	5c001000 	.word	0x5c001000
 80082d0:	40023000 	.word	0x40023000
 80082d4:	f407a5c2 	.word	0xf407a5c2
 80082d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80082dc:	58024000 	.word	0x58024000

080082e0 <ai_platform_network_set_error>:
 80082e0:	b110      	cbz	r0, 80082e8 <ai_platform_network_set_error+0x8>
 80082e2:	3010      	adds	r0, #16
 80082e4:	f001 ba9a 	b.w	800981c <core_set_error>
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop

080082ec <ai_platform_inputs_get>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	b085      	sub	sp, #20
 80082f2:	9102      	str	r1, [sp, #8]
 80082f4:	2800      	cmp	r0, #0
 80082f6:	f000 8093 	beq.w	8008420 <ai_platform_inputs_get+0x134>
 80082fa:	4baa      	ldr	r3, [pc, #680]	; (80085a4 <ai_platform_inputs_get+0x2b8>)
 80082fc:	4681      	mov	r9, r0
 80082fe:	6802      	ldr	r2, [r0, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	f040 808d 	bne.w	8008420 <ai_platform_inputs_get+0x134>
 8008306:	f7ff fe11 	bl	8007f2c <_ai_platform_acquire_crc>
 800830a:	4ba7      	ldr	r3, [pc, #668]	; (80085a8 <ai_platform_inputs_get+0x2bc>)
 800830c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008316:	189a      	adds	r2, r3, r2
 8008318:	2a01      	cmp	r2, #1
 800831a:	f240 80da 	bls.w	80084d2 <ai_platform_inputs_get+0x1e6>
 800831e:	f240 4249 	movw	r2, #1097	; 0x449
 8008322:	4293      	cmp	r3, r2
 8008324:	f000 80d5 	beq.w	80084d2 <ai_platform_inputs_get+0x1e6>
 8008328:	4aa0      	ldr	r2, [pc, #640]	; (80085ac <ai_platform_inputs_get+0x2c0>)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008330:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008334:	f000 80dc 	beq.w	80084f0 <ai_platform_inputs_get+0x204>
 8008338:	6813      	ldr	r3, [r2, #0]
 800833a:	f240 4183 	movw	r1, #1155	; 0x483
 800833e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008342:	428b      	cmp	r3, r1
 8008344:	f000 810e 	beq.w	8008564 <ai_platform_inputs_get+0x278>
 8008348:	6813      	ldr	r3, [r2, #0]
 800834a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800834e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008352:	f000 8143 	beq.w	80085dc <ai_platform_inputs_get+0x2f0>
 8008356:	6813      	ldr	r3, [r2, #0]
 8008358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8113 	beq.w	8008588 <ai_platform_inputs_get+0x29c>
 8008362:	f7ff fde5 	bl	8007f30 <_ai_platform_release_crc>
 8008366:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 80d2 	beq.w	8008514 <ai_platform_inputs_get+0x228>
 8008370:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8008374:	f1ba 0f00 	cmp.w	sl, #0
 8008378:	f000 80cc 	beq.w	8008514 <ai_platform_inputs_get+0x228>
 800837c:	2100      	movs	r1, #0
 800837e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008382:	460d      	mov	r5, r1
 8008384:	4689      	mov	r9, r1
 8008386:	e016      	b.n	80083b6 <ai_platform_inputs_get+0xca>
 8008388:	9a01      	ldr	r2, [sp, #4]
 800838a:	2301      	movs	r3, #1
 800838c:	f848 3002 	str.w	r3, [r8, r2]
 8008390:	69b2      	ldr	r2, [r6, #24]
 8008392:	f04f 0301 	mov.w	r3, #1
 8008396:	6856      	ldr	r6, [r2, #4]
 8008398:	3501      	adds	r5, #1
 800839a:	f109 091c 	add.w	r9, r9, #28
 800839e:	7523      	strb	r3, [r4, #20]
 80083a0:	2300      	movs	r3, #0
 80083a2:	6962      	ldr	r2, [r4, #20]
 80083a4:	60a7      	str	r7, [r4, #8]
 80083a6:	f36b 221f 	bfi	r2, fp, #8, #24
 80083aa:	6126      	str	r6, [r4, #16]
 80083ac:	61a1      	str	r1, [r4, #24]
 80083ae:	60e3      	str	r3, [r4, #12]
 80083b0:	6162      	str	r2, [r4, #20]
 80083b2:	e9c4 0c00 	strd	r0, ip, [r4]
 80083b6:	f8ba 3000 	ldrh.w	r3, [sl]
 80083ba:	b2ac      	uxth	r4, r5
 80083bc:	42ab      	cmp	r3, r5
 80083be:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	f240 80b5 	bls.w	8008532 <ai_platform_inputs_get+0x246>
 80083c8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80b0 	beq.w	8008532 <ai_platform_inputs_get+0x246>
 80083d2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	f000 80ab 	beq.w	8008532 <ai_platform_inputs_get+0x246>
 80083dc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80083e0:	69b2      	ldr	r2, [r6, #24]
 80083e2:	68f1      	ldr	r1, [r6, #12]
 80083e4:	6810      	ldr	r0, [r2, #0]
 80083e6:	9100      	str	r1, [sp, #0]
 80083e8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80083ec:	68b3      	ldr	r3, [r6, #8]
 80083ee:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80083f2:	444c      	add	r4, r9
 80083f4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80083f8:	f003 fdfc 	bl	800bff4 <ai_array_to_buffer_fmt>
 80083fc:	69b2      	ldr	r2, [r6, #24]
 80083fe:	9900      	ldr	r1, [sp, #0]
 8008400:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8008404:	2f00      	cmp	r7, #0
 8008406:	d0c4      	beq.n	8008392 <ai_platform_inputs_get+0xa6>
 8008408:	2200      	movs	r2, #0
 800840a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800840e:	6832      	ldr	r2, [r6, #0]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	b112      	cbz	r2, 800841a <ai_platform_inputs_get+0x12e>
 8008414:	8852      	ldrh	r2, [r2, #2]
 8008416:	2a00      	cmp	r2, #0
 8008418:	d1b6      	bne.n	8008388 <ai_platform_inputs_get+0x9c>
 800841a:	69b2      	ldr	r2, [r6, #24]
 800841c:	2700      	movs	r7, #0
 800841e:	e7b8      	b.n	8008392 <ai_platform_inputs_get+0xa6>
 8008420:	f7ff fd84 	bl	8007f2c <_ai_platform_acquire_crc>
 8008424:	4b60      	ldr	r3, [pc, #384]	; (80085a8 <ai_platform_inputs_get+0x2bc>)
 8008426:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008430:	185a      	adds	r2, r3, r1
 8008432:	2a01      	cmp	r2, #1
 8008434:	d92a      	bls.n	800848c <ai_platform_inputs_get+0x1a0>
 8008436:	f240 4249 	movw	r2, #1097	; 0x449
 800843a:	4293      	cmp	r3, r2
 800843c:	d026      	beq.n	800848c <ai_platform_inputs_get+0x1a0>
 800843e:	4a5b      	ldr	r2, [pc, #364]	; (80085ac <ai_platform_inputs_get+0x2c0>)
 8008440:	6813      	ldr	r3, [r2, #0]
 8008442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008446:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800844a:	d02c      	beq.n	80084a6 <ai_platform_inputs_get+0x1ba>
 800844c:	6813      	ldr	r3, [r2, #0]
 800844e:	f240 4183 	movw	r1, #1155	; 0x483
 8008452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008456:	428b      	cmp	r3, r1
 8008458:	d073      	beq.n	8008542 <ai_platform_inputs_get+0x256>
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008460:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008464:	f000 80ac 	beq.w	80085c0 <ai_platform_inputs_get+0x2d4>
 8008468:	6813      	ldr	r3, [r2, #0]
 800846a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800846e:	2b00      	cmp	r3, #0
 8008470:	d129      	bne.n	80084c6 <ai_platform_inputs_get+0x1da>
 8008472:	4a4f      	ldr	r2, [pc, #316]	; (80085b0 <ai_platform_inputs_get+0x2c4>)
 8008474:	2301      	movs	r3, #1
 8008476:	6093      	str	r3, [r2, #8]
 8008478:	6893      	ldr	r3, [r2, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1fc      	bne.n	8008478 <ai_platform_inputs_get+0x18c>
 800847e:	494d      	ldr	r1, [pc, #308]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 8008480:	4b4d      	ldr	r3, [pc, #308]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 8008482:	6011      	str	r1, [r2, #0]
 8008484:	6812      	ldr	r2, [r2, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d01d      	beq.n	80084c6 <ai_platform_inputs_get+0x1da>
 800848a:	e7fe      	b.n	800848a <ai_platform_inputs_get+0x19e>
 800848c:	4a48      	ldr	r2, [pc, #288]	; (80085b0 <ai_platform_inputs_get+0x2c4>)
 800848e:	2301      	movs	r3, #1
 8008490:	6093      	str	r3, [r2, #8]
 8008492:	6893      	ldr	r3, [r2, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1fc      	bne.n	8008492 <ai_platform_inputs_get+0x1a6>
 8008498:	4946      	ldr	r1, [pc, #280]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 800849a:	4b47      	ldr	r3, [pc, #284]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	6812      	ldr	r2, [r2, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d010      	beq.n	80084c6 <ai_platform_inputs_get+0x1da>
 80084a4:	e7fe      	b.n	80084a4 <ai_platform_inputs_get+0x1b8>
 80084a6:	4a45      	ldr	r2, [pc, #276]	; (80085bc <ai_platform_inputs_get+0x2d0>)
 80084a8:	2301      	movs	r3, #1
 80084aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80084ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1fb      	bne.n	80084ae <ai_platform_inputs_get+0x1c2>
 80084b6:	493f      	ldr	r1, [pc, #252]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 80084b8:	4b3f      	ldr	r3, [pc, #252]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 80084ba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80084be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d113      	bne.n	80084ee <ai_platform_inputs_get+0x202>
 80084c6:	f7ff fd33 	bl	8007f30 <_ai_platform_release_crc>
 80084ca:	2000      	movs	r0, #0
 80084cc:	b005      	add	sp, #20
 80084ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d2:	4a37      	ldr	r2, [pc, #220]	; (80085b0 <ai_platform_inputs_get+0x2c4>)
 80084d4:	2301      	movs	r3, #1
 80084d6:	6093      	str	r3, [r2, #8]
 80084d8:	6893      	ldr	r3, [r2, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1fc      	bne.n	80084d8 <ai_platform_inputs_get+0x1ec>
 80084de:	4b35      	ldr	r3, [pc, #212]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	4b35      	ldr	r3, [pc, #212]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 80084e4:	6812      	ldr	r2, [r2, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	f43f af3b 	beq.w	8008362 <ai_platform_inputs_get+0x76>
 80084ec:	e7fe      	b.n	80084ec <ai_platform_inputs_get+0x200>
 80084ee:	e7fe      	b.n	80084ee <ai_platform_inputs_get+0x202>
 80084f0:	4a32      	ldr	r2, [pc, #200]	; (80085bc <ai_platform_inputs_get+0x2d0>)
 80084f2:	2301      	movs	r3, #1
 80084f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80084f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1fb      	bne.n	80084f8 <ai_platform_inputs_get+0x20c>
 8008500:	4b2c      	ldr	r3, [pc, #176]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 8008502:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008506:	4b2c      	ldr	r3, [pc, #176]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 8008508:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800850c:	429a      	cmp	r2, r3
 800850e:	f43f af28 	beq.w	8008362 <ai_platform_inputs_get+0x76>
 8008512:	e7fe      	b.n	8008512 <ai_platform_inputs_get+0x226>
 8008514:	2400      	movs	r4, #0
 8008516:	2218      	movs	r2, #24
 8008518:	2111      	movs	r1, #17
 800851a:	f109 0010 	add.w	r0, r9, #16
 800851e:	f001 f97d 	bl	800981c <core_set_error>
 8008522:	4620      	mov	r0, r4
 8008524:	9b02      	ldr	r3, [sp, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0d0      	beq.n	80084cc <ai_platform_inputs_get+0x1e0>
 800852a:	801c      	strh	r4, [r3, #0]
 800852c:	b005      	add	sp, #20
 800852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008532:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008536:	2c00      	cmp	r4, #0
 8008538:	d0ec      	beq.n	8008514 <ai_platform_inputs_get+0x228>
 800853a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800853e:	6858      	ldr	r0, [r3, #4]
 8008540:	e7f0      	b.n	8008524 <ai_platform_inputs_get+0x238>
 8008542:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <ai_platform_inputs_get+0x2d0>)
 8008544:	2301      	movs	r3, #1
 8008546:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800854a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1fb      	bne.n	800854a <ai_platform_inputs_get+0x25e>
 8008552:	4918      	ldr	r1, [pc, #96]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 8008554:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 8008556:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800855a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800855e:	429a      	cmp	r2, r3
 8008560:	d0b1      	beq.n	80084c6 <ai_platform_inputs_get+0x1da>
 8008562:	e7fe      	b.n	8008562 <ai_platform_inputs_get+0x276>
 8008564:	4a15      	ldr	r2, [pc, #84]	; (80085bc <ai_platform_inputs_get+0x2d0>)
 8008566:	2301      	movs	r3, #1
 8008568:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800856c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1fb      	bne.n	800856c <ai_platform_inputs_get+0x280>
 8008574:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 8008576:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 800857c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008580:	429a      	cmp	r2, r3
 8008582:	f43f aeee 	beq.w	8008362 <ai_platform_inputs_get+0x76>
 8008586:	e7fe      	b.n	8008586 <ai_platform_inputs_get+0x29a>
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <ai_platform_inputs_get+0x2c4>)
 800858a:	2301      	movs	r3, #1
 800858c:	6093      	str	r3, [r2, #8]
 800858e:	6893      	ldr	r3, [r2, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1fc      	bne.n	800858e <ai_platform_inputs_get+0x2a2>
 8008594:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <ai_platform_inputs_get+0x2c8>)
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <ai_platform_inputs_get+0x2cc>)
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	429a      	cmp	r2, r3
 800859e:	f43f aee0 	beq.w	8008362 <ai_platform_inputs_get+0x76>
 80085a2:	e7fe      	b.n	80085a2 <ai_platform_inputs_get+0x2b6>
 80085a4:	a1c00100 	.word	0xa1c00100
 80085a8:	e0042000 	.word	0xe0042000
 80085ac:	5c001000 	.word	0x5c001000
 80085b0:	40023000 	.word	0x40023000
 80085b4:	f407a5c2 	.word	0xf407a5c2
 80085b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80085bc:	58024000 	.word	0x58024000
 80085c0:	4a0d      	ldr	r2, [pc, #52]	; (80085f8 <ai_platform_inputs_get+0x30c>)
 80085c2:	2301      	movs	r3, #1
 80085c4:	6093      	str	r3, [r2, #8]
 80085c6:	6893      	ldr	r3, [r2, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1fc      	bne.n	80085c6 <ai_platform_inputs_get+0x2da>
 80085cc:	490b      	ldr	r1, [pc, #44]	; (80085fc <ai_platform_inputs_get+0x310>)
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <ai_platform_inputs_get+0x314>)
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	f43f af76 	beq.w	80084c6 <ai_platform_inputs_get+0x1da>
 80085da:	e7fe      	b.n	80085da <ai_platform_inputs_get+0x2ee>
 80085dc:	4a06      	ldr	r2, [pc, #24]	; (80085f8 <ai_platform_inputs_get+0x30c>)
 80085de:	2301      	movs	r3, #1
 80085e0:	6093      	str	r3, [r2, #8]
 80085e2:	6893      	ldr	r3, [r2, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1fc      	bne.n	80085e2 <ai_platform_inputs_get+0x2f6>
 80085e8:	4b04      	ldr	r3, [pc, #16]	; (80085fc <ai_platform_inputs_get+0x310>)
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	4b04      	ldr	r3, [pc, #16]	; (8008600 <ai_platform_inputs_get+0x314>)
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	f43f aeb6 	beq.w	8008362 <ai_platform_inputs_get+0x76>
 80085f6:	e7fe      	b.n	80085f6 <ai_platform_inputs_get+0x30a>
 80085f8:	40023000 	.word	0x40023000
 80085fc:	f407a5c2 	.word	0xf407a5c2
 8008600:	b5e8b5cd 	.word	0xb5e8b5cd

08008604 <ai_platform_outputs_get>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	b085      	sub	sp, #20
 800860a:	9102      	str	r1, [sp, #8]
 800860c:	2800      	cmp	r0, #0
 800860e:	f000 808f 	beq.w	8008730 <ai_platform_outputs_get+0x12c>
 8008612:	4ba8      	ldr	r3, [pc, #672]	; (80088b4 <ai_platform_outputs_get+0x2b0>)
 8008614:	4681      	mov	r9, r0
 8008616:	6802      	ldr	r2, [r0, #0]
 8008618:	429a      	cmp	r2, r3
 800861a:	f040 8089 	bne.w	8008730 <ai_platform_outputs_get+0x12c>
 800861e:	f7ff fc85 	bl	8007f2c <_ai_platform_acquire_crc>
 8008622:	4ba5      	ldr	r3, [pc, #660]	; (80088b8 <ai_platform_outputs_get+0x2b4>)
 8008624:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800862e:	189a      	adds	r2, r3, r2
 8008630:	2a01      	cmp	r2, #1
 8008632:	f240 80d6 	bls.w	80087e2 <ai_platform_outputs_get+0x1de>
 8008636:	f240 4249 	movw	r2, #1097	; 0x449
 800863a:	4293      	cmp	r3, r2
 800863c:	f000 80d1 	beq.w	80087e2 <ai_platform_outputs_get+0x1de>
 8008640:	4a9e      	ldr	r2, [pc, #632]	; (80088bc <ai_platform_outputs_get+0x2b8>)
 8008642:	6813      	ldr	r3, [r2, #0]
 8008644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008648:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800864c:	f000 80d8 	beq.w	8008800 <ai_platform_outputs_get+0x1fc>
 8008650:	6813      	ldr	r3, [r2, #0]
 8008652:	f240 4183 	movw	r1, #1155	; 0x483
 8008656:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800865a:	428b      	cmp	r3, r1
 800865c:	f000 8109 	beq.w	8008872 <ai_platform_outputs_get+0x26e>
 8008660:	6813      	ldr	r3, [r2, #0]
 8008662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008666:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800866a:	f000 813f 	beq.w	80088ec <ai_platform_outputs_get+0x2e8>
 800866e:	6813      	ldr	r3, [r2, #0]
 8008670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 810e 	beq.w	8008896 <ai_platform_outputs_get+0x292>
 800867a:	f7ff fc59 	bl	8007f30 <_ai_platform_release_crc>
 800867e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8008682:	2b01      	cmp	r3, #1
 8008684:	f240 80db 	bls.w	800883e <ai_platform_outputs_get+0x23a>
 8008688:	2100      	movs	r1, #0
 800868a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800868e:	f8cd 900c 	str.w	r9, [sp, #12]
 8008692:	460d      	mov	r5, r1
 8008694:	4689      	mov	r9, r1
 8008696:	e016      	b.n	80086c6 <ai_platform_outputs_get+0xc2>
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	2301      	movs	r3, #1
 800869c:	f848 3002 	str.w	r3, [r8, r2]
 80086a0:	69b2      	ldr	r2, [r6, #24]
 80086a2:	f04f 0301 	mov.w	r3, #1
 80086a6:	6856      	ldr	r6, [r2, #4]
 80086a8:	3501      	adds	r5, #1
 80086aa:	f109 091c 	add.w	r9, r9, #28
 80086ae:	7523      	strb	r3, [r4, #20]
 80086b0:	2300      	movs	r3, #0
 80086b2:	6962      	ldr	r2, [r4, #20]
 80086b4:	60a7      	str	r7, [r4, #8]
 80086b6:	f36b 221f 	bfi	r2, fp, #8, #24
 80086ba:	6126      	str	r6, [r4, #16]
 80086bc:	61a1      	str	r1, [r4, #24]
 80086be:	60e3      	str	r3, [r4, #12]
 80086c0:	6162      	str	r2, [r4, #20]
 80086c2:	e9c4 0c00 	strd	r0, ip, [r4]
 80086c6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80086ca:	b2ac      	uxth	r4, r5
 80086cc:	42ab      	cmp	r3, r5
 80086ce:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	f240 80a6 	bls.w	8008824 <ai_platform_outputs_get+0x220>
 80086d8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80a1 	beq.w	8008824 <ai_platform_outputs_get+0x220>
 80086e2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	f000 809c 	beq.w	8008824 <ai_platform_outputs_get+0x220>
 80086ec:	f8da 3014 	ldr.w	r3, [sl, #20]
 80086f0:	69b2      	ldr	r2, [r6, #24]
 80086f2:	68f1      	ldr	r1, [r6, #12]
 80086f4:	6810      	ldr	r0, [r2, #0]
 80086f6:	9100      	str	r1, [sp, #0]
 80086f8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80086fc:	68b3      	ldr	r3, [r6, #8]
 80086fe:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8008702:	444c      	add	r4, r9
 8008704:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8008708:	f003 fc74 	bl	800bff4 <ai_array_to_buffer_fmt>
 800870c:	69b2      	ldr	r2, [r6, #24]
 800870e:	9900      	ldr	r1, [sp, #0]
 8008710:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8008714:	2f00      	cmp	r7, #0
 8008716:	d0c4      	beq.n	80086a2 <ai_platform_outputs_get+0x9e>
 8008718:	2200      	movs	r2, #0
 800871a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800871e:	6832      	ldr	r2, [r6, #0]
 8008720:	607a      	str	r2, [r7, #4]
 8008722:	b112      	cbz	r2, 800872a <ai_platform_outputs_get+0x126>
 8008724:	8852      	ldrh	r2, [r2, #2]
 8008726:	2a00      	cmp	r2, #0
 8008728:	d1b6      	bne.n	8008698 <ai_platform_outputs_get+0x94>
 800872a:	69b2      	ldr	r2, [r6, #24]
 800872c:	2700      	movs	r7, #0
 800872e:	e7b8      	b.n	80086a2 <ai_platform_outputs_get+0x9e>
 8008730:	f7ff fbfc 	bl	8007f2c <_ai_platform_acquire_crc>
 8008734:	4b60      	ldr	r3, [pc, #384]	; (80088b8 <ai_platform_outputs_get+0x2b4>)
 8008736:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008740:	185a      	adds	r2, r3, r1
 8008742:	2a01      	cmp	r2, #1
 8008744:	d92a      	bls.n	800879c <ai_platform_outputs_get+0x198>
 8008746:	f240 4249 	movw	r2, #1097	; 0x449
 800874a:	4293      	cmp	r3, r2
 800874c:	d026      	beq.n	800879c <ai_platform_outputs_get+0x198>
 800874e:	4a5b      	ldr	r2, [pc, #364]	; (80088bc <ai_platform_outputs_get+0x2b8>)
 8008750:	6813      	ldr	r3, [r2, #0]
 8008752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008756:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800875a:	d02c      	beq.n	80087b6 <ai_platform_outputs_get+0x1b2>
 800875c:	6813      	ldr	r3, [r2, #0]
 800875e:	f240 4183 	movw	r1, #1155	; 0x483
 8008762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008766:	428b      	cmp	r3, r1
 8008768:	d072      	beq.n	8008850 <ai_platform_outputs_get+0x24c>
 800876a:	6813      	ldr	r3, [r2, #0]
 800876c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008770:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008774:	f000 80ac 	beq.w	80088d0 <ai_platform_outputs_get+0x2cc>
 8008778:	6813      	ldr	r3, [r2, #0]
 800877a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800877e:	2b00      	cmp	r3, #0
 8008780:	d129      	bne.n	80087d6 <ai_platform_outputs_get+0x1d2>
 8008782:	4a4f      	ldr	r2, [pc, #316]	; (80088c0 <ai_platform_outputs_get+0x2bc>)
 8008784:	2301      	movs	r3, #1
 8008786:	6093      	str	r3, [r2, #8]
 8008788:	6893      	ldr	r3, [r2, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1fc      	bne.n	8008788 <ai_platform_outputs_get+0x184>
 800878e:	494d      	ldr	r1, [pc, #308]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 8008790:	4b4d      	ldr	r3, [pc, #308]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 8008792:	6011      	str	r1, [r2, #0]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d01d      	beq.n	80087d6 <ai_platform_outputs_get+0x1d2>
 800879a:	e7fe      	b.n	800879a <ai_platform_outputs_get+0x196>
 800879c:	4a48      	ldr	r2, [pc, #288]	; (80088c0 <ai_platform_outputs_get+0x2bc>)
 800879e:	2301      	movs	r3, #1
 80087a0:	6093      	str	r3, [r2, #8]
 80087a2:	6893      	ldr	r3, [r2, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1fc      	bne.n	80087a2 <ai_platform_outputs_get+0x19e>
 80087a8:	4946      	ldr	r1, [pc, #280]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 80087aa:	4b47      	ldr	r3, [pc, #284]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d010      	beq.n	80087d6 <ai_platform_outputs_get+0x1d2>
 80087b4:	e7fe      	b.n	80087b4 <ai_platform_outputs_get+0x1b0>
 80087b6:	4a45      	ldr	r2, [pc, #276]	; (80088cc <ai_platform_outputs_get+0x2c8>)
 80087b8:	2301      	movs	r3, #1
 80087ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80087be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1fb      	bne.n	80087be <ai_platform_outputs_get+0x1ba>
 80087c6:	493f      	ldr	r1, [pc, #252]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 80087c8:	4b3f      	ldr	r3, [pc, #252]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 80087ca:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80087ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d113      	bne.n	80087fe <ai_platform_outputs_get+0x1fa>
 80087d6:	f7ff fbab 	bl	8007f30 <_ai_platform_release_crc>
 80087da:	2000      	movs	r0, #0
 80087dc:	b005      	add	sp, #20
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	4a37      	ldr	r2, [pc, #220]	; (80088c0 <ai_platform_outputs_get+0x2bc>)
 80087e4:	2301      	movs	r3, #1
 80087e6:	6093      	str	r3, [r2, #8]
 80087e8:	6893      	ldr	r3, [r2, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1fc      	bne.n	80087e8 <ai_platform_outputs_get+0x1e4>
 80087ee:	4b35      	ldr	r3, [pc, #212]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	4b35      	ldr	r3, [pc, #212]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	f43f af3f 	beq.w	800867a <ai_platform_outputs_get+0x76>
 80087fc:	e7fe      	b.n	80087fc <ai_platform_outputs_get+0x1f8>
 80087fe:	e7fe      	b.n	80087fe <ai_platform_outputs_get+0x1fa>
 8008800:	4a32      	ldr	r2, [pc, #200]	; (80088cc <ai_platform_outputs_get+0x2c8>)
 8008802:	2301      	movs	r3, #1
 8008804:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008808:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1fb      	bne.n	8008808 <ai_platform_outputs_get+0x204>
 8008810:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 8008812:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008816:	4b2c      	ldr	r3, [pc, #176]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 8008818:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800881c:	429a      	cmp	r2, r3
 800881e:	f43f af2c 	beq.w	800867a <ai_platform_outputs_get+0x76>
 8008822:	e7fe      	b.n	8008822 <ai_platform_outputs_get+0x21e>
 8008824:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008828:	b14c      	cbz	r4, 800883e <ai_platform_outputs_get+0x23a>
 800882a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800882e:	6858      	ldr	r0, [r3, #4]
 8008830:	9b02      	ldr	r3, [sp, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0d2      	beq.n	80087dc <ai_platform_outputs_get+0x1d8>
 8008836:	801c      	strh	r4, [r3, #0]
 8008838:	b005      	add	sp, #20
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	2400      	movs	r4, #0
 8008840:	2218      	movs	r2, #24
 8008842:	2111      	movs	r1, #17
 8008844:	f109 0010 	add.w	r0, r9, #16
 8008848:	f000 ffe8 	bl	800981c <core_set_error>
 800884c:	4620      	mov	r0, r4
 800884e:	e7ef      	b.n	8008830 <ai_platform_outputs_get+0x22c>
 8008850:	4a1e      	ldr	r2, [pc, #120]	; (80088cc <ai_platform_outputs_get+0x2c8>)
 8008852:	2301      	movs	r3, #1
 8008854:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008858:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1fb      	bne.n	8008858 <ai_platform_outputs_get+0x254>
 8008860:	4918      	ldr	r1, [pc, #96]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 8008862:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 8008864:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008868:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800886c:	429a      	cmp	r2, r3
 800886e:	d0b2      	beq.n	80087d6 <ai_platform_outputs_get+0x1d2>
 8008870:	e7fe      	b.n	8008870 <ai_platform_outputs_get+0x26c>
 8008872:	4a16      	ldr	r2, [pc, #88]	; (80088cc <ai_platform_outputs_get+0x2c8>)
 8008874:	2301      	movs	r3, #1
 8008876:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800887a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1fb      	bne.n	800887a <ai_platform_outputs_get+0x276>
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 8008884:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008888:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 800888a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800888e:	429a      	cmp	r2, r3
 8008890:	f43f aef3 	beq.w	800867a <ai_platform_outputs_get+0x76>
 8008894:	e7fe      	b.n	8008894 <ai_platform_outputs_get+0x290>
 8008896:	4a0a      	ldr	r2, [pc, #40]	; (80088c0 <ai_platform_outputs_get+0x2bc>)
 8008898:	2301      	movs	r3, #1
 800889a:	6093      	str	r3, [r2, #8]
 800889c:	6893      	ldr	r3, [r2, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1fc      	bne.n	800889c <ai_platform_outputs_get+0x298>
 80088a2:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <ai_platform_outputs_get+0x2c0>)
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <ai_platform_outputs_get+0x2c4>)
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	f43f aee5 	beq.w	800867a <ai_platform_outputs_get+0x76>
 80088b0:	e7fe      	b.n	80088b0 <ai_platform_outputs_get+0x2ac>
 80088b2:	bf00      	nop
 80088b4:	a1c00100 	.word	0xa1c00100
 80088b8:	e0042000 	.word	0xe0042000
 80088bc:	5c001000 	.word	0x5c001000
 80088c0:	40023000 	.word	0x40023000
 80088c4:	f407a5c2 	.word	0xf407a5c2
 80088c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80088cc:	58024000 	.word	0x58024000
 80088d0:	4a0d      	ldr	r2, [pc, #52]	; (8008908 <ai_platform_outputs_get+0x304>)
 80088d2:	2301      	movs	r3, #1
 80088d4:	6093      	str	r3, [r2, #8]
 80088d6:	6893      	ldr	r3, [r2, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1fc      	bne.n	80088d6 <ai_platform_outputs_get+0x2d2>
 80088dc:	490b      	ldr	r1, [pc, #44]	; (800890c <ai_platform_outputs_get+0x308>)
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <ai_platform_outputs_get+0x30c>)
 80088e0:	6011      	str	r1, [r2, #0]
 80088e2:	6812      	ldr	r2, [r2, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	f43f af76 	beq.w	80087d6 <ai_platform_outputs_get+0x1d2>
 80088ea:	e7fe      	b.n	80088ea <ai_platform_outputs_get+0x2e6>
 80088ec:	4a06      	ldr	r2, [pc, #24]	; (8008908 <ai_platform_outputs_get+0x304>)
 80088ee:	2301      	movs	r3, #1
 80088f0:	6093      	str	r3, [r2, #8]
 80088f2:	6893      	ldr	r3, [r2, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1fc      	bne.n	80088f2 <ai_platform_outputs_get+0x2ee>
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <ai_platform_outputs_get+0x308>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	4b04      	ldr	r3, [pc, #16]	; (8008910 <ai_platform_outputs_get+0x30c>)
 80088fe:	6812      	ldr	r2, [r2, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	f43f aeba 	beq.w	800867a <ai_platform_outputs_get+0x76>
 8008906:	e7fe      	b.n	8008906 <ai_platform_outputs_get+0x302>
 8008908:	40023000 	.word	0x40023000
 800890c:	f407a5c2 	.word	0xf407a5c2
 8008910:	b5e8b5cd 	.word	0xb5e8b5cd

08008914 <ai_platform_network_create>:
 8008914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008918:	b083      	sub	sp, #12
 800891a:	4604      	mov	r4, r0
 800891c:	4615      	mov	r5, r2
 800891e:	461e      	mov	r6, r3
 8008920:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8008924:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8008928:	f7ff fb00 	bl	8007f2c <_ai_platform_acquire_crc>
 800892c:	2800      	cmp	r0, #0
 800892e:	f000 80bd 	beq.w	8008aac <ai_platform_network_create+0x198>
 8008932:	4ba5      	ldr	r3, [pc, #660]	; (8008bc8 <ai_platform_network_create+0x2b4>)
 8008934:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8008938:	4601      	mov	r1, r0
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008940:	eb03 020c 	add.w	r2, r3, ip
 8008944:	2a01      	cmp	r2, #1
 8008946:	f240 80a8 	bls.w	8008a9a <ai_platform_network_create+0x186>
 800894a:	f240 4249 	movw	r2, #1097	; 0x449
 800894e:	4293      	cmp	r3, r2
 8008950:	f000 80a3 	beq.w	8008a9a <ai_platform_network_create+0x186>
 8008954:	4a9d      	ldr	r2, [pc, #628]	; (8008bcc <ai_platform_network_create+0x2b8>)
 8008956:	6813      	ldr	r3, [r2, #0]
 8008958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800895c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008960:	f000 80b9 	beq.w	8008ad6 <ai_platform_network_create+0x1c2>
 8008964:	6813      	ldr	r3, [r2, #0]
 8008966:	f240 4c83 	movw	ip, #1155	; 0x483
 800896a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800896e:	4563      	cmp	r3, ip
 8008970:	f000 80a1 	beq.w	8008ab6 <ai_platform_network_create+0x1a2>
 8008974:	6813      	ldr	r3, [r2, #0]
 8008976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800897a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800897e:	f000 8153 	beq.w	8008c28 <ai_platform_network_create+0x314>
 8008982:	6813      	ldr	r3, [r2, #0]
 8008984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008988:	2b00      	cmp	r3, #0
 800898a:	f040 808d 	bne.w	8008aa8 <ai_platform_network_create+0x194>
 800898e:	4a90      	ldr	r2, [pc, #576]	; (8008bd0 <ai_platform_network_create+0x2bc>)
 8008990:	2318      	movs	r3, #24
 8008992:	6093      	str	r3, [r2, #8]
 8008994:	6893      	ldr	r3, [r2, #8]
 8008996:	2b18      	cmp	r3, #24
 8008998:	f040 8086 	bne.w	8008aa8 <ai_platform_network_create+0x194>
 800899c:	2301      	movs	r3, #1
 800899e:	6093      	str	r3, [r2, #8]
 80089a0:	6893      	ldr	r3, [r2, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1fc      	bne.n	80089a0 <ai_platform_network_create+0x8c>
 80089a6:	4608      	mov	r0, r1
 80089a8:	f7ff fac2 	bl	8007f30 <_ai_platform_release_crc>
 80089ac:	f7ff fabe 	bl	8007f2c <_ai_platform_acquire_crc>
 80089b0:	4b85      	ldr	r3, [pc, #532]	; (8008bc8 <ai_platform_network_create+0x2b4>)
 80089b2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089bc:	189a      	adds	r2, r3, r2
 80089be:	2a01      	cmp	r2, #1
 80089c0:	f240 809f 	bls.w	8008b02 <ai_platform_network_create+0x1ee>
 80089c4:	f240 4249 	movw	r2, #1097	; 0x449
 80089c8:	4293      	cmp	r3, r2
 80089ca:	f000 809a 	beq.w	8008b02 <ai_platform_network_create+0x1ee>
 80089ce:	4a7f      	ldr	r2, [pc, #508]	; (8008bcc <ai_platform_network_create+0x2b8>)
 80089d0:	6813      	ldr	r3, [r2, #0]
 80089d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80089da:	f000 80a0 	beq.w	8008b1e <ai_platform_network_create+0x20a>
 80089de:	6813      	ldr	r3, [r2, #0]
 80089e0:	f240 4183 	movw	r1, #1155	; 0x483
 80089e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089e8:	428b      	cmp	r3, r1
 80089ea:	f000 80bf 	beq.w	8008b6c <ai_platform_network_create+0x258>
 80089ee:	6813      	ldr	r3, [r2, #0]
 80089f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089f4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80089f8:	f000 8123 	beq.w	8008c42 <ai_platform_network_create+0x32e>
 80089fc:	6813      	ldr	r3, [r2, #0]
 80089fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80c4 	beq.w	8008b90 <ai_platform_network_create+0x27c>
 8008a08:	f7ff fa92 	bl	8007f30 <_ai_platform_release_crc>
 8008a0c:	2c00      	cmp	r4, #0
 8008a0e:	f000 80aa 	beq.w	8008b66 <ai_platform_network_create+0x252>
 8008a12:	4b70      	ldr	r3, [pc, #448]	; (8008bd4 <ai_platform_network_create+0x2c0>)
 8008a14:	602b      	str	r3, [r5, #0]
 8008a16:	6025      	str	r5, [r4, #0]
 8008a18:	f000 fef8 	bl	800980c <core_init>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f000 8090 	beq.w	8008b42 <ai_platform_network_create+0x22e>
 8008a22:	f7ff fa83 	bl	8007f2c <_ai_platform_acquire_crc>
 8008a26:	4b68      	ldr	r3, [pc, #416]	; (8008bc8 <ai_platform_network_create+0x2b4>)
 8008a28:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a32:	185a      	adds	r2, r3, r1
 8008a34:	2a01      	cmp	r2, #1
 8008a36:	f240 80b9 	bls.w	8008bac <ai_platform_network_create+0x298>
 8008a3a:	f240 4249 	movw	r2, #1097	; 0x449
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f000 80b4 	beq.w	8008bac <ai_platform_network_create+0x298>
 8008a44:	4a61      	ldr	r2, [pc, #388]	; (8008bcc <ai_platform_network_create+0x2b8>)
 8008a46:	6813      	ldr	r3, [r2, #0]
 8008a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a4c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008a50:	f000 80c8 	beq.w	8008be4 <ai_platform_network_create+0x2d0>
 8008a54:	6813      	ldr	r3, [r2, #0]
 8008a56:	f240 4183 	movw	r1, #1155	; 0x483
 8008a5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a5e:	428b      	cmp	r3, r1
 8008a60:	f000 8107 	beq.w	8008c72 <ai_platform_network_create+0x35e>
 8008a64:	6813      	ldr	r3, [r2, #0]
 8008a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a6a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008a6e:	f000 8111 	beq.w	8008c94 <ai_platform_network_create+0x380>
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f040 80c3 	bne.w	8008c04 <ai_platform_network_create+0x2f0>
 8008a7e:	4b54      	ldr	r3, [pc, #336]	; (8008bd0 <ai_platform_network_create+0x2bc>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	d1fc      	bne.n	8008a84 <ai_platform_network_create+0x170>
 8008a8a:	4a53      	ldr	r2, [pc, #332]	; (8008bd8 <ai_platform_network_create+0x2c4>)
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b52      	ldr	r3, [pc, #328]	; (8008bdc <ai_platform_network_create+0x2c8>)
 8008a92:	429a      	cmp	r2, r3
 8008a94:	f000 80b6 	beq.w	8008c04 <ai_platform_network_create+0x2f0>
 8008a98:	e7fe      	b.n	8008a98 <ai_platform_network_create+0x184>
 8008a9a:	4b4d      	ldr	r3, [pc, #308]	; (8008bd0 <ai_platform_network_create+0x2bc>)
 8008a9c:	2218      	movs	r2, #24
 8008a9e:	609a      	str	r2, [r3, #8]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	2a18      	cmp	r2, #24
 8008aa4:	d027      	beq.n	8008af6 <ai_platform_network_create+0x1e2>
 8008aa6:	4608      	mov	r0, r1
 8008aa8:	f7ff fa42 	bl	8007f30 <_ai_platform_release_crc>
 8008aac:	f244 1033 	movw	r0, #16691	; 0x4133
 8008ab0:	b003      	add	sp, #12
 8008ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ab6:	4a4a      	ldr	r2, [pc, #296]	; (8008be0 <ai_platform_network_create+0x2cc>)
 8008ab8:	2318      	movs	r3, #24
 8008aba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008abe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ac2:	2b18      	cmp	r3, #24
 8008ac4:	d1f0      	bne.n	8008aa8 <ai_platform_network_create+0x194>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008acc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1fb      	bne.n	8008acc <ai_platform_network_create+0x1b8>
 8008ad4:	e767      	b.n	80089a6 <ai_platform_network_create+0x92>
 8008ad6:	4a42      	ldr	r2, [pc, #264]	; (8008be0 <ai_platform_network_create+0x2cc>)
 8008ad8:	2318      	movs	r3, #24
 8008ada:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008ade:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ae2:	2b18      	cmp	r3, #24
 8008ae4:	d1e0      	bne.n	8008aa8 <ai_platform_network_create+0x194>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008aec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1fb      	bne.n	8008aec <ai_platform_network_create+0x1d8>
 8008af4:	e757      	b.n	80089a6 <ai_platform_network_create+0x92>
 8008af6:	2201      	movs	r2, #1
 8008af8:	609a      	str	r2, [r3, #8]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	2a00      	cmp	r2, #0
 8008afe:	d1fc      	bne.n	8008afa <ai_platform_network_create+0x1e6>
 8008b00:	e751      	b.n	80089a6 <ai_platform_network_create+0x92>
 8008b02:	4a33      	ldr	r2, [pc, #204]	; (8008bd0 <ai_platform_network_create+0x2bc>)
 8008b04:	2301      	movs	r3, #1
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	6891      	ldr	r1, [r2, #8]
 8008b0a:	2900      	cmp	r1, #0
 8008b0c:	d1fc      	bne.n	8008b08 <ai_platform_network_create+0x1f4>
 8008b0e:	4b32      	ldr	r3, [pc, #200]	; (8008bd8 <ai_platform_network_create+0x2c4>)
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	4b32      	ldr	r3, [pc, #200]	; (8008bdc <ai_platform_network_create+0x2c8>)
 8008b14:	6812      	ldr	r2, [r2, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	f43f af76 	beq.w	8008a08 <ai_platform_network_create+0xf4>
 8008b1c:	e7fe      	b.n	8008b1c <ai_platform_network_create+0x208>
 8008b1e:	4a30      	ldr	r2, [pc, #192]	; (8008be0 <ai_platform_network_create+0x2cc>)
 8008b20:	2301      	movs	r3, #1
 8008b22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1fb      	bne.n	8008b26 <ai_platform_network_create+0x212>
 8008b2e:	4b2a      	ldr	r3, [pc, #168]	; (8008bd8 <ai_platform_network_create+0x2c4>)
 8008b30:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008b34:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <ai_platform_network_create+0x2c8>)
 8008b36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	f43f af64 	beq.w	8008a08 <ai_platform_network_create+0xf4>
 8008b40:	e7fe      	b.n	8008b40 <ai_platform_network_create+0x22c>
 8008b42:	f04f 0930 	mov.w	r9, #48	; 0x30
 8008b46:	2300      	movs	r3, #0
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	2410      	movs	r4, #16
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	4639      	mov	r1, r7
 8008b50:	4630      	mov	r0, r6
 8008b52:	f003 faf3 	bl	800c13c <ai_version_get>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2000      	movs	r0, #0
 8008b5a:	64ab      	str	r3, [r5, #72]	; 0x48
 8008b5c:	f369 0007 	bfi	r0, r9, #0, #8
 8008b60:	f364 201f 	bfi	r0, r4, #8, #24
 8008b64:	e7a4      	b.n	8008ab0 <ai_platform_network_create+0x19c>
 8008b66:	f241 0010 	movw	r0, #4112	; 0x1010
 8008b6a:	e7a1      	b.n	8008ab0 <ai_platform_network_create+0x19c>
 8008b6c:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <ai_platform_network_create+0x2cc>)
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008b74:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1fb      	bne.n	8008b74 <ai_platform_network_create+0x260>
 8008b7c:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <ai_platform_network_create+0x2c4>)
 8008b7e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008b82:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <ai_platform_network_create+0x2c8>)
 8008b84:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	f43f af3d 	beq.w	8008a08 <ai_platform_network_create+0xf4>
 8008b8e:	e7fe      	b.n	8008b8e <ai_platform_network_create+0x27a>
 8008b90:	4a0f      	ldr	r2, [pc, #60]	; (8008bd0 <ai_platform_network_create+0x2bc>)
 8008b92:	2301      	movs	r3, #1
 8008b94:	6093      	str	r3, [r2, #8]
 8008b96:	6893      	ldr	r3, [r2, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1fc      	bne.n	8008b96 <ai_platform_network_create+0x282>
 8008b9c:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <ai_platform_network_create+0x2c4>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	4b0e      	ldr	r3, [pc, #56]	; (8008bdc <ai_platform_network_create+0x2c8>)
 8008ba2:	6812      	ldr	r2, [r2, #0]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	f43f af2f 	beq.w	8008a08 <ai_platform_network_create+0xf4>
 8008baa:	e7fe      	b.n	8008baa <ai_platform_network_create+0x296>
 8008bac:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <ai_platform_network_create+0x2bc>)
 8008bae:	2301      	movs	r3, #1
 8008bb0:	6093      	str	r3, [r2, #8]
 8008bb2:	6893      	ldr	r3, [r2, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1fc      	bne.n	8008bb2 <ai_platform_network_create+0x29e>
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <ai_platform_network_create+0x2c4>)
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	4b07      	ldr	r3, [pc, #28]	; (8008bdc <ai_platform_network_create+0x2c8>)
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d01f      	beq.n	8008c04 <ai_platform_network_create+0x2f0>
 8008bc4:	e7fe      	b.n	8008bc4 <ai_platform_network_create+0x2b0>
 8008bc6:	bf00      	nop
 8008bc8:	e0042000 	.word	0xe0042000
 8008bcc:	5c001000 	.word	0x5c001000
 8008bd0:	40023000 	.word	0x40023000
 8008bd4:	a1c00100 	.word	0xa1c00100
 8008bd8:	f407a5c2 	.word	0xf407a5c2
 8008bdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8008be0:	58024000 	.word	0x58024000
 8008be4:	4a33      	ldr	r2, [pc, #204]	; (8008cb4 <ai_platform_network_create+0x3a0>)
 8008be6:	2301      	movs	r3, #1
 8008be8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008bec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1fb      	bne.n	8008bec <ai_platform_network_create+0x2d8>
 8008bf4:	4b30      	ldr	r3, [pc, #192]	; (8008cb8 <ai_platform_network_create+0x3a4>)
 8008bf6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008bfa:	4b30      	ldr	r3, [pc, #192]	; (8008cbc <ai_platform_network_create+0x3a8>)
 8008bfc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d12c      	bne.n	8008c5e <ai_platform_network_create+0x34a>
 8008c04:	f7ff f994 	bl	8007f30 <_ai_platform_release_crc>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f003 fa95 	bl	800c13c <ai_version_get>
 8008c12:	4681      	mov	r9, r0
 8008c14:	2200      	movs	r2, #0
 8008c16:	2105      	movs	r1, #5
 8008c18:	2001      	movs	r0, #1
 8008c1a:	f003 fa8f 	bl	800c13c <ai_version_get>
 8008c1e:	4581      	cmp	r9, r0
 8008c20:	d01e      	beq.n	8008c60 <ai_platform_network_create+0x34c>
 8008c22:	f04f 0901 	mov.w	r9, #1
 8008c26:	e78e      	b.n	8008b46 <ai_platform_network_create+0x232>
 8008c28:	4b25      	ldr	r3, [pc, #148]	; (8008cc0 <ai_platform_network_create+0x3ac>)
 8008c2a:	2218      	movs	r2, #24
 8008c2c:	609a      	str	r2, [r3, #8]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	2a18      	cmp	r2, #24
 8008c32:	f47f af39 	bne.w	8008aa8 <ai_platform_network_create+0x194>
 8008c36:	2201      	movs	r2, #1
 8008c38:	609a      	str	r2, [r3, #8]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	2a00      	cmp	r2, #0
 8008c3e:	d1fc      	bne.n	8008c3a <ai_platform_network_create+0x326>
 8008c40:	e6b1      	b.n	80089a6 <ai_platform_network_create+0x92>
 8008c42:	4a1f      	ldr	r2, [pc, #124]	; (8008cc0 <ai_platform_network_create+0x3ac>)
 8008c44:	2301      	movs	r3, #1
 8008c46:	6093      	str	r3, [r2, #8]
 8008c48:	6893      	ldr	r3, [r2, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1fc      	bne.n	8008c48 <ai_platform_network_create+0x334>
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <ai_platform_network_create+0x3a4>)
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	4b1a      	ldr	r3, [pc, #104]	; (8008cbc <ai_platform_network_create+0x3a8>)
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	f43f aed6 	beq.w	8008a08 <ai_platform_network_create+0xf4>
 8008c5c:	e7fe      	b.n	8008c5c <ai_platform_network_create+0x348>
 8008c5e:	e7fe      	b.n	8008c5e <ai_platform_network_create+0x34a>
 8008c60:	4b18      	ldr	r3, [pc, #96]	; (8008cc4 <ai_platform_network_create+0x3b0>)
 8008c62:	a801      	add	r0, sp, #4
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	f000 fde5 	bl	8009834 <ai_check_custom_types>
 8008c6a:	b300      	cbz	r0, 8008cae <ai_platform_network_create+0x39a>
 8008c6c:	2400      	movs	r4, #0
 8008c6e:	46a1      	mov	r9, r4
 8008c70:	e76c      	b.n	8008b4c <ai_platform_network_create+0x238>
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <ai_platform_network_create+0x3a0>)
 8008c74:	2201      	movs	r2, #1
 8008c76:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8008c7a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8008c7e:	2a00      	cmp	r2, #0
 8008c80:	d1fb      	bne.n	8008c7a <ai_platform_network_create+0x366>
 8008c82:	4a0d      	ldr	r2, [pc, #52]	; (8008cb8 <ai_platform_network_create+0x3a4>)
 8008c84:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8008c88:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <ai_platform_network_create+0x3a8>)
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d0b8      	beq.n	8008c04 <ai_platform_network_create+0x2f0>
 8008c92:	e7fe      	b.n	8008c92 <ai_platform_network_create+0x37e>
 8008c94:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <ai_platform_network_create+0x3ac>)
 8008c96:	2201      	movs	r2, #1
 8008c98:	609a      	str	r2, [r3, #8]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d1fc      	bne.n	8008c9a <ai_platform_network_create+0x386>
 8008ca0:	4a05      	ldr	r2, [pc, #20]	; (8008cb8 <ai_platform_network_create+0x3a4>)
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <ai_platform_network_create+0x3a8>)
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d0ab      	beq.n	8008c04 <ai_platform_network_create+0x2f0>
 8008cac:	e7fe      	b.n	8008cac <ai_platform_network_create+0x398>
 8008cae:	f04f 0902 	mov.w	r9, #2
 8008cb2:	e748      	b.n	8008b46 <ai_platform_network_create+0x232>
 8008cb4:	58024000 	.word	0x58024000
 8008cb8:	f407a5c2 	.word	0xf407a5c2
 8008cbc:	b5e8b5cd 	.word	0xb5e8b5cd
 8008cc0:	40023000 	.word	0x40023000
 8008cc4:	84048403 	.word	0x84048403

08008cc8 <ai_platform_network_init>:
 8008cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d052      	beq.n	8008d76 <ai_platform_network_init+0xae>
 8008cd0:	4bab      	ldr	r3, [pc, #684]	; (8008f80 <ai_platform_network_init+0x2b8>)
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	6802      	ldr	r2, [r0, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d14d      	bne.n	8008d76 <ai_platform_network_init+0xae>
 8008cda:	460d      	mov	r5, r1
 8008cdc:	f7ff f926 	bl	8007f2c <_ai_platform_acquire_crc>
 8008ce0:	4ba8      	ldr	r3, [pc, #672]	; (8008f84 <ai_platform_network_init+0x2bc>)
 8008ce2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cec:	189a      	adds	r2, r3, r2
 8008cee:	2a01      	cmp	r2, #1
 8008cf0:	f240 809b 	bls.w	8008e2a <ai_platform_network_init+0x162>
 8008cf4:	f240 4249 	movw	r2, #1097	; 0x449
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	f000 8096 	beq.w	8008e2a <ai_platform_network_init+0x162>
 8008cfe:	4aa2      	ldr	r2, [pc, #648]	; (8008f88 <ai_platform_network_init+0x2c0>)
 8008d00:	6813      	ldr	r3, [r2, #0]
 8008d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d06:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008d0a:	f000 809d 	beq.w	8008e48 <ai_platform_network_init+0x180>
 8008d0e:	6813      	ldr	r3, [r2, #0]
 8008d10:	f240 4183 	movw	r1, #1155	; 0x483
 8008d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	f000 80e4 	beq.w	8008ee6 <ai_platform_network_init+0x21e>
 8008d1e:	6813      	ldr	r3, [r2, #0]
 8008d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d24:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008d28:	f000 811b 	beq.w	8008f62 <ai_platform_network_init+0x29a>
 8008d2c:	6813      	ldr	r3, [r2, #0]
 8008d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 80f9 	beq.w	8008f2a <ai_platform_network_init+0x262>
 8008d38:	f7ff f8fa 	bl	8007f30 <_ai_platform_release_crc>
 8008d3c:	2d00      	cmp	r5, #0
 8008d3e:	f000 8147 	beq.w	8008fd0 <ai_platform_network_init+0x308>
 8008d42:	4b92      	ldr	r3, [pc, #584]	; (8008f8c <ai_platform_network_init+0x2c4>)
 8008d44:	682a      	ldr	r2, [r5, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	f040 8090 	bne.w	8008e6c <ai_platform_network_init+0x1a4>
 8008d4c:	692b      	ldr	r3, [r5, #16]
 8008d4e:	89ae      	ldrh	r6, [r5, #12]
 8008d50:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8008d54:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8008d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d5a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8008d5e:	2303      	movs	r3, #3
 8008d60:	84a6      	strh	r6, [r4, #36]	; 0x24
 8008d62:	4626      	mov	r6, r4
 8008d64:	4620      	mov	r0, r4
 8008d66:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8008d6a:	60e3      	str	r3, [r4, #12]
 8008d6c:	f000 fd8a 	bl	8009884 <ai_layers_init_all>
 8008d70:	4630      	mov	r0, r6
 8008d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d76:	f7ff f8d9 	bl	8007f2c <_ai_platform_acquire_crc>
 8008d7a:	4b82      	ldr	r3, [pc, #520]	; (8008f84 <ai_platform_network_init+0x2bc>)
 8008d7c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d86:	185a      	adds	r2, r3, r1
 8008d88:	2a01      	cmp	r2, #1
 8008d8a:	d92b      	bls.n	8008de4 <ai_platform_network_init+0x11c>
 8008d8c:	f240 4249 	movw	r2, #1097	; 0x449
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d027      	beq.n	8008de4 <ai_platform_network_init+0x11c>
 8008d94:	4a7c      	ldr	r2, [pc, #496]	; (8008f88 <ai_platform_network_init+0x2c0>)
 8008d96:	6813      	ldr	r3, [r2, #0]
 8008d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008da0:	d02d      	beq.n	8008dfe <ai_platform_network_init+0x136>
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	f240 4183 	movw	r1, #1155	; 0x483
 8008da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dac:	428b      	cmp	r3, r1
 8008dae:	f000 8089 	beq.w	8008ec4 <ai_platform_network_init+0x1fc>
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008db8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008dbc:	f000 80c3 	beq.w	8008f46 <ai_platform_network_init+0x27e>
 8008dc0:	6813      	ldr	r3, [r2, #0]
 8008dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d129      	bne.n	8008e1e <ai_platform_network_init+0x156>
 8008dca:	4a71      	ldr	r2, [pc, #452]	; (8008f90 <ai_platform_network_init+0x2c8>)
 8008dcc:	2301      	movs	r3, #1
 8008dce:	6093      	str	r3, [r2, #8]
 8008dd0:	6893      	ldr	r3, [r2, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1fc      	bne.n	8008dd0 <ai_platform_network_init+0x108>
 8008dd6:	496f      	ldr	r1, [pc, #444]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008dd8:	4b6f      	ldr	r3, [pc, #444]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008dda:	6011      	str	r1, [r2, #0]
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d01d      	beq.n	8008e1e <ai_platform_network_init+0x156>
 8008de2:	e7fe      	b.n	8008de2 <ai_platform_network_init+0x11a>
 8008de4:	4a6a      	ldr	r2, [pc, #424]	; (8008f90 <ai_platform_network_init+0x2c8>)
 8008de6:	2301      	movs	r3, #1
 8008de8:	6093      	str	r3, [r2, #8]
 8008dea:	6893      	ldr	r3, [r2, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1fc      	bne.n	8008dea <ai_platform_network_init+0x122>
 8008df0:	4968      	ldr	r1, [pc, #416]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008df2:	4b69      	ldr	r3, [pc, #420]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008df4:	6011      	str	r1, [r2, #0]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d010      	beq.n	8008e1e <ai_platform_network_init+0x156>
 8008dfc:	e7fe      	b.n	8008dfc <ai_platform_network_init+0x134>
 8008dfe:	4a67      	ldr	r2, [pc, #412]	; (8008f9c <ai_platform_network_init+0x2d4>)
 8008e00:	2301      	movs	r3, #1
 8008e02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1fb      	bne.n	8008e06 <ai_platform_network_init+0x13e>
 8008e0e:	4961      	ldr	r1, [pc, #388]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008e10:	4b61      	ldr	r3, [pc, #388]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008e12:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008e16:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d113      	bne.n	8008e46 <ai_platform_network_init+0x17e>
 8008e1e:	2600      	movs	r6, #0
 8008e20:	f7ff f886 	bl	8007f30 <_ai_platform_release_crc>
 8008e24:	4630      	mov	r0, r6
 8008e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2a:	4a59      	ldr	r2, [pc, #356]	; (8008f90 <ai_platform_network_init+0x2c8>)
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	6093      	str	r3, [r2, #8]
 8008e30:	6893      	ldr	r3, [r2, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1fc      	bne.n	8008e30 <ai_platform_network_init+0x168>
 8008e36:	4b57      	ldr	r3, [pc, #348]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	4b57      	ldr	r3, [pc, #348]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	f43f af7a 	beq.w	8008d38 <ai_platform_network_init+0x70>
 8008e44:	e7fe      	b.n	8008e44 <ai_platform_network_init+0x17c>
 8008e46:	e7fe      	b.n	8008e46 <ai_platform_network_init+0x17e>
 8008e48:	4a54      	ldr	r2, [pc, #336]	; (8008f9c <ai_platform_network_init+0x2d4>)
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e50:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1fb      	bne.n	8008e50 <ai_platform_network_init+0x188>
 8008e58:	4b4e      	ldr	r3, [pc, #312]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008e5a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008e5e:	4b4e      	ldr	r3, [pc, #312]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008e60:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e64:	429a      	cmp	r2, r3
 8008e66:	f43f af67 	beq.w	8008d38 <ai_platform_network_init+0x70>
 8008e6a:	e7fe      	b.n	8008e6a <ai_platform_network_init+0x1a2>
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f105 081c 	add.w	r8, r5, #28
 8008e74:	686e      	ldr	r6, [r5, #4]
 8008e76:	f7ff f80b 	bl	8007e90 <ai_buffer_get_size>
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4640      	mov	r0, r8
 8008e80:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8008e84:	f7ff f804 	bl	8007e90 <ai_buffer_get_size>
 8008e88:	2f00      	cmp	r7, #0
 8008e8a:	d13e      	bne.n	8008f0a <ai_platform_network_init+0x242>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	f000 808e 	beq.w	8008fae <ai_platform_network_init+0x2e6>
 8008e92:	f1b9 0f00 	cmp.w	r9, #0
 8008e96:	f000 8094 	beq.w	8008fc2 <ai_platform_network_init+0x2fa>
 8008e9a:	f04f 0c01 	mov.w	ip, #1
 8008e9e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008ea0:	2600      	movs	r6, #0
 8008ea2:	83e7      	strh	r7, [r4, #30]
 8008ea4:	4563      	cmp	r3, ip
 8008ea6:	83a6      	strh	r6, [r4, #28]
 8008ea8:	d37a      	bcc.n	8008fa0 <ai_platform_network_init+0x2d8>
 8008eaa:	f1bc 0f00 	cmp.w	ip, #0
 8008eae:	f000 809c 	beq.w	8008fea <ai_platform_network_init+0x322>
 8008eb2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008eb4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8008eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008eba:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8008ebe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008ec2:	e74c      	b.n	8008d5e <ai_platform_network_init+0x96>
 8008ec4:	4a35      	ldr	r2, [pc, #212]	; (8008f9c <ai_platform_network_init+0x2d4>)
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008ecc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1fb      	bne.n	8008ecc <ai_platform_network_init+0x204>
 8008ed4:	492f      	ldr	r1, [pc, #188]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008ed6:	4b30      	ldr	r3, [pc, #192]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008ed8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008edc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d09c      	beq.n	8008e1e <ai_platform_network_init+0x156>
 8008ee4:	e7fe      	b.n	8008ee4 <ai_platform_network_init+0x21c>
 8008ee6:	4a2d      	ldr	r2, [pc, #180]	; (8008f9c <ai_platform_network_init+0x2d4>)
 8008ee8:	2301      	movs	r3, #1
 8008eea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008eee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1fb      	bne.n	8008eee <ai_platform_network_init+0x226>
 8008ef6:	4b27      	ldr	r3, [pc, #156]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008ef8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008efc:	4b26      	ldr	r3, [pc, #152]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008efe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f43f af18 	beq.w	8008d38 <ai_platform_network_init+0x70>
 8008f08:	e7fe      	b.n	8008f08 <ai_platform_network_init+0x240>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d153      	bne.n	8008fb6 <ai_platform_network_init+0x2ee>
 8008f0e:	4680      	mov	r8, r0
 8008f10:	4684      	mov	ip, r0
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d063      	beq.n	8008fde <ai_platform_network_init+0x316>
 8008f16:	8be6      	ldrh	r6, [r4, #30]
 8008f18:	2e00      	cmp	r6, #0
 8008f1a:	d168      	bne.n	8008fee <ai_platform_network_init+0x326>
 8008f1c:	2212      	movs	r2, #18
 8008f1e:	2116      	movs	r1, #22
 8008f20:	f104 0010 	add.w	r0, r4, #16
 8008f24:	f000 fc7a 	bl	800981c <core_set_error>
 8008f28:	e77c      	b.n	8008e24 <ai_platform_network_init+0x15c>
 8008f2a:	4a19      	ldr	r2, [pc, #100]	; (8008f90 <ai_platform_network_init+0x2c8>)
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	6893      	ldr	r3, [r2, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1fc      	bne.n	8008f30 <ai_platform_network_init+0x268>
 8008f36:	4b17      	ldr	r3, [pc, #92]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008f3c:	6812      	ldr	r2, [r2, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	f43f aefa 	beq.w	8008d38 <ai_platform_network_init+0x70>
 8008f44:	e7fe      	b.n	8008f44 <ai_platform_network_init+0x27c>
 8008f46:	4a12      	ldr	r2, [pc, #72]	; (8008f90 <ai_platform_network_init+0x2c8>)
 8008f48:	2301      	movs	r3, #1
 8008f4a:	6093      	str	r3, [r2, #8]
 8008f4c:	6893      	ldr	r3, [r2, #8]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1fc      	bne.n	8008f4c <ai_platform_network_init+0x284>
 8008f52:	4910      	ldr	r1, [pc, #64]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008f54:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008f56:	6011      	str	r1, [r2, #0]
 8008f58:	6812      	ldr	r2, [r2, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	f43f af5f 	beq.w	8008e1e <ai_platform_network_init+0x156>
 8008f60:	e7fe      	b.n	8008f60 <ai_platform_network_init+0x298>
 8008f62:	4a0b      	ldr	r2, [pc, #44]	; (8008f90 <ai_platform_network_init+0x2c8>)
 8008f64:	2301      	movs	r3, #1
 8008f66:	6093      	str	r3, [r2, #8]
 8008f68:	6893      	ldr	r3, [r2, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1fc      	bne.n	8008f68 <ai_platform_network_init+0x2a0>
 8008f6e:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <ai_platform_network_init+0x2cc>)
 8008f70:	6013      	str	r3, [r2, #0]
 8008f72:	4b09      	ldr	r3, [pc, #36]	; (8008f98 <ai_platform_network_init+0x2d0>)
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	f43f aede 	beq.w	8008d38 <ai_platform_network_init+0x70>
 8008f7c:	e7fe      	b.n	8008f7c <ai_platform_network_init+0x2b4>
 8008f7e:	bf00      	nop
 8008f80:	a1c00100 	.word	0xa1c00100
 8008f84:	e0042000 	.word	0xe0042000
 8008f88:	5c001000 	.word	0x5c001000
 8008f8c:	a1facade 	.word	0xa1facade
 8008f90:	40023000 	.word	0x40023000
 8008f94:	f407a5c2 	.word	0xf407a5c2
 8008f98:	b5e8b5cd 	.word	0xb5e8b5cd
 8008f9c:	58024000 	.word	0x58024000
 8008fa0:	2213      	movs	r2, #19
 8008fa2:	2116      	movs	r1, #22
 8008fa4:	f104 0010 	add.w	r0, r4, #16
 8008fa8:	f000 fc38 	bl	800981c <core_set_error>
 8008fac:	e73a      	b.n	8008e24 <ai_platform_network_init+0x15c>
 8008fae:	4607      	mov	r7, r0
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	4684      	mov	ip, r0
 8008fb4:	e773      	b.n	8008e9e <ai_platform_network_init+0x1d6>
 8008fb6:	f1b9 0f00 	cmp.w	r9, #0
 8008fba:	d002      	beq.n	8008fc2 <ai_platform_network_init+0x2fa>
 8008fbc:	f04f 0c01 	mov.w	ip, #1
 8008fc0:	e7a7      	b.n	8008f12 <ai_platform_network_init+0x24a>
 8008fc2:	2110      	movs	r1, #16
 8008fc4:	2213      	movs	r2, #19
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	1860      	adds	r0, r4, r1
 8008fca:	f000 fc27 	bl	800981c <core_set_error>
 8008fce:	e729      	b.n	8008e24 <ai_platform_network_init+0x15c>
 8008fd0:	2110      	movs	r1, #16
 8008fd2:	2211      	movs	r2, #17
 8008fd4:	462e      	mov	r6, r5
 8008fd6:	1860      	adds	r0, r4, r1
 8008fd8:	f000 fc20 	bl	800981c <core_set_error>
 8008fdc:	e722      	b.n	8008e24 <ai_platform_network_init+0x15c>
 8008fde:	2110      	movs	r1, #16
 8008fe0:	2212      	movs	r2, #18
 8008fe2:	1860      	adds	r0, r4, r1
 8008fe4:	f000 fc1a 	bl	800981c <core_set_error>
 8008fe8:	e71c      	b.n	8008e24 <ai_platform_network_init+0x15c>
 8008fea:	4666      	mov	r6, ip
 8008fec:	e6b7      	b.n	8008d5e <ai_platform_network_init+0x96>
 8008fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ff0:	6a26      	ldr	r6, [r4, #32]
 8008ff2:	2701      	movs	r7, #1
 8008ff4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ffa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8008ffe:	e74e      	b.n	8008e9e <ai_platform_network_init+0x1d6>

08009000 <ai_platform_network_post_init>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	2800      	cmp	r0, #0
 8009004:	d04e      	beq.n	80090a4 <ai_platform_network_post_init+0xa4>
 8009006:	4b8c      	ldr	r3, [pc, #560]	; (8009238 <ai_platform_network_post_init+0x238>)
 8009008:	4604      	mov	r4, r0
 800900a:	6802      	ldr	r2, [r0, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d149      	bne.n	80090a4 <ai_platform_network_post_init+0xa4>
 8009010:	f7fe ff8c 	bl	8007f2c <_ai_platform_acquire_crc>
 8009014:	4b89      	ldr	r3, [pc, #548]	; (800923c <ai_platform_network_post_init+0x23c>)
 8009016:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009020:	189a      	adds	r2, r3, r2
 8009022:	2a01      	cmp	r2, #1
 8009024:	f240 8095 	bls.w	8009152 <ai_platform_network_post_init+0x152>
 8009028:	f240 4249 	movw	r2, #1097	; 0x449
 800902c:	4293      	cmp	r3, r2
 800902e:	f000 8090 	beq.w	8009152 <ai_platform_network_post_init+0x152>
 8009032:	4a83      	ldr	r2, [pc, #524]	; (8009240 <ai_platform_network_post_init+0x240>)
 8009034:	6813      	ldr	r3, [r2, #0]
 8009036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800903a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800903e:	f000 8096 	beq.w	800916e <ai_platform_network_post_init+0x16e>
 8009042:	6813      	ldr	r3, [r2, #0]
 8009044:	f240 4183 	movw	r1, #1155	; 0x483
 8009048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800904c:	428b      	cmp	r3, r1
 800904e:	f000 80b8 	beq.w	80091c2 <ai_platform_network_post_init+0x1c2>
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009058:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800905c:	f000 80de 	beq.w	800921c <ai_platform_network_post_init+0x21c>
 8009060:	6813      	ldr	r3, [r2, #0]
 8009062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 80bd 	beq.w	80091e6 <ai_platform_network_post_init+0x1e6>
 800906c:	f7fe ff60 	bl	8007f30 <_ai_platform_release_crc>
 8009070:	68e3      	ldr	r3, [r4, #12]
 8009072:	f013 0502 	ands.w	r5, r3, #2
 8009076:	f000 808c 	beq.w	8009192 <ai_platform_network_post_init+0x192>
 800907a:	4620      	mov	r0, r4
 800907c:	f000 fc10 	bl	80098a0 <ai_layers_post_init_all>
 8009080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009082:	b16b      	cbz	r3, 80090a0 <ai_platform_network_post_init+0xa0>
 8009084:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009086:	e007      	b.n	8009098 <ai_platform_network_post_init+0x98>
 8009088:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800908c:	4798      	blx	r3
 800908e:	692b      	ldr	r3, [r5, #16]
 8009090:	b133      	cbz	r3, 80090a0 <ai_platform_network_post_init+0xa0>
 8009092:	42ab      	cmp	r3, r5
 8009094:	461d      	mov	r5, r3
 8009096:	d003      	beq.n	80090a0 <ai_platform_network_post_init+0xa0>
 8009098:	4629      	mov	r1, r5
 800909a:	2000      	movs	r0, #0
 800909c:	2d00      	cmp	r5, #0
 800909e:	d1f3      	bne.n	8009088 <ai_platform_network_post_init+0x88>
 80090a0:	2001      	movs	r0, #1
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	f7fe ff42 	bl	8007f2c <_ai_platform_acquire_crc>
 80090a8:	4b64      	ldr	r3, [pc, #400]	; (800923c <ai_platform_network_post_init+0x23c>)
 80090aa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090b4:	185a      	adds	r2, r3, r1
 80090b6:	2a01      	cmp	r2, #1
 80090b8:	d92a      	bls.n	8009110 <ai_platform_network_post_init+0x110>
 80090ba:	f240 4249 	movw	r2, #1097	; 0x449
 80090be:	4293      	cmp	r3, r2
 80090c0:	d026      	beq.n	8009110 <ai_platform_network_post_init+0x110>
 80090c2:	4a5f      	ldr	r2, [pc, #380]	; (8009240 <ai_platform_network_post_init+0x240>)
 80090c4:	6813      	ldr	r3, [r2, #0]
 80090c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090ca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80090ce:	d02c      	beq.n	800912a <ai_platform_network_post_init+0x12a>
 80090d0:	6813      	ldr	r3, [r2, #0]
 80090d2:	f240 4183 	movw	r1, #1155	; 0x483
 80090d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090da:	428b      	cmp	r3, r1
 80090dc:	d060      	beq.n	80091a0 <ai_platform_network_post_init+0x1a0>
 80090de:	6813      	ldr	r3, [r2, #0]
 80090e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80090e8:	f000 808b 	beq.w	8009202 <ai_platform_network_post_init+0x202>
 80090ec:	6813      	ldr	r3, [r2, #0]
 80090ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d129      	bne.n	800914a <ai_platform_network_post_init+0x14a>
 80090f6:	4a53      	ldr	r2, [pc, #332]	; (8009244 <ai_platform_network_post_init+0x244>)
 80090f8:	2301      	movs	r3, #1
 80090fa:	6093      	str	r3, [r2, #8]
 80090fc:	6893      	ldr	r3, [r2, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1fc      	bne.n	80090fc <ai_platform_network_post_init+0xfc>
 8009102:	4951      	ldr	r1, [pc, #324]	; (8009248 <ai_platform_network_post_init+0x248>)
 8009104:	4b51      	ldr	r3, [pc, #324]	; (800924c <ai_platform_network_post_init+0x24c>)
 8009106:	6011      	str	r1, [r2, #0]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d01d      	beq.n	800914a <ai_platform_network_post_init+0x14a>
 800910e:	e7fe      	b.n	800910e <ai_platform_network_post_init+0x10e>
 8009110:	4a4c      	ldr	r2, [pc, #304]	; (8009244 <ai_platform_network_post_init+0x244>)
 8009112:	2301      	movs	r3, #1
 8009114:	6093      	str	r3, [r2, #8]
 8009116:	6893      	ldr	r3, [r2, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1fc      	bne.n	8009116 <ai_platform_network_post_init+0x116>
 800911c:	494a      	ldr	r1, [pc, #296]	; (8009248 <ai_platform_network_post_init+0x248>)
 800911e:	4b4b      	ldr	r3, [pc, #300]	; (800924c <ai_platform_network_post_init+0x24c>)
 8009120:	6011      	str	r1, [r2, #0]
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d010      	beq.n	800914a <ai_platform_network_post_init+0x14a>
 8009128:	e7fe      	b.n	8009128 <ai_platform_network_post_init+0x128>
 800912a:	4a49      	ldr	r2, [pc, #292]	; (8009250 <ai_platform_network_post_init+0x250>)
 800912c:	2301      	movs	r3, #1
 800912e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009132:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1fb      	bne.n	8009132 <ai_platform_network_post_init+0x132>
 800913a:	4943      	ldr	r1, [pc, #268]	; (8009248 <ai_platform_network_post_init+0x248>)
 800913c:	4b43      	ldr	r3, [pc, #268]	; (800924c <ai_platform_network_post_init+0x24c>)
 800913e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009142:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009146:	429a      	cmp	r2, r3
 8009148:	d110      	bne.n	800916c <ai_platform_network_post_init+0x16c>
 800914a:	f7fe fef1 	bl	8007f30 <_ai_platform_release_crc>
 800914e:	2000      	movs	r0, #0
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	4a3c      	ldr	r2, [pc, #240]	; (8009244 <ai_platform_network_post_init+0x244>)
 8009154:	2301      	movs	r3, #1
 8009156:	6093      	str	r3, [r2, #8]
 8009158:	6893      	ldr	r3, [r2, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1fc      	bne.n	8009158 <ai_platform_network_post_init+0x158>
 800915e:	493a      	ldr	r1, [pc, #232]	; (8009248 <ai_platform_network_post_init+0x248>)
 8009160:	4b3a      	ldr	r3, [pc, #232]	; (800924c <ai_platform_network_post_init+0x24c>)
 8009162:	6011      	str	r1, [r2, #0]
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d080      	beq.n	800906c <ai_platform_network_post_init+0x6c>
 800916a:	e7fe      	b.n	800916a <ai_platform_network_post_init+0x16a>
 800916c:	e7fe      	b.n	800916c <ai_platform_network_post_init+0x16c>
 800916e:	4a38      	ldr	r2, [pc, #224]	; (8009250 <ai_platform_network_post_init+0x250>)
 8009170:	2301      	movs	r3, #1
 8009172:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009176:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1fb      	bne.n	8009176 <ai_platform_network_post_init+0x176>
 800917e:	4932      	ldr	r1, [pc, #200]	; (8009248 <ai_platform_network_post_init+0x248>)
 8009180:	4b32      	ldr	r3, [pc, #200]	; (800924c <ai_platform_network_post_init+0x24c>)
 8009182:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009186:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800918a:	429a      	cmp	r2, r3
 800918c:	f43f af6e 	beq.w	800906c <ai_platform_network_post_init+0x6c>
 8009190:	e7fe      	b.n	8009190 <ai_platform_network_post_init+0x190>
 8009192:	2210      	movs	r2, #16
 8009194:	2111      	movs	r1, #17
 8009196:	18a0      	adds	r0, r4, r2
 8009198:	f000 fb40 	bl	800981c <core_set_error>
 800919c:	4628      	mov	r0, r5
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	4a2b      	ldr	r2, [pc, #172]	; (8009250 <ai_platform_network_post_init+0x250>)
 80091a2:	2301      	movs	r3, #1
 80091a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80091a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1fb      	bne.n	80091a8 <ai_platform_network_post_init+0x1a8>
 80091b0:	4925      	ldr	r1, [pc, #148]	; (8009248 <ai_platform_network_post_init+0x248>)
 80091b2:	4b26      	ldr	r3, [pc, #152]	; (800924c <ai_platform_network_post_init+0x24c>)
 80091b4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80091b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80091bc:	429a      	cmp	r2, r3
 80091be:	d0c4      	beq.n	800914a <ai_platform_network_post_init+0x14a>
 80091c0:	e7fe      	b.n	80091c0 <ai_platform_network_post_init+0x1c0>
 80091c2:	4a23      	ldr	r2, [pc, #140]	; (8009250 <ai_platform_network_post_init+0x250>)
 80091c4:	2301      	movs	r3, #1
 80091c6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80091ca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1fb      	bne.n	80091ca <ai_platform_network_post_init+0x1ca>
 80091d2:	491d      	ldr	r1, [pc, #116]	; (8009248 <ai_platform_network_post_init+0x248>)
 80091d4:	4b1d      	ldr	r3, [pc, #116]	; (800924c <ai_platform_network_post_init+0x24c>)
 80091d6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80091da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80091de:	429a      	cmp	r2, r3
 80091e0:	f43f af44 	beq.w	800906c <ai_platform_network_post_init+0x6c>
 80091e4:	e7fe      	b.n	80091e4 <ai_platform_network_post_init+0x1e4>
 80091e6:	4a17      	ldr	r2, [pc, #92]	; (8009244 <ai_platform_network_post_init+0x244>)
 80091e8:	2301      	movs	r3, #1
 80091ea:	6093      	str	r3, [r2, #8]
 80091ec:	6893      	ldr	r3, [r2, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1fc      	bne.n	80091ec <ai_platform_network_post_init+0x1ec>
 80091f2:	4915      	ldr	r1, [pc, #84]	; (8009248 <ai_platform_network_post_init+0x248>)
 80091f4:	4b15      	ldr	r3, [pc, #84]	; (800924c <ai_platform_network_post_init+0x24c>)
 80091f6:	6011      	str	r1, [r2, #0]
 80091f8:	6812      	ldr	r2, [r2, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	f43f af36 	beq.w	800906c <ai_platform_network_post_init+0x6c>
 8009200:	e7fe      	b.n	8009200 <ai_platform_network_post_init+0x200>
 8009202:	4a10      	ldr	r2, [pc, #64]	; (8009244 <ai_platform_network_post_init+0x244>)
 8009204:	2301      	movs	r3, #1
 8009206:	6093      	str	r3, [r2, #8]
 8009208:	6893      	ldr	r3, [r2, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1fc      	bne.n	8009208 <ai_platform_network_post_init+0x208>
 800920e:	490e      	ldr	r1, [pc, #56]	; (8009248 <ai_platform_network_post_init+0x248>)
 8009210:	4b0e      	ldr	r3, [pc, #56]	; (800924c <ai_platform_network_post_init+0x24c>)
 8009212:	6011      	str	r1, [r2, #0]
 8009214:	6812      	ldr	r2, [r2, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d097      	beq.n	800914a <ai_platform_network_post_init+0x14a>
 800921a:	e7fe      	b.n	800921a <ai_platform_network_post_init+0x21a>
 800921c:	4a09      	ldr	r2, [pc, #36]	; (8009244 <ai_platform_network_post_init+0x244>)
 800921e:	2301      	movs	r3, #1
 8009220:	6093      	str	r3, [r2, #8]
 8009222:	6893      	ldr	r3, [r2, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1fc      	bne.n	8009222 <ai_platform_network_post_init+0x222>
 8009228:	4907      	ldr	r1, [pc, #28]	; (8009248 <ai_platform_network_post_init+0x248>)
 800922a:	4b08      	ldr	r3, [pc, #32]	; (800924c <ai_platform_network_post_init+0x24c>)
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	f43f af1b 	beq.w	800906c <ai_platform_network_post_init+0x6c>
 8009236:	e7fe      	b.n	8009236 <ai_platform_network_post_init+0x236>
 8009238:	a1c00100 	.word	0xa1c00100
 800923c:	e0042000 	.word	0xe0042000
 8009240:	5c001000 	.word	0x5c001000
 8009244:	40023000 	.word	0x40023000
 8009248:	f407a5c2 	.word	0xf407a5c2
 800924c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009250:	58024000 	.word	0x58024000

08009254 <ai_platform_network_process>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	b085      	sub	sp, #20
 800925a:	460e      	mov	r6, r1
 800925c:	4605      	mov	r5, r0
 800925e:	9201      	str	r2, [sp, #4]
 8009260:	b120      	cbz	r0, 800926c <ai_platform_network_process+0x18>
 8009262:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <ai_platform_network_process+0xa0>)
 8009264:	6802      	ldr	r2, [r0, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	bf18      	it	ne
 800926a:	2500      	movne	r5, #0
 800926c:	f7fe fe5e 	bl	8007f2c <_ai_platform_acquire_crc>
 8009270:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <ai_platform_network_process+0xa4>)
 8009272:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800927c:	185a      	adds	r2, r3, r1
 800927e:	2a01      	cmp	r2, #1
 8009280:	d92b      	bls.n	80092da <ai_platform_network_process+0x86>
 8009282:	f240 4249 	movw	r2, #1097	; 0x449
 8009286:	4293      	cmp	r3, r2
 8009288:	d027      	beq.n	80092da <ai_platform_network_process+0x86>
 800928a:	4a1c      	ldr	r2, [pc, #112]	; (80092fc <ai_platform_network_process+0xa8>)
 800928c:	6813      	ldr	r3, [r2, #0]
 800928e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009292:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009296:	d039      	beq.n	800930c <ai_platform_network_process+0xb8>
 8009298:	6813      	ldr	r3, [r2, #0]
 800929a:	f240 4183 	movw	r1, #1155	; 0x483
 800929e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092a2:	428b      	cmp	r3, r1
 80092a4:	f000 819c 	beq.w	80095e0 <ai_platform_network_process+0x38c>
 80092a8:	6813      	ldr	r3, [r2, #0]
 80092aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092ae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80092b2:	f000 8179 	beq.w	80095a8 <ai_platform_network_process+0x354>
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d136      	bne.n	800932e <ai_platform_network_process+0xda>
 80092c0:	4a0f      	ldr	r2, [pc, #60]	; (8009300 <ai_platform_network_process+0xac>)
 80092c2:	2301      	movs	r3, #1
 80092c4:	6093      	str	r3, [r2, #8]
 80092c6:	6893      	ldr	r3, [r2, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1fc      	bne.n	80092c6 <ai_platform_network_process+0x72>
 80092cc:	4b0d      	ldr	r3, [pc, #52]	; (8009304 <ai_platform_network_process+0xb0>)
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <ai_platform_network_process+0xb4>)
 80092d2:	6812      	ldr	r2, [r2, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d02a      	beq.n	800932e <ai_platform_network_process+0xda>
 80092d8:	e7fe      	b.n	80092d8 <ai_platform_network_process+0x84>
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <ai_platform_network_process+0xac>)
 80092dc:	2301      	movs	r3, #1
 80092de:	6093      	str	r3, [r2, #8]
 80092e0:	6893      	ldr	r3, [r2, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1fc      	bne.n	80092e0 <ai_platform_network_process+0x8c>
 80092e6:	4b07      	ldr	r3, [pc, #28]	; (8009304 <ai_platform_network_process+0xb0>)
 80092e8:	6013      	str	r3, [r2, #0]
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <ai_platform_network_process+0xb4>)
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d01d      	beq.n	800932e <ai_platform_network_process+0xda>
 80092f2:	e7fe      	b.n	80092f2 <ai_platform_network_process+0x9e>
 80092f4:	a1c00100 	.word	0xa1c00100
 80092f8:	e0042000 	.word	0xe0042000
 80092fc:	5c001000 	.word	0x5c001000
 8009300:	40023000 	.word	0x40023000
 8009304:	f407a5c2 	.word	0xf407a5c2
 8009308:	b5e8b5cd 	.word	0xb5e8b5cd
 800930c:	4ab0      	ldr	r2, [pc, #704]	; (80095d0 <ai_platform_network_process+0x37c>)
 800930e:	2301      	movs	r3, #1
 8009310:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009314:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1fb      	bne.n	8009314 <ai_platform_network_process+0xc0>
 800931c:	4bad      	ldr	r3, [pc, #692]	; (80095d4 <ai_platform_network_process+0x380>)
 800931e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009322:	4bad      	ldr	r3, [pc, #692]	; (80095d8 <ai_platform_network_process+0x384>)
 8009324:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009328:	429a      	cmp	r2, r3
 800932a:	f040 812b 	bne.w	8009584 <ai_platform_network_process+0x330>
 800932e:	f7fe fdff 	bl	8007f30 <_ai_platform_release_crc>
 8009332:	2d00      	cmp	r5, #0
 8009334:	f000 8172 	beq.w	800961c <ai_platform_network_process+0x3c8>
 8009338:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 8123 	beq.w	8009586 <ai_platform_network_process+0x332>
 8009340:	68eb      	ldr	r3, [r5, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8009348:	f003 0303 	and.w	r3, r3, #3
 800934c:	616a      	str	r2, [r5, #20]
 800934e:	2b03      	cmp	r3, #3
 8009350:	f040 811f 	bne.w	8009592 <ai_platform_network_process+0x33e>
 8009354:	2e00      	cmp	r6, #0
 8009356:	f000 8156 	beq.w	8009606 <ai_platform_network_process+0x3b2>
 800935a:	fab8 f788 	clz	r7, r8
 800935e:	097f      	lsrs	r7, r7, #5
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	f000 814f 	beq.w	8009606 <ai_platform_network_process+0x3b2>
 8009368:	f8b8 3000 	ldrh.w	r3, [r8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 814a 	beq.w	8009606 <ai_platform_network_process+0x3b2>
 8009372:	69b3      	ldr	r3, [r6, #24]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800937a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d072      	beq.n	8009468 <ai_platform_network_process+0x214>
 8009382:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8009386:	2c00      	cmp	r4, #0
 8009388:	d06e      	beq.n	8009468 <ai_platform_network_process+0x214>
 800938a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800938e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8009392:	f8d3 a000 	ldr.w	sl, [r3]
 8009396:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800939a:	f000 8133 	beq.w	8009604 <ai_platform_network_process+0x3b0>
 800939e:	69a3      	ldr	r3, [r4, #24]
 80093a0:	2101      	movs	r1, #1
 80093a2:	4630      	mov	r0, r6
 80093a4:	685d      	ldr	r5, [r3, #4]
 80093a6:	f7fe fd73 	bl	8007e90 <ai_buffer_get_size>
 80093aa:	4285      	cmp	r5, r0
 80093ac:	f0c0 8138 	bcc.w	8009620 <ai_platform_network_process+0x3cc>
 80093b0:	68e0      	ldr	r0, [r4, #12]
 80093b2:	69b1      	ldr	r1, [r6, #24]
 80093b4:	68c2      	ldr	r2, [r0, #12]
 80093b6:	68cb      	ldr	r3, [r1, #12]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	f040 8131 	bne.w	8009620 <ai_platform_network_process+0x3cc>
 80093be:	6882      	ldr	r2, [r0, #8]
 80093c0:	688b      	ldr	r3, [r1, #8]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	f040 812c 	bne.w	8009620 <ai_platform_network_process+0x3cc>
 80093c8:	6842      	ldr	r2, [r0, #4]
 80093ca:	684b      	ldr	r3, [r1, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	f040 8127 	bne.w	8009620 <ai_platform_network_process+0x3cc>
 80093d2:	69a3      	ldr	r3, [r4, #24]
 80093d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093d8:	f002 fea0 	bl	800c11c <ai_array_get_data_byte_size>
 80093dc:	4605      	mov	r5, r0
 80093de:	4620      	mov	r0, r4
 80093e0:	f002 feb2 	bl	800c148 <get_tensor_byte_size>
 80093e4:	4285      	cmp	r5, r0
 80093e6:	f0c0 811b 	bcc.w	8009620 <ai_platform_network_process+0x3cc>
 80093ea:	69a3      	ldr	r3, [r4, #24]
 80093ec:	6818      	ldr	r0, [r3, #0]
 80093ee:	f002 fe01 	bl	800bff4 <ai_array_to_buffer_fmt>
 80093f2:	6833      	ldr	r3, [r6, #0]
 80093f4:	4058      	eors	r0, r3
 80093f6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80093fa:	f040 81c8 	bne.w	800978e <ai_platform_network_process+0x53a>
 80093fe:	6873      	ldr	r3, [r6, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 81bb 	beq.w	800977c <ai_platform_network_process+0x528>
 8009406:	69b3      	ldr	r3, [r6, #24]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 81c8 	beq.w	80097a0 <ai_platform_network_process+0x54c>
 8009410:	9a02      	ldr	r2, [sp, #8]
 8009412:	4620      	mov	r0, r4
 8009414:	3701      	adds	r7, #1
 8009416:	361c      	adds	r6, #28
 8009418:	429a      	cmp	r2, r3
 800941a:	bf38      	it	cc
 800941c:	461a      	movcc	r2, r3
 800941e:	9202      	str	r2, [sp, #8]
 8009420:	f002 fe92 	bl	800c148 <get_tensor_byte_size>
 8009424:	f8c9 0008 	str.w	r0, [r9, #8]
 8009428:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	fb00 f303 	mul.w	r3, r0, r3
 8009432:	f8c9 300c 	str.w	r3, [r9, #12]
 8009436:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800943a:	440b      	add	r3, r1
 800943c:	f8c9 1004 	str.w	r1, [r9, #4]
 8009440:	f84a 300b 	str.w	r3, [sl, fp]
 8009444:	69a0      	ldr	r0, [r4, #24]
 8009446:	6803      	ldr	r3, [r0, #0]
 8009448:	009a      	lsls	r2, r3, #2
 800944a:	f100 80bb 	bmi.w	80095c4 <ai_platform_network_process+0x370>
 800944e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	4419      	add	r1, r3
 8009456:	6081      	str	r1, [r0, #8]
 8009458:	69a3      	ldr	r3, [r4, #24]
 800945a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800945e:	60da      	str	r2, [r3, #12]
 8009460:	f8b8 3000 	ldrh.w	r3, [r8]
 8009464:	42bb      	cmp	r3, r7
 8009466:	d888      	bhi.n	800937a <ai_platform_network_process+0x126>
 8009468:	9d03      	ldr	r5, [sp, #12]
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 819f 	beq.w	80097b2 <ai_platform_network_process+0x55e>
 8009474:	2a01      	cmp	r2, #1
 8009476:	f240 8179 	bls.w	800976c <ai_platform_network_process+0x518>
 800947a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800947e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8172 	beq.w	800976c <ai_platform_network_process+0x518>
 8009488:	9e01      	ldr	r6, [sp, #4]
 800948a:	2700      	movs	r7, #0
 800948c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 80d3 	beq.w	800963c <ai_platform_network_process+0x3e8>
 8009496:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800949a:	2c00      	cmp	r4, #0
 800949c:	f000 80ce 	beq.w	800963c <ai_platform_network_process+0x3e8>
 80094a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80094a4:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80094a8:	f8d3 8000 	ldr.w	r8, [r3]
 80094ac:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80094b0:	f000 819d 	beq.w	80097ee <ai_platform_network_process+0x59a>
 80094b4:	69a3      	ldr	r3, [r4, #24]
 80094b6:	2101      	movs	r1, #1
 80094b8:	4630      	mov	r0, r6
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	9301      	str	r3, [sp, #4]
 80094be:	f7fe fce7 	bl	8007e90 <ai_buffer_get_size>
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	4283      	cmp	r3, r0
 80094c6:	f0c0 8151 	bcc.w	800976c <ai_platform_network_process+0x518>
 80094ca:	68e0      	ldr	r0, [r4, #12]
 80094cc:	69b1      	ldr	r1, [r6, #24]
 80094ce:	68c2      	ldr	r2, [r0, #12]
 80094d0:	68cb      	ldr	r3, [r1, #12]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	f040 814a 	bne.w	800976c <ai_platform_network_process+0x518>
 80094d8:	6882      	ldr	r2, [r0, #8]
 80094da:	688b      	ldr	r3, [r1, #8]
 80094dc:	429a      	cmp	r2, r3
 80094de:	f040 8145 	bne.w	800976c <ai_platform_network_process+0x518>
 80094e2:	6842      	ldr	r2, [r0, #4]
 80094e4:	684b      	ldr	r3, [r1, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	f040 8140 	bne.w	800976c <ai_platform_network_process+0x518>
 80094ec:	69a3      	ldr	r3, [r4, #24]
 80094ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094f2:	f002 fe13 	bl	800c11c <ai_array_get_data_byte_size>
 80094f6:	9001      	str	r0, [sp, #4]
 80094f8:	4620      	mov	r0, r4
 80094fa:	f002 fe25 	bl	800c148 <get_tensor_byte_size>
 80094fe:	9b01      	ldr	r3, [sp, #4]
 8009500:	4283      	cmp	r3, r0
 8009502:	f0c0 8133 	bcc.w	800976c <ai_platform_network_process+0x518>
 8009506:	69a3      	ldr	r3, [r4, #24]
 8009508:	6818      	ldr	r0, [r3, #0]
 800950a:	f002 fd73 	bl	800bff4 <ai_array_to_buffer_fmt>
 800950e:	6833      	ldr	r3, [r6, #0]
 8009510:	4058      	eors	r0, r3
 8009512:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8009516:	f040 815a 	bne.w	80097ce <ai_platform_network_process+0x57a>
 800951a:	6873      	ldr	r3, [r6, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 814e 	beq.w	80097be <ai_platform_network_process+0x56a>
 8009522:	69b3      	ldr	r3, [r6, #24]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8159 	beq.w	80097de <ai_platform_network_process+0x58a>
 800952c:	9a02      	ldr	r2, [sp, #8]
 800952e:	4620      	mov	r0, r4
 8009530:	3701      	adds	r7, #1
 8009532:	361c      	adds	r6, #28
 8009534:	429a      	cmp	r2, r3
 8009536:	bf38      	it	cc
 8009538:	461a      	movcc	r2, r3
 800953a:	9202      	str	r2, [sp, #8]
 800953c:	f002 fe04 	bl	800c148 <get_tensor_byte_size>
 8009540:	f8ca 0008 	str.w	r0, [sl, #8]
 8009544:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	fb00 f303 	mul.w	r3, r0, r3
 800954e:	f8ca 300c 	str.w	r3, [sl, #12]
 8009552:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8009556:	440b      	add	r3, r1
 8009558:	f8ca 1004 	str.w	r1, [sl, #4]
 800955c:	f848 300b 	str.w	r3, [r8, fp]
 8009560:	69a0      	ldr	r0, [r4, #24]
 8009562:	6803      	ldr	r3, [r0, #0]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	d464      	bmi.n	8009632 <ai_platform_network_process+0x3de>
 8009568:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800956c:	1a9b      	subs	r3, r3, r2
 800956e:	4419      	add	r1, r3
 8009570:	6081      	str	r1, [r0, #8]
 8009572:	69a3      	ldr	r3, [r4, #24]
 8009574:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800957e:	429f      	cmp	r7, r3
 8009580:	d384      	bcc.n	800948c <ai_platform_network_process+0x238>
 8009582:	e05b      	b.n	800963c <ai_platform_network_process+0x3e8>
 8009584:	e7fe      	b.n	8009584 <ai_platform_network_process+0x330>
 8009586:	68ea      	ldr	r2, [r5, #12]
 8009588:	616b      	str	r3, [r5, #20]
 800958a:	f002 0203 	and.w	r2, r2, #3
 800958e:	2a03      	cmp	r2, #3
 8009590:	d039      	beq.n	8009606 <ai_platform_network_process+0x3b2>
 8009592:	2230      	movs	r2, #48	; 0x30
 8009594:	2111      	movs	r1, #17
 8009596:	f105 0010 	add.w	r0, r5, #16
 800959a:	2400      	movs	r4, #0
 800959c:	f000 f93e 	bl	800981c <core_set_error>
 80095a0:	4620      	mov	r0, r4
 80095a2:	b005      	add	sp, #20
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	4a0c      	ldr	r2, [pc, #48]	; (80095dc <ai_platform_network_process+0x388>)
 80095aa:	2301      	movs	r3, #1
 80095ac:	6093      	str	r3, [r2, #8]
 80095ae:	6893      	ldr	r3, [r2, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1fc      	bne.n	80095ae <ai_platform_network_process+0x35a>
 80095b4:	4b07      	ldr	r3, [pc, #28]	; (80095d4 <ai_platform_network_process+0x380>)
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <ai_platform_network_process+0x384>)
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	f43f aeb6 	beq.w	800932e <ai_platform_network_process+0xda>
 80095c2:	e7fe      	b.n	80095c2 <ai_platform_network_process+0x36e>
 80095c4:	f8b8 3000 	ldrh.w	r3, [r8]
 80095c8:	429f      	cmp	r7, r3
 80095ca:	f4ff aed6 	bcc.w	800937a <ai_platform_network_process+0x126>
 80095ce:	e74b      	b.n	8009468 <ai_platform_network_process+0x214>
 80095d0:	58024000 	.word	0x58024000
 80095d4:	f407a5c2 	.word	0xf407a5c2
 80095d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80095dc:	40023000 	.word	0x40023000
 80095e0:	4a87      	ldr	r2, [pc, #540]	; (8009800 <ai_platform_network_process+0x5ac>)
 80095e2:	2301      	movs	r3, #1
 80095e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80095e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1fb      	bne.n	80095e8 <ai_platform_network_process+0x394>
 80095f0:	4b84      	ldr	r3, [pc, #528]	; (8009804 <ai_platform_network_process+0x5b0>)
 80095f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80095f6:	4b84      	ldr	r3, [pc, #528]	; (8009808 <ai_platform_network_process+0x5b4>)
 80095f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80095fc:	429a      	cmp	r2, r3
 80095fe:	f43f ae96 	beq.w	800932e <ai_platform_network_process+0xda>
 8009602:	e7fe      	b.n	8009602 <ai_platform_network_process+0x3ae>
 8009604:	9d03      	ldr	r5, [sp, #12]
 8009606:	2400      	movs	r4, #0
 8009608:	2217      	movs	r2, #23
 800960a:	2112      	movs	r1, #18
 800960c:	f105 0010 	add.w	r0, r5, #16
 8009610:	f000 f904 	bl	800981c <core_set_error>
 8009614:	4620      	mov	r0, r4
 8009616:	b005      	add	sp, #20
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	462c      	mov	r4, r5
 800961e:	e7bf      	b.n	80095a0 <ai_platform_network_process+0x34c>
 8009620:	9d03      	ldr	r5, [sp, #12]
 8009622:	2218      	movs	r2, #24
 8009624:	2112      	movs	r1, #18
 8009626:	2400      	movs	r4, #0
 8009628:	f105 0010 	add.w	r0, r5, #16
 800962c:	f000 f8f6 	bl	800981c <core_set_error>
 8009630:	e7b6      	b.n	80095a0 <ai_platform_network_process+0x34c>
 8009632:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009636:	429f      	cmp	r7, r3
 8009638:	f4ff af28 	bcc.w	800948c <ai_platform_network_process+0x238>
 800963c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009640:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8009642:	82ab      	strh	r3, [r5, #20]
 8009644:	2a00      	cmp	r2, #0
 8009646:	f040 808b 	bne.w	8009760 <ai_platform_network_process+0x50c>
 800964a:	4616      	mov	r6, r2
 800964c:	4617      	mov	r7, r2
 800964e:	8aec      	ldrh	r4, [r5, #22]
 8009650:	429c      	cmp	r4, r3
 8009652:	d2a5      	bcs.n	80095a0 <ai_platform_network_process+0x34c>
 8009654:	46ab      	mov	fp, r5
 8009656:	2e00      	cmp	r6, #0
 8009658:	d030      	beq.n	80096bc <ai_platform_network_process+0x468>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	e014      	b.n	800968a <ai_platform_network_process+0x436>
 8009660:	6882      	ldr	r2, [r0, #8]
 8009662:	68c5      	ldr	r5, [r0, #12]
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	1b52      	subs	r2, r2, r5
 8009668:	4413      	add	r3, r2
 800966a:	6083      	str	r3, [r0, #8]
 800966c:	698b      	ldr	r3, [r1, #24]
 800966e:	6862      	ldr	r2, [r4, #4]
 8009670:	60da      	str	r2, [r3, #12]
 8009672:	f859 200a 	ldr.w	r2, [r9, sl]
 8009676:	f108 0801 	add.w	r8, r8, #1
 800967a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800967e:	440b      	add	r3, r1
 8009680:	4293      	cmp	r3, r2
 8009682:	d301      	bcc.n	8009688 <ai_platform_network_process+0x434>
 8009684:	68e3      	ldr	r3, [r4, #12]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	6063      	str	r3, [r4, #4]
 800968a:	8833      	ldrh	r3, [r6, #0]
 800968c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8009690:	4543      	cmp	r3, r8
 8009692:	d913      	bls.n	80096bc <ai_platform_network_process+0x468>
 8009694:	6873      	ldr	r3, [r6, #4]
 8009696:	b18b      	cbz	r3, 80096bc <ai_platform_network_process+0x468>
 8009698:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800969c:	b171      	cbz	r1, 80096bc <ai_platform_network_process+0x468>
 800969e:	6988      	ldr	r0, [r1, #24]
 80096a0:	68b2      	ldr	r2, [r6, #8]
 80096a2:	6803      	ldr	r3, [r0, #0]
 80096a4:	f8d2 9000 	ldr.w	r9, [r2]
 80096a8:	009d      	lsls	r5, r3, #2
 80096aa:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80096ae:	d5d7      	bpl.n	8009660 <ai_platform_network_process+0x40c>
 80096b0:	6881      	ldr	r1, [r0, #8]
 80096b2:	68a2      	ldr	r2, [r4, #8]
 80096b4:	6860      	ldr	r0, [r4, #4]
 80096b6:	f002 fc15 	bl	800bee4 <st_int8_copy>
 80096ba:	e7da      	b.n	8009672 <ai_platform_network_process+0x41e>
 80096bc:	4658      	mov	r0, fp
 80096be:	f000 f903 	bl	80098c8 <ai_layers_forward_all>
 80096c2:	2f00      	cmp	r7, #0
 80096c4:	d03d      	beq.n	8009742 <ai_platform_network_process+0x4ee>
 80096c6:	2400      	movs	r4, #0
 80096c8:	e016      	b.n	80096f8 <ai_platform_network_process+0x4a4>
 80096ca:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80096ce:	f859 100a 	ldr.w	r1, [r9, sl]
 80096d2:	4413      	add	r3, r2
 80096d4:	428b      	cmp	r3, r1
 80096d6:	d302      	bcc.n	80096de <ai_platform_network_process+0x48a>
 80096d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096dc:	1acb      	subs	r3, r1, r3
 80096de:	f8c8 3004 	str.w	r3, [r8, #4]
 80096e2:	6981      	ldr	r1, [r0, #24]
 80096e4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80096e8:	1b52      	subs	r2, r2, r5
 80096ea:	4413      	add	r3, r2
 80096ec:	608b      	str	r3, [r1, #8]
 80096ee:	6983      	ldr	r3, [r0, #24]
 80096f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80096f4:	60da      	str	r2, [r3, #12]
 80096f6:	3401      	adds	r4, #1
 80096f8:	883b      	ldrh	r3, [r7, #0]
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	d921      	bls.n	8009742 <ai_platform_network_process+0x4ee>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	b1fb      	cbz	r3, 8009742 <ai_platform_network_process+0x4ee>
 8009702:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009706:	b1e0      	cbz	r0, 8009742 <ai_platform_network_process+0x4ee>
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800970e:	6983      	ldr	r3, [r0, #24]
 8009710:	f8d2 9000 	ldr.w	r9, [r2]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800971a:	0092      	lsls	r2, r2, #2
 800971c:	d5d5      	bpl.n	80096ca <ai_platform_network_process+0x476>
 800971e:	6898      	ldr	r0, [r3, #8]
 8009720:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8009724:	f002 fbde 	bl	800bee4 <st_int8_copy>
 8009728:	f859 200a 	ldr.w	r2, [r9, sl]
 800972c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8009730:	440b      	add	r3, r1
 8009732:	4293      	cmp	r3, r2
 8009734:	d302      	bcc.n	800973c <ai_platform_network_process+0x4e8>
 8009736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009740:	e7d9      	b.n	80096f6 <ai_platform_network_process+0x4a2>
 8009742:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8009746:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800974a:	3401      	adds	r4, #1
 800974c:	b2a4      	uxth	r4, r4
 800974e:	42a3      	cmp	r3, r4
 8009750:	f8ab 4016 	strh.w	r4, [fp, #22]
 8009754:	f63f af7f 	bhi.w	8009656 <ai_platform_network_process+0x402>
 8009758:	4620      	mov	r0, r4
 800975a:	b005      	add	sp, #20
 800975c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009760:	2a01      	cmp	r2, #1
 8009762:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8009764:	d029      	beq.n	80097ba <ai_platform_network_process+0x566>
 8009766:	f106 070c 	add.w	r7, r6, #12
 800976a:	e770      	b.n	800964e <ai_platform_network_process+0x3fa>
 800976c:	2218      	movs	r2, #24
 800976e:	2113      	movs	r1, #19
 8009770:	f105 0010 	add.w	r0, r5, #16
 8009774:	2400      	movs	r4, #0
 8009776:	f000 f851 	bl	800981c <core_set_error>
 800977a:	e711      	b.n	80095a0 <ai_platform_network_process+0x34c>
 800977c:	9d03      	ldr	r5, [sp, #12]
 800977e:	4604      	mov	r4, r0
 8009780:	2217      	movs	r2, #23
 8009782:	2112      	movs	r1, #18
 8009784:	f105 0010 	add.w	r0, r5, #16
 8009788:	f000 f848 	bl	800981c <core_set_error>
 800978c:	e708      	b.n	80095a0 <ai_platform_network_process+0x34c>
 800978e:	9d03      	ldr	r5, [sp, #12]
 8009790:	2219      	movs	r2, #25
 8009792:	2112      	movs	r1, #18
 8009794:	2400      	movs	r4, #0
 8009796:	f105 0010 	add.w	r0, r5, #16
 800979a:	f000 f83f 	bl	800981c <core_set_error>
 800979e:	e6ff      	b.n	80095a0 <ai_platform_network_process+0x34c>
 80097a0:	9d03      	ldr	r5, [sp, #12]
 80097a2:	4604      	mov	r4, r0
 80097a4:	2221      	movs	r2, #33	; 0x21
 80097a6:	2112      	movs	r1, #18
 80097a8:	f105 0010 	add.w	r0, r5, #16
 80097ac:	f000 f836 	bl	800981c <core_set_error>
 80097b0:	e6f6      	b.n	80095a0 <ai_platform_network_process+0x34c>
 80097b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80097b6:	82ab      	strh	r3, [r5, #20]
 80097b8:	e744      	b.n	8009644 <ai_platform_network_process+0x3f0>
 80097ba:	2700      	movs	r7, #0
 80097bc:	e747      	b.n	800964e <ai_platform_network_process+0x3fa>
 80097be:	4604      	mov	r4, r0
 80097c0:	2217      	movs	r2, #23
 80097c2:	2113      	movs	r1, #19
 80097c4:	f105 0010 	add.w	r0, r5, #16
 80097c8:	f000 f828 	bl	800981c <core_set_error>
 80097cc:	e6e8      	b.n	80095a0 <ai_platform_network_process+0x34c>
 80097ce:	2219      	movs	r2, #25
 80097d0:	2113      	movs	r1, #19
 80097d2:	f105 0010 	add.w	r0, r5, #16
 80097d6:	2400      	movs	r4, #0
 80097d8:	f000 f820 	bl	800981c <core_set_error>
 80097dc:	e6e0      	b.n	80095a0 <ai_platform_network_process+0x34c>
 80097de:	4604      	mov	r4, r0
 80097e0:	2221      	movs	r2, #33	; 0x21
 80097e2:	2113      	movs	r1, #19
 80097e4:	f105 0010 	add.w	r0, r5, #16
 80097e8:	f000 f818 	bl	800981c <core_set_error>
 80097ec:	e6d8      	b.n	80095a0 <ai_platform_network_process+0x34c>
 80097ee:	2217      	movs	r2, #23
 80097f0:	2113      	movs	r1, #19
 80097f2:	f105 0010 	add.w	r0, r5, #16
 80097f6:	4654      	mov	r4, sl
 80097f8:	f000 f810 	bl	800981c <core_set_error>
 80097fc:	e6d0      	b.n	80095a0 <ai_platform_network_process+0x34c>
 80097fe:	bf00      	nop
 8009800:	58024000 	.word	0x58024000
 8009804:	f407a5c2 	.word	0xf407a5c2
 8009808:	b5e8b5cd 	.word	0xb5e8b5cd

0800980c <core_init>:
 800980c:	2001      	movs	r0, #1
 800980e:	4770      	bx	lr

08009810 <core_get_error>:
 8009810:	4603      	mov	r3, r0
 8009812:	2200      	movs	r2, #0
 8009814:	6800      	ldr	r0, [r0, #0]
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop

0800981c <core_set_error>:
 800981c:	4603      	mov	r3, r0
 800981e:	7800      	ldrb	r0, [r0, #0]
 8009820:	b108      	cbz	r0, 8009826 <core_set_error+0xa>
 8009822:	2000      	movs	r0, #0
 8009824:	4770      	bx	lr
 8009826:	7019      	strb	r1, [r3, #0]
 8009828:	2001      	movs	r0, #1
 800982a:	6819      	ldr	r1, [r3, #0]
 800982c:	f362 211f 	bfi	r1, r2, #8, #24
 8009830:	6019      	str	r1, [r3, #0]
 8009832:	4770      	bx	lr

08009834 <ai_check_custom_types>:
 8009834:	b082      	sub	sp, #8
 8009836:	4b12      	ldr	r3, [pc, #72]	; (8009880 <ai_check_custom_types+0x4c>)
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	b118      	cbz	r0, 8009844 <ai_check_custom_types+0x10>
 800983c:	7803      	ldrb	r3, [r0, #0]
 800983e:	2b03      	cmp	r3, #3
 8009840:	d002      	beq.n	8009848 <ai_check_custom_types+0x14>
 8009842:	2000      	movs	r0, #0
 8009844:	b002      	add	sp, #8
 8009846:	4770      	bx	lr
 8009848:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800984c:	4293      	cmp	r3, r2
 800984e:	d004      	beq.n	800985a <ai_check_custom_types+0x26>
 8009850:	2001      	movs	r0, #1
 8009852:	f080 0001 	eor.w	r0, r0, #1
 8009856:	b002      	add	sp, #8
 8009858:	4770      	bx	lr
 800985a:	7842      	ldrb	r2, [r0, #1]
 800985c:	3001      	adds	r0, #1
 800985e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009862:	429a      	cmp	r2, r3
 8009864:	d1f4      	bne.n	8009850 <ai_check_custom_types+0x1c>
 8009866:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800986a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800986e:	429a      	cmp	r2, r3
 8009870:	d1ee      	bne.n	8009850 <ai_check_custom_types+0x1c>
 8009872:	7842      	ldrb	r2, [r0, #1]
 8009874:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009878:	429a      	cmp	r2, r3
 800987a:	d1e9      	bne.n	8009850 <ai_check_custom_types+0x1c>
 800987c:	2000      	movs	r0, #0
 800987e:	e7e8      	b.n	8009852 <ai_check_custom_types+0x1e>
 8009880:	84048403 	.word	0x84048403

08009884 <ai_layers_init_all>:
 8009884:	2100      	movs	r1, #0
 8009886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009888:	b13b      	cbz	r3, 800989a <ai_layers_init_all+0x16>
 800988a:	691a      	ldr	r2, [r3, #16]
 800988c:	3101      	adds	r1, #1
 800988e:	60d8      	str	r0, [r3, #12]
 8009890:	429a      	cmp	r2, r3
 8009892:	4613      	mov	r3, r2
 8009894:	d001      	beq.n	800989a <ai_layers_init_all+0x16>
 8009896:	2a00      	cmp	r2, #0
 8009898:	d1f6      	bne.n	8009888 <ai_layers_init_all+0x4>
 800989a:	4608      	mov	r0, r1
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop

080098a0 <ai_layers_post_init_all>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	2500      	movs	r5, #0
 80098a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80098a6:	b16c      	cbz	r4, 80098c4 <ai_layers_post_init_all+0x24>
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	07db      	lsls	r3, r3, #31
 80098ac:	d504      	bpl.n	80098b8 <ai_layers_post_init_all+0x18>
 80098ae:	6a23      	ldr	r3, [r4, #32]
 80098b0:	4620      	mov	r0, r4
 80098b2:	b10b      	cbz	r3, 80098b8 <ai_layers_post_init_all+0x18>
 80098b4:	3501      	adds	r5, #1
 80098b6:	4798      	blx	r3
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	42a3      	cmp	r3, r4
 80098bc:	461c      	mov	r4, r3
 80098be:	d001      	beq.n	80098c4 <ai_layers_post_init_all+0x24>
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1f0      	bne.n	80098a6 <ai_layers_post_init_all+0x6>
 80098c4:	4628      	mov	r0, r5
 80098c6:	bd38      	pop	{r3, r4, r5, pc}

080098c8 <ai_layers_forward_all>:
 80098c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098cc:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80098d0:	4604      	mov	r4, r0
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	d02a      	beq.n	800992e <ai_layers_forward_all+0x66>
 80098d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80098da:	6381      	str	r1, [r0, #56]	; 0x38
 80098dc:	b319      	cbz	r1, 8009926 <ai_layers_forward_all+0x5e>
 80098de:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80098e0:	2001      	movs	r0, #1
 80098e2:	47c0      	blx	r8
 80098e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80098e6:	b1f6      	cbz	r6, 8009926 <ai_layers_forward_all+0x5e>
 80098e8:	2700      	movs	r7, #0
 80098ea:	4631      	mov	r1, r6
 80098ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80098ee:	2002      	movs	r0, #2
 80098f0:	47c0      	blx	r8
 80098f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80098f4:	4628      	mov	r0, r5
 80098f6:	696b      	ldr	r3, [r5, #20]
 80098f8:	4798      	blx	r3
 80098fa:	692e      	ldr	r6, [r5, #16]
 80098fc:	2003      	movs	r0, #3
 80098fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009900:	42b5      	cmp	r5, r6
 8009902:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009904:	d007      	beq.n	8009916 <ai_layers_forward_all+0x4e>
 8009906:	47c0      	blx	r8
 8009908:	3701      	adds	r7, #1
 800990a:	63a6      	str	r6, [r4, #56]	; 0x38
 800990c:	2e00      	cmp	r6, #0
 800990e:	d1ec      	bne.n	80098ea <ai_layers_forward_all+0x22>
 8009910:	4638      	mov	r0, r7
 8009912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009916:	2003      	movs	r0, #3
 8009918:	3701      	adds	r7, #1
 800991a:	47c0      	blx	r8
 800991c:	2300      	movs	r3, #0
 800991e:	4638      	mov	r0, r7
 8009920:	63a3      	str	r3, [r4, #56]	; 0x38
 8009922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009926:	2700      	movs	r7, #0
 8009928:	4638      	mov	r0, r7
 800992a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8009930:	6385      	str	r5, [r0, #56]	; 0x38
 8009932:	2d00      	cmp	r5, #0
 8009934:	d0f7      	beq.n	8009926 <ai_layers_forward_all+0x5e>
 8009936:	4647      	mov	r7, r8
 8009938:	696b      	ldr	r3, [r5, #20]
 800993a:	4628      	mov	r0, r5
 800993c:	4798      	blx	r3
 800993e:	462b      	mov	r3, r5
 8009940:	692d      	ldr	r5, [r5, #16]
 8009942:	429d      	cmp	r5, r3
 8009944:	d004      	beq.n	8009950 <ai_layers_forward_all+0x88>
 8009946:	3701      	adds	r7, #1
 8009948:	63a5      	str	r5, [r4, #56]	; 0x38
 800994a:	2d00      	cmp	r5, #0
 800994c:	d1f4      	bne.n	8009938 <ai_layers_forward_all+0x70>
 800994e:	e7df      	b.n	8009910 <ai_layers_forward_all+0x48>
 8009950:	2300      	movs	r3, #0
 8009952:	3701      	adds	r7, #1
 8009954:	63a3      	str	r3, [r4, #56]	; 0x38
 8009956:	e7db      	b.n	8009910 <ai_layers_forward_all+0x48>

08009958 <forward_dense>:
 8009958:	6983      	ldr	r3, [r0, #24]
 800995a:	881a      	ldrh	r2, [r3, #0]
 800995c:	2a00      	cmp	r2, #0
 800995e:	f000 80f0 	beq.w	8009b42 <forward_dense+0x1ea>
 8009962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009966:	ed2d 8b02 	vpush	{d8}
 800996a:	6858      	ldr	r0, [r3, #4]
 800996c:	b09b      	sub	sp, #108	; 0x6c
 800996e:	6845      	ldr	r5, [r0, #4]
 8009970:	b105      	cbz	r5, 8009974 <forward_dense+0x1c>
 8009972:	682d      	ldr	r5, [r5, #0]
 8009974:	2a01      	cmp	r2, #1
 8009976:	f000 840a 	beq.w	800a18e <forward_dense+0x836>
 800997a:	6906      	ldr	r6, [r0, #16]
 800997c:	b106      	cbz	r6, 8009980 <forward_dense+0x28>
 800997e:	6836      	ldr	r6, [r6, #0]
 8009980:	2a02      	cmp	r2, #2
 8009982:	f000 80e0 	beq.w	8009b46 <forward_dense+0x1ee>
 8009986:	69c3      	ldr	r3, [r0, #28]
 8009988:	930d      	str	r3, [sp, #52]	; 0x34
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 83f1 	beq.w	800a172 <forward_dense+0x81a>
 8009990:	4619      	mov	r1, r3
 8009992:	8b03      	ldrh	r3, [r0, #24]
 8009994:	6809      	ldr	r1, [r1, #0]
 8009996:	2b01      	cmp	r3, #1
 8009998:	910f      	str	r1, [sp, #60]	; 0x3c
 800999a:	f240 83ec 	bls.w	800a176 <forward_dense+0x81e>
 800999e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	930d      	str	r3, [sp, #52]	; 0x34
 80099a4:	460b      	mov	r3, r1
 80099a6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80099aa:	2a03      	cmp	r2, #3
 80099ac:	68eb      	ldr	r3, [r5, #12]
 80099ae:	68f7      	ldr	r7, [r6, #12]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	687c      	ldr	r4, [r7, #4]
 80099b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80099b6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ba:	4621      	mov	r1, r4
 80099bc:	9419      	str	r4, [sp, #100]	; 0x64
 80099be:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80099c2:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80099c6:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80099ca:	fb01 f404 	mul.w	r4, r1, r4
 80099ce:	fa4e f10c 	asr.w	r1, lr, ip
 80099d2:	9116      	str	r1, [sp, #88]	; 0x58
 80099d4:	f000 83d8 	beq.w	800a188 <forward_dense+0x830>
 80099d8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80099da:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80099de:	2a00      	cmp	r2, #0
 80099e0:	f000 83c2 	beq.w	800a168 <forward_dense+0x810>
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	f000 83be 	beq.w	800a168 <forward_dense+0x810>
 80099ec:	2b04      	cmp	r3, #4
 80099ee:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80099f2:	f000 83a8 	beq.w	800a146 <forward_dense+0x7ee>
 80099f6:	2b08      	cmp	r3, #8
 80099f8:	f000 83a5 	beq.w	800a146 <forward_dense+0x7ee>
 80099fc:	f04f 0a00 	mov.w	sl, #0
 8009a00:	69ab      	ldr	r3, [r5, #24]
 8009a02:	fb07 f404 	mul.w	r4, r7, r4
 8009a06:	69b2      	ldr	r2, [r6, #24]
 8009a08:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8009a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a0e:	6892      	ldr	r2, [r2, #8]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8009a16:	9206      	str	r2, [sp, #24]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	428a      	cmp	r2, r1
 8009a1c:	9110      	str	r1, [sp, #64]	; 0x40
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a22:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8009a26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a2a:	900e      	str	r0, [sp, #56]	; 0x38
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	f080 8380 	bcs.w	800a132 <forward_dense+0x7da>
 8009a32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a34:	4654      	mov	r4, sl
 8009a36:	4bb9      	ldr	r3, [pc, #740]	; (8009d1c <forward_dense+0x3c4>)
 8009a38:	46ca      	mov	sl, r9
 8009a3a:	08d0      	lsrs	r0, r2, #3
 8009a3c:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 8009d20 <forward_dense+0x3c8>
 8009a40:	4413      	add	r3, r2
 8009a42:	9009      	str	r0, [sp, #36]	; 0x24
 8009a44:	0099      	lsls	r1, r3, #2
 8009a46:	f022 0301 	bic.w	r3, r2, #1
 8009a4a:	f002 0201 	and.w	r2, r2, #1
 8009a4e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8009a52:	9118      	str	r1, [sp, #96]	; 0x60
 8009a54:	920a      	str	r2, [sp, #40]	; 0x28
 8009a56:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8009a5a:	9305      	str	r3, [sp, #20]
 8009a5c:	f101 0320 	add.w	r3, r1, #32
 8009a60:	9207      	str	r2, [sp, #28]
 8009a62:	9311      	str	r3, [sp, #68]	; 0x44
 8009a64:	444b      	add	r3, r9
 8009a66:	469b      	mov	fp, r3
 8009a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a72:	b10b      	cbz	r3, 8009a78 <forward_dense+0x120>
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2c00      	cmp	r4, #0
 8009a7a:	f000 834b 	beq.w	800a114 <forward_dense+0x7bc>
 8009a7e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a80:	2904      	cmp	r1, #4
 8009a82:	f000 826a 	beq.w	8009f5a <forward_dense+0x602>
 8009a86:	9903      	ldr	r1, [sp, #12]
 8009a88:	9806      	ldr	r0, [sp, #24]
 8009a8a:	4281      	cmp	r1, r0
 8009a8c:	f240 8356 	bls.w	800a13c <forward_dense+0x7e4>
 8009a90:	4686      	mov	lr, r0
 8009a92:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009a94:	eb00 090a 	add.w	r9, r0, sl
 8009a98:	0941      	lsrs	r1, r0, #5
 8009a9a:	f10a 0004 	add.w	r0, sl, #4
 8009a9e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009aa2:	9012      	str	r0, [sp, #72]	; 0x48
 8009aa4:	1c48      	adds	r0, r1, #1
 8009aa6:	00c9      	lsls	r1, r1, #3
 8009aa8:	3110      	adds	r1, #16
 8009aaa:	9115      	str	r1, [sp, #84]	; 0x54
 8009aac:	00c1      	lsls	r1, r0, #3
 8009aae:	9113      	str	r1, [sp, #76]	; 0x4c
 8009ab0:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8009ab4:	9114      	str	r1, [sp, #80]	; 0x50
 8009ab6:	f1a9 0104 	sub.w	r1, r9, #4
 8009aba:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8009abe:	910c      	str	r1, [sp, #48]	; 0x30
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 8128 	beq.w	8009d16 <forward_dense+0x3be>
 8009ac6:	ecb3 5a01 	vldmia	r3!, {s10}
 8009aca:	f1b9 0f07 	cmp.w	r9, #7
 8009ace:	d83d      	bhi.n	8009b4c <forward_dense+0x1f4>
 8009ad0:	45da      	cmp	sl, fp
 8009ad2:	d211      	bcs.n	8009af8 <forward_dense+0x1a0>
 8009ad4:	eddf 7a92 	vldr	s15, [pc, #584]	; 8009d20 <forward_dense+0x3c8>
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4615      	mov	r5, r2
 8009adc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009ae0:	ecb0 7a01 	vldmia	r0!, {s14}
 8009ae4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009ae8:	4558      	cmp	r0, fp
 8009aea:	edd1 6a00 	vldr	s13, [r1]
 8009aee:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009af2:	d3f3      	bcc.n	8009adc <forward_dense+0x184>
 8009af4:	ee35 5a27 	vadd.f32	s10, s10, s15
 8009af8:	9904      	ldr	r1, [sp, #16]
 8009afa:	ecae 5a01 	vstmia	lr!, {s10}
 8009afe:	440a      	add	r2, r1
 8009b00:	9903      	ldr	r1, [sp, #12]
 8009b02:	458e      	cmp	lr, r1
 8009b04:	d3dc      	bcc.n	8009ac0 <forward_dense+0x168>
 8009b06:	9a06      	ldr	r2, [sp, #24]
 8009b08:	1a8b      	subs	r3, r1, r2
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	3304      	adds	r3, #4
 8009b12:	18d3      	adds	r3, r2, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	9306      	str	r3, [sp, #24]
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b1e:	4413      	add	r3, r2
 8009b20:	9a07      	ldr	r2, [sp, #28]
 8009b22:	4281      	cmp	r1, r0
 8009b24:	9303      	str	r3, [sp, #12]
 8009b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b28:	441a      	add	r2, r3
 8009b2a:	449b      	add	fp, r3
 8009b2c:	9207      	str	r2, [sp, #28]
 8009b2e:	9a05      	ldr	r2, [sp, #20]
 8009b30:	441a      	add	r2, r3
 8009b32:	9205      	str	r2, [sp, #20]
 8009b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b36:	4692      	mov	sl, r2
 8009b38:	f080 82fb 	bcs.w	800a132 <forward_dense+0x7da>
 8009b3c:	441a      	add	r2, r3
 8009b3e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b40:	e793      	b.n	8009a6a <forward_dense+0x112>
 8009b42:	6853      	ldr	r3, [r2, #4]
 8009b44:	deff      	udf	#255	; 0xff
 8009b46:	2300      	movs	r3, #0
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	deff      	udf	#255	; 0xff
 8009b4c:	f002 0103 	and.w	r1, r2, #3
 8009b50:	2902      	cmp	r1, #2
 8009b52:	f000 81e6 	beq.w	8009f22 <forward_dense+0x5ca>
 8009b56:	2903      	cmp	r1, #3
 8009b58:	f000 80e4 	beq.w	8009d24 <forward_dense+0x3cc>
 8009b5c:	2901      	cmp	r1, #1
 8009b5e:	f000 81ef 	beq.w	8009f40 <forward_dense+0x5e8>
 8009b62:	9908      	ldr	r1, [sp, #32]
 8009b64:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8009d20 <forward_dense+0x3c8>
 8009b68:	458a      	cmp	sl, r1
 8009b6a:	f200 82e9 	bhi.w	800a140 <forward_dense+0x7e8>
 8009b6e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009b70:	f102 0108 	add.w	r1, r2, #8
 8009b74:	f10a 0020 	add.w	r0, sl, #32
 8009b78:	18ae      	adds	r6, r5, r2
 8009b7a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009b7e:	3108      	adds	r1, #8
 8009b80:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8009b84:	3020      	adds	r0, #32
 8009b86:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009b8a:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8009b8e:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8009b92:	edd5 7a00 	vldr	s15, [r5]
 8009b96:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8009b9a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009b9e:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8009ba2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009ba6:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8009baa:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8009bae:	edd5 2a00 	vldr	s5, [r5]
 8009bb2:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8009bb6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009bba:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8009bbe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009bc2:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8009bc6:	ed95 3a00 	vldr	s6, [r5]
 8009bca:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8009bce:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009bd2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009bd6:	edd5 3a00 	vldr	s7, [r5]
 8009bda:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009bde:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009be2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009be6:	ed95 4a00 	vldr	s8, [r5]
 8009bea:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8009bee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009bf2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009bf6:	edd5 4a00 	vldr	s9, [r5]
 8009bfa:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009bfe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c02:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8009c06:	edd5 5a00 	vldr	s11, [r5]
 8009c0a:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8009c0e:	428e      	cmp	r6, r1
 8009c10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c14:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009c18:	ed95 6a00 	vldr	s12, [r5]
 8009c1c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c24:	d1a9      	bne.n	8009b7a <forward_dense+0x222>
 8009c26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c28:	1850      	adds	r0, r2, r1
 8009c2a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009c2c:	4559      	cmp	r1, fp
 8009c2e:	d26f      	bcs.n	8009d10 <forward_dense+0x3b8>
 8009c30:	7805      	ldrb	r5, [r0, #0]
 8009c32:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c36:	edd5 7a00 	vldr	s15, [r5]
 8009c3a:	460d      	mov	r5, r1
 8009c3c:	ecf5 6a01 	vldmia	r5!, {s13}
 8009c40:	45ab      	cmp	fp, r5
 8009c42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009c46:	d963      	bls.n	8009d10 <forward_dense+0x3b8>
 8009c48:	7845      	ldrb	r5, [r0, #1]
 8009c4a:	edd1 6a01 	vldr	s13, [r1, #4]
 8009c4e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c52:	edd5 7a00 	vldr	s15, [r5]
 8009c56:	f101 0508 	add.w	r5, r1, #8
 8009c5a:	45ab      	cmp	fp, r5
 8009c5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009c60:	d956      	bls.n	8009d10 <forward_dense+0x3b8>
 8009c62:	7885      	ldrb	r5, [r0, #2]
 8009c64:	edd1 6a02 	vldr	s13, [r1, #8]
 8009c68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c6c:	edd5 7a00 	vldr	s15, [r5]
 8009c70:	f101 050c 	add.w	r5, r1, #12
 8009c74:	45ab      	cmp	fp, r5
 8009c76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009c7a:	d949      	bls.n	8009d10 <forward_dense+0x3b8>
 8009c7c:	78c5      	ldrb	r5, [r0, #3]
 8009c7e:	edd1 6a03 	vldr	s13, [r1, #12]
 8009c82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009c86:	edd5 7a00 	vldr	s15, [r5]
 8009c8a:	f101 0510 	add.w	r5, r1, #16
 8009c8e:	45ab      	cmp	fp, r5
 8009c90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009c94:	d93c      	bls.n	8009d10 <forward_dense+0x3b8>
 8009c96:	7905      	ldrb	r5, [r0, #4]
 8009c98:	edd1 6a04 	vldr	s13, [r1, #16]
 8009c9c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009ca0:	edd5 7a00 	vldr	s15, [r5]
 8009ca4:	f101 0514 	add.w	r5, r1, #20
 8009ca8:	45ab      	cmp	fp, r5
 8009caa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cae:	d92f      	bls.n	8009d10 <forward_dense+0x3b8>
 8009cb0:	7945      	ldrb	r5, [r0, #5]
 8009cb2:	edd1 6a05 	vldr	s13, [r1, #20]
 8009cb6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009cba:	edd5 7a00 	vldr	s15, [r5]
 8009cbe:	f101 0518 	add.w	r5, r1, #24
 8009cc2:	45ab      	cmp	fp, r5
 8009cc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cc8:	d922      	bls.n	8009d10 <forward_dense+0x3b8>
 8009cca:	7985      	ldrb	r5, [r0, #6]
 8009ccc:	edd1 6a06 	vldr	s13, [r1, #24]
 8009cd0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009cd4:	edd5 7a00 	vldr	s15, [r5]
 8009cd8:	f101 051c 	add.w	r5, r1, #28
 8009cdc:	45ab      	cmp	fp, r5
 8009cde:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ce2:	d915      	bls.n	8009d10 <forward_dense+0x3b8>
 8009ce4:	79c5      	ldrb	r5, [r0, #7]
 8009ce6:	edd1 6a07 	vldr	s13, [r1, #28]
 8009cea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009cee:	edd5 7a00 	vldr	s15, [r5]
 8009cf2:	f101 0520 	add.w	r5, r1, #32
 8009cf6:	45ab      	cmp	fp, r5
 8009cf8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009cfc:	d908      	bls.n	8009d10 <forward_dense+0x3b8>
 8009cfe:	edd1 7a08 	vldr	s15, [r1, #32]
 8009d02:	7a01      	ldrb	r1, [r0, #8]
 8009d04:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009d08:	edd1 6a00 	vldr	s13, [r1]
 8009d0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d10:	ee35 5a07 	vadd.f32	s10, s10, s14
 8009d14:	e6f0      	b.n	8009af8 <forward_dense+0x1a0>
 8009d16:	ed9f 5a02 	vldr	s10, [pc, #8]	; 8009d20 <forward_dense+0x3c8>
 8009d1a:	e6d6      	b.n	8009aca <forward_dense+0x172>
 8009d1c:	3ffffff8 	.word	0x3ffffff8
 8009d20:	00000000 	.word	0x00000000
 8009d24:	eeb0 7a48 	vmov.f32	s14, s16
 8009d28:	4650      	mov	r0, sl
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	468c      	mov	ip, r1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8009d34:	ecf6 7a01 	vldmia	r6!, {s15}
 8009d38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009d3c:	edd5 6a00 	vldr	s13, [r5]
 8009d40:	9d08      	ldr	r5, [sp, #32]
 8009d42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009d46:	42ae      	cmp	r6, r5
 8009d48:	d866      	bhi.n	8009e18 <forward_dense+0x4c0>
 8009d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d4c:	f101 0711 	add.w	r7, r1, #17
 8009d50:	3109      	adds	r1, #9
 8009d52:	eba5 0800 	sub.w	r8, r5, r0
 8009d56:	3024      	adds	r0, #36	; 0x24
 8009d58:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8009d5c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8009d60:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8009d64:	3108      	adds	r1, #8
 8009d66:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8009d6a:	3020      	adds	r0, #32
 8009d6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009d70:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8009d74:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8009d78:	edd5 7a00 	vldr	s15, [r5]
 8009d7c:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8009d80:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8009d84:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8009d88:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009d8c:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8009d90:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8009d94:	edd5 2a00 	vldr	s5, [r5]
 8009d98:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8009d9c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009da0:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8009da4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009da8:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8009dac:	ed95 3a00 	vldr	s6, [r5]
 8009db0:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8009db4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009db8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009dbc:	edd5 3a00 	vldr	s7, [r5]
 8009dc0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8009dc4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009dc8:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009dcc:	ed95 4a00 	vldr	s8, [r5]
 8009dd0:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8009dd4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009dd8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009ddc:	edd5 4a00 	vldr	s9, [r5]
 8009de0:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8009de4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009de8:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8009dec:	edd5 5a00 	vldr	s11, [r5]
 8009df0:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8009df4:	428f      	cmp	r7, r1
 8009df6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009dfa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009dfe:	ed95 6a00 	vldr	s12, [r5]
 8009e02:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e0a:	d1a9      	bne.n	8009d60 <forward_dense+0x408>
 8009e0c:	f108 0801 	add.w	r8, r8, #1
 8009e10:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8009e14:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8009e18:	455e      	cmp	r6, fp
 8009e1a:	f4bf af79 	bcs.w	8009d10 <forward_dense+0x3b8>
 8009e1e:	f89c 1000 	ldrb.w	r1, [ip]
 8009e22:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009e26:	edd1 7a00 	vldr	s15, [r1]
 8009e2a:	4631      	mov	r1, r6
 8009e2c:	ecf1 6a01 	vldmia	r1!, {s13}
 8009e30:	458b      	cmp	fp, r1
 8009e32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e36:	f67f af6b 	bls.w	8009d10 <forward_dense+0x3b8>
 8009e3a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8009e3e:	edd6 6a01 	vldr	s13, [r6, #4]
 8009e42:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009e46:	edd1 7a00 	vldr	s15, [r1]
 8009e4a:	f106 0108 	add.w	r1, r6, #8
 8009e4e:	458b      	cmp	fp, r1
 8009e50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e54:	f67f af5c 	bls.w	8009d10 <forward_dense+0x3b8>
 8009e58:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8009e5c:	edd6 6a02 	vldr	s13, [r6, #8]
 8009e60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009e64:	edd1 7a00 	vldr	s15, [r1]
 8009e68:	f106 010c 	add.w	r1, r6, #12
 8009e6c:	458b      	cmp	fp, r1
 8009e6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e72:	f67f af4d 	bls.w	8009d10 <forward_dense+0x3b8>
 8009e76:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8009e7a:	edd6 6a03 	vldr	s13, [r6, #12]
 8009e7e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009e82:	edd1 7a00 	vldr	s15, [r1]
 8009e86:	f106 0110 	add.w	r1, r6, #16
 8009e8a:	458b      	cmp	fp, r1
 8009e8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009e90:	f67f af3e 	bls.w	8009d10 <forward_dense+0x3b8>
 8009e94:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8009e98:	edd6 6a04 	vldr	s13, [r6, #16]
 8009e9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009ea0:	edd1 7a00 	vldr	s15, [r1]
 8009ea4:	f106 0114 	add.w	r1, r6, #20
 8009ea8:	458b      	cmp	fp, r1
 8009eaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009eae:	f67f af2f 	bls.w	8009d10 <forward_dense+0x3b8>
 8009eb2:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8009eb6:	edd6 6a05 	vldr	s13, [r6, #20]
 8009eba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009ebe:	edd1 7a00 	vldr	s15, [r1]
 8009ec2:	f106 0118 	add.w	r1, r6, #24
 8009ec6:	458b      	cmp	fp, r1
 8009ec8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009ecc:	f67f af20 	bls.w	8009d10 <forward_dense+0x3b8>
 8009ed0:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8009ed4:	edd6 6a06 	vldr	s13, [r6, #24]
 8009ed8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009edc:	edd1 7a00 	vldr	s15, [r1]
 8009ee0:	f106 011c 	add.w	r1, r6, #28
 8009ee4:	458b      	cmp	fp, r1
 8009ee6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009eea:	f67f af11 	bls.w	8009d10 <forward_dense+0x3b8>
 8009eee:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8009ef2:	edd6 6a07 	vldr	s13, [r6, #28]
 8009ef6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009efa:	edd1 7a00 	vldr	s15, [r1]
 8009efe:	f106 0120 	add.w	r1, r6, #32
 8009f02:	458b      	cmp	fp, r1
 8009f04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f08:	f67f af02 	bls.w	8009d10 <forward_dense+0x3b8>
 8009f0c:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8009f10:	edd6 7a08 	vldr	s15, [r6, #32]
 8009f14:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8009f18:	edd1 6a00 	vldr	s13, [r1]
 8009f1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f20:	e6f6      	b.n	8009d10 <forward_dense+0x3b8>
 8009f22:	eeb0 7a48 	vmov.f32	s14, s16
 8009f26:	4650      	mov	r0, sl
 8009f28:	4611      	mov	r1, r2
 8009f2a:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009f2e:	ecf0 7a01 	vldmia	r0!, {s15}
 8009f32:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009f36:	edd5 6a00 	vldr	s13, [r5]
 8009f3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009f3e:	e6f5      	b.n	8009d2c <forward_dense+0x3d4>
 8009f40:	4611      	mov	r1, r2
 8009f42:	edda 7a00 	vldr	s15, [sl]
 8009f46:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009f48:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009f4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8009f50:	ed95 7a00 	vldr	s14, [r5]
 8009f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f58:	e7e7      	b.n	8009f2a <forward_dense+0x5d2>
 8009f5a:	9803      	ldr	r0, [sp, #12]
 8009f5c:	9906      	ldr	r1, [sp, #24]
 8009f5e:	4288      	cmp	r0, r1
 8009f60:	f67f adda 	bls.w	8009b18 <forward_dense+0x1c0>
 8009f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f66:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009f6a:	468b      	mov	fp, r1
 8009f6c:	f100 0c01 	add.w	ip, r0, #1
 8009f70:	9805      	ldr	r0, [sp, #20]
 8009f72:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8009f76:	3801      	subs	r0, #1
 8009f78:	9008      	str	r0, [sp, #32]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80bf 	beq.w	800a0fe <forward_dense+0x7a6>
 8009f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f82:	ecf3 2a01 	vldmia	r3!, {s5}
 8009f86:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8009d20 <forward_dense+0x3c8>
 8009f8a:	2900      	cmp	r1, #0
 8009f8c:	f000 80bf 	beq.w	800a10e <forward_dense+0x7b6>
 8009f90:	1d10      	adds	r0, r2, #4
 8009f92:	f10a 0120 	add.w	r1, sl, #32
 8009f96:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8009f9a:	3004      	adds	r0, #4
 8009f9c:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8009fa0:	3120      	adds	r1, #32
 8009fa2:	f007 0e0f 	and.w	lr, r7, #15
 8009fa6:	093f      	lsrs	r7, r7, #4
 8009fa8:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8009fac:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8009fb0:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8009fb4:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009fb8:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8009fbc:	edde 7a00 	vldr	s15, [lr]
 8009fc0:	ed97 3a00 	vldr	s6, [r7]
 8009fc4:	0937      	lsrs	r7, r6, #4
 8009fc6:	ee67 7a82 	vmul.f32	s15, s15, s4
 8009fca:	f006 060f 	and.w	r6, r6, #15
 8009fce:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009fd2:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8009fd6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009fda:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8009fde:	eee3 7a04 	vfma.f32	s15, s6, s8
 8009fe2:	ed97 3a00 	vldr	s6, [r7]
 8009fe6:	ed96 4a00 	vldr	s8, [r6]
 8009fea:	092e      	lsrs	r6, r5, #4
 8009fec:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8009ff0:	f005 050f 	and.w	r5, r5, #15
 8009ff4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009ff8:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 8009ffc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a000:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800a004:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800a008:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a00c:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a010:	ed96 4a00 	vldr	s8, [r6]
 800a014:	ed95 5a00 	vldr	s10, [r5]
 800a018:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800a01c:	4560      	cmp	r0, ip
 800a01e:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800a022:	f005 050f 	and.w	r5, r5, #15
 800a026:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a02a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a02e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a032:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a036:	ed96 5a00 	vldr	s10, [r6]
 800a03a:	ed95 6a00 	vldr	s12, [r5]
 800a03e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a042:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a04a:	d1a4      	bne.n	8009f96 <forward_dense+0x63e>
 800a04c:	f1ac 0804 	sub.w	r8, ip, #4
 800a050:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800a054:	9905      	ldr	r1, [sp, #20]
 800a056:	458e      	cmp	lr, r1
 800a058:	d229      	bcs.n	800a0ae <forward_dense+0x756>
 800a05a:	9908      	ldr	r1, [sp, #32]
 800a05c:	f10e 0008 	add.w	r0, lr, #8
 800a060:	f108 36ff 	add.w	r6, r8, #4294967295
 800a064:	eba1 070e 	sub.w	r7, r1, lr
 800a068:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800a06c:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800a070:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a074:	3008      	adds	r0, #8
 800a076:	ed50 5a03 	vldr	s11, [r0, #-12]
 800a07a:	f001 050f 	and.w	r5, r1, #15
 800a07e:	0909      	lsrs	r1, r1, #4
 800a080:	ed50 6a04 	vldr	s13, [r0, #-16]
 800a084:	42b7      	cmp	r7, r6
 800a086:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800a08a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a08e:	edd5 7a00 	vldr	s15, [r5]
 800a092:	ed91 6a00 	vldr	s12, [r1]
 800a096:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a09a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a09e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0a2:	d1e5      	bne.n	800a070 <forward_dense+0x718>
 800a0a4:	f109 0901 	add.w	r9, r9, #1
 800a0a8:	44c8      	add	r8, r9
 800a0aa:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800a0ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0b0:	b1c1      	cbz	r1, 800a0e4 <forward_dense+0x78c>
 800a0b2:	f898 1000 	ldrb.w	r1, [r8]
 800a0b6:	edde 7a00 	vldr	s15, [lr]
 800a0ba:	0909      	lsrs	r1, r1, #4
 800a0bc:	9804      	ldr	r0, [sp, #16]
 800a0be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800a0c2:	4402      	add	r2, r0
 800a0c4:	4484      	add	ip, r0
 800a0c6:	edd1 6a00 	vldr	s13, [r1]
 800a0ca:	9903      	ldr	r1, [sp, #12]
 800a0cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a0d0:	ee72 2a87 	vadd.f32	s5, s5, s14
 800a0d4:	eceb 2a01 	vstmia	fp!, {s5}
 800a0d8:	4559      	cmp	r1, fp
 800a0da:	f63f af4e 	bhi.w	8009f7a <forward_dense+0x622>
 800a0de:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800a0e2:	e510      	b.n	8009b06 <forward_dense+0x1ae>
 800a0e4:	9904      	ldr	r1, [sp, #16]
 800a0e6:	ee32 7a87 	vadd.f32	s14, s5, s14
 800a0ea:	440a      	add	r2, r1
 800a0ec:	448c      	add	ip, r1
 800a0ee:	9903      	ldr	r1, [sp, #12]
 800a0f0:	ecab 7a01 	vstmia	fp!, {s14}
 800a0f4:	458b      	cmp	fp, r1
 800a0f6:	d2f2      	bcs.n	800a0de <forward_dense+0x786>
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f47f af41 	bne.w	8009f80 <forward_dense+0x628>
 800a0fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a100:	eef0 2a48 	vmov.f32	s5, s16
 800a104:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800a194 <forward_dense+0x83c>
 800a108:	2900      	cmp	r1, #0
 800a10a:	f47f af41 	bne.w	8009f90 <forward_dense+0x638>
 800a10e:	46d6      	mov	lr, sl
 800a110:	4690      	mov	r8, r2
 800a112:	e79f      	b.n	800a054 <forward_dense+0x6fc>
 800a114:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a116:	4651      	mov	r1, sl
 800a118:	9d06      	ldr	r5, [sp, #24]
 800a11a:	9001      	str	r0, [sp, #4]
 800a11c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a11e:	9000      	str	r0, [sp, #0]
 800a120:	4628      	mov	r0, r5
 800a122:	f001 fd59 	bl	800bbd8 <forward_lite_dense_if32of32wf32>
 800a126:	462b      	mov	r3, r5
 800a128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12a:	4413      	add	r3, r2
 800a12c:	4619      	mov	r1, r3
 800a12e:	9306      	str	r3, [sp, #24]
 800a130:	e4f2      	b.n	8009b18 <forward_dense+0x1c0>
 800a132:	b01b      	add	sp, #108	; 0x6c
 800a134:	ecbd 8b02 	vpop	{d8}
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	4601      	mov	r1, r0
 800a13e:	e4eb      	b.n	8009b18 <forward_dense+0x1c0>
 800a140:	4651      	mov	r1, sl
 800a142:	4610      	mov	r0, r2
 800a144:	e572      	b.n	8009c2c <forward_dense+0x2d4>
 800a146:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800a14a:	f1b9 0f00 	cmp.w	r9, #0
 800a14e:	d016      	beq.n	800a17e <forward_dense+0x826>
 800a150:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a154:	f001 ffba 	bl	800c0cc <ai_array_get_byte_size>
 800a158:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800a15c:	4602      	mov	r2, r0
 800a15e:	4640      	mov	r0, r8
 800a160:	4651      	mov	r1, sl
 800a162:	f001 febf 	bl	800bee4 <st_int8_copy>
 800a166:	e44b      	b.n	8009a00 <forward_dense+0xa8>
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d00a      	beq.n	800a182 <forward_dense+0x82a>
 800a16c:	f04f 0900 	mov.w	r9, #0
 800a170:	e441      	b.n	80099f6 <forward_dense+0x9e>
 800a172:	930f      	str	r3, [sp, #60]	; 0x3c
 800a174:	e417      	b.n	80099a6 <forward_dense+0x4e>
 800a176:	2300      	movs	r3, #0
 800a178:	930d      	str	r3, [sp, #52]	; 0x34
 800a17a:	460b      	mov	r3, r1
 800a17c:	e413      	b.n	80099a6 <forward_dense+0x4e>
 800a17e:	46c2      	mov	sl, r8
 800a180:	e43e      	b.n	8009a00 <forward_dense+0xa8>
 800a182:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800a186:	e43b      	b.n	8009a00 <forward_dense+0xa8>
 800a188:	2300      	movs	r3, #0
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	deff      	udf	#255	; 0xff
 800a18e:	2300      	movs	r3, #0
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	deff      	udf	#255	; 0xff
 800a194:	00000000 	.word	0x00000000

0800a198 <nl_func_sigmoid_array_f32>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a19e:	ed2d 8b02 	vpush	{d8}
 800a1a2:	698f      	ldr	r7, [r1, #24]
 800a1a4:	4414      	add	r4, r2
 800a1a6:	6981      	ldr	r1, [r0, #24]
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	00a3      	lsls	r3, r4, #2
 800a1ac:	688e      	ldr	r6, [r1, #8]
 800a1ae:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a1b2:	42a2      	cmp	r2, r4
 800a1b4:	d815      	bhi.n	800a1e2 <nl_func_sigmoid_array_f32+0x4a>
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a1bc:	3404      	adds	r4, #4
 800a1be:	441e      	add	r6, r3
 800a1c0:	4625      	mov	r5, r4
 800a1c2:	ed34 0a01 	vldmdb	r4!, {s0}
 800a1c6:	eeb1 0a40 	vneg.f32	s0, s0
 800a1ca:	3d08      	subs	r5, #8
 800a1cc:	f004 ff48 	bl	800f060 <expf>
 800a1d0:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a1d4:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800a1d8:	ed66 7a01 	vstmdb	r6!, {s15}
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	42ab      	cmp	r3, r5
 800a1e0:	d9ee      	bls.n	800a1c0 <nl_func_sigmoid_array_f32+0x28>
 800a1e2:	ecbd 8b02 	vpop	{d8}
 800a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1e8 <nl_func_tanh_array_f32>:
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 800a1ee:	698f      	ldr	r7, [r1, #24]
 800a1f0:	6981      	ldr	r1, [r0, #24]
 800a1f2:	4414      	add	r4, r2
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	688e      	ldr	r6, [r1, #8]
 800a1f8:	00a3      	lsls	r3, r4, #2
 800a1fa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a1fe:	42a2      	cmp	r2, r4
 800a200:	d80d      	bhi.n	800a21e <nl_func_tanh_array_f32+0x36>
 800a202:	3304      	adds	r3, #4
 800a204:	3404      	adds	r4, #4
 800a206:	441e      	add	r6, r3
 800a208:	4625      	mov	r5, r4
 800a20a:	ed34 0a01 	vldmdb	r4!, {s0}
 800a20e:	f004 fda3 	bl	800ed58 <tanhf>
 800a212:	ed26 0a01 	vstmdb	r6!, {s0}
 800a216:	3d08      	subs	r5, #8
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	42ab      	cmp	r3, r5
 800a21c:	d9f4      	bls.n	800a208 <nl_func_tanh_array_f32+0x20>
 800a21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a220 <forward_sm>:
 800a220:	6982      	ldr	r2, [r0, #24]
 800a222:	8813      	ldrh	r3, [r2, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d078      	beq.n	800a31a <forward_sm+0xfa>
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	ed2d 8b04 	vpush	{d8-d9}
 800a230:	6852      	ldr	r2, [r2, #4]
 800a232:	b085      	sub	sp, #20
 800a234:	6854      	ldr	r4, [r2, #4]
 800a236:	b104      	cbz	r4, 800a23a <forward_sm+0x1a>
 800a238:	6824      	ldr	r4, [r4, #0]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d072      	beq.n	800a324 <forward_sm+0x104>
 800a23e:	6913      	ldr	r3, [r2, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d072      	beq.n	800a32a <forward_sm+0x10a>
 800a244:	681e      	ldr	r6, [r3, #0]
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	68e0      	ldr	r0, [r4, #12]
 800a24a:	68f2      	ldr	r2, [r6, #12]
 800a24c:	0a1b      	lsrs	r3, r3, #8
 800a24e:	6845      	ldr	r5, [r0, #4]
 800a250:	6857      	ldr	r7, [r2, #4]
 800a252:	d064      	beq.n	800a31e <forward_sm+0xfe>
 800a254:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a258:	2201      	movs	r2, #1
 800a25a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a25e:	4298      	cmp	r0, r3
 800a260:	fb01 f202 	mul.w	r2, r1, r2
 800a264:	d1f9      	bne.n	800a25a <forward_sm+0x3a>
 800a266:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800a26a:	69a2      	ldr	r2, [r4, #24]
 800a26c:	69b3      	ldr	r3, [r6, #24]
 800a26e:	6892      	ldr	r2, [r2, #8]
 800a270:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800a274:	eb02 0309 	add.w	r3, r2, r9
 800a278:	429a      	cmp	r2, r3
 800a27a:	9301      	str	r3, [sp, #4]
 800a27c:	d248      	bcs.n	800a310 <forward_sm+0xf0>
 800a27e:	00bb      	lsls	r3, r7, #2
 800a280:	2d01      	cmp	r5, #1
 800a282:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800a286:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a28a:	9303      	str	r3, [sp, #12]
 800a28c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800a290:	463e      	mov	r6, r7
 800a292:	ed92 8a00 	vldr	s16, [r2]
 800a296:	9302      	str	r3, [sp, #8]
 800a298:	d937      	bls.n	800a30a <forward_sm+0xea>
 800a29a:	1d13      	adds	r3, r2, #4
 800a29c:	ecf3 7a01 	vldmia	r3!, {s15}
 800a2a0:	429e      	cmp	r6, r3
 800a2a2:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800a2a6:	d1f9      	bne.n	800a29c <forward_sm+0x7c>
 800a2a8:	4692      	mov	sl, r2
 800a2aa:	46c3      	mov	fp, r8
 800a2ac:	46c1      	mov	r9, r8
 800a2ae:	eddf 8a20 	vldr	s17, [pc, #128]	; 800a330 <forward_sm+0x110>
 800a2b2:	2400      	movs	r4, #0
 800a2b4:	ecba 0a01 	vldmia	sl!, {s0}
 800a2b8:	3401      	adds	r4, #1
 800a2ba:	ee30 0a48 	vsub.f32	s0, s0, s16
 800a2be:	f004 fecf 	bl	800f060 <expf>
 800a2c2:	42a5      	cmp	r5, r4
 800a2c4:	ee78 8a80 	vadd.f32	s17, s17, s0
 800a2c8:	eca9 0a01 	vstmia	r9!, {s0}
 800a2cc:	d8f2      	bhi.n	800a2b4 <forward_sm+0x94>
 800a2ce:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d6:	d00b      	beq.n	800a2f0 <forward_sm+0xd0>
 800a2d8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800a2dc:	2300      	movs	r3, #0
 800a2de:	eddb 7a00 	vldr	s15, [fp]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	429d      	cmp	r5, r3
 800a2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ea:	eceb 7a01 	vstmia	fp!, {s15}
 800a2ee:	d8f6      	bhi.n	800a2de <forward_sm+0xbe>
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	463a      	mov	r2, r7
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	4498      	add	r8, r3
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	42b9      	cmp	r1, r7
 800a2fc:	441e      	add	r6, r3
 800a2fe:	d907      	bls.n	800a310 <forward_sm+0xf0>
 800a300:	2d01      	cmp	r5, #1
 800a302:	441f      	add	r7, r3
 800a304:	ed92 8a00 	vldr	s16, [r2]
 800a308:	d8c7      	bhi.n	800a29a <forward_sm+0x7a>
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	d0f0      	beq.n	800a2f0 <forward_sm+0xd0>
 800a30e:	e7cb      	b.n	800a2a8 <forward_sm+0x88>
 800a310:	b005      	add	sp, #20
 800a312:	ecbd 8b04 	vpop	{d8-d9}
 800a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	deff      	udf	#255	; 0xff
 800a31e:	f04f 0904 	mov.w	r9, #4
 800a322:	e7a2      	b.n	800a26a <forward_sm+0x4a>
 800a324:	2300      	movs	r3, #0
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	deff      	udf	#255	; 0xff
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	deff      	udf	#255	; 0xff
 800a32e:	bf00      	nop
 800a330:	00000000 	.word	0x00000000

0800a334 <array_f32_identity>:
 800a334:	6980      	ldr	r0, [r0, #24]
 800a336:	698b      	ldr	r3, [r1, #24]
 800a338:	4298      	cmp	r0, r3
 800a33a:	d004      	beq.n	800a346 <array_f32_identity+0x12>
 800a33c:	68c1      	ldr	r1, [r0, #12]
 800a33e:	0092      	lsls	r2, r2, #2
 800a340:	68d8      	ldr	r0, [r3, #12]
 800a342:	f001 bdcf 	b.w	800bee4 <st_int8_copy>
 800a346:	4770      	bx	lr

0800a348 <forward_lstm>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	ed2d 8b10 	vpush	{d8-d15}
 800a350:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 800a354:	6983      	ldr	r3, [r0, #24]
 800a356:	af00      	add	r7, sp, #0
 800a358:	881a      	ldrh	r2, [r3, #0]
 800a35a:	60b8      	str	r0, [r7, #8]
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	f001 8436 	beq.w	800bbce <forward_lstm+0x1886>
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2a01      	cmp	r2, #1
 800a366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a36a:	f001 8430 	beq.w	800bbce <forward_lstm+0x1886>
 800a36e:	2a02      	cmp	r2, #2
 800a370:	f001 842d 	beq.w	800bbce <forward_lstm+0x1886>
 800a374:	69d8      	ldr	r0, [r3, #28]
 800a376:	2800      	cmp	r0, #0
 800a378:	f001 8420 	beq.w	800bbbc <forward_lstm+0x1874>
 800a37c:	8b1b      	ldrh	r3, [r3, #24]
 800a37e:	6801      	ldr	r1, [r0, #0]
 800a380:	2b01      	cmp	r3, #1
 800a382:	6883      	ldr	r3, [r0, #8]
 800a384:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 800a388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a38c:	bf98      	it	ls
 800a38e:	f04f 0b00 	movls.w	fp, #0
 800a392:	68c3      	ldr	r3, [r0, #12]
 800a394:	bf88      	it	hi
 800a396:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800a39a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a39e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3a6:	b10b      	cbz	r3, 800a3ac <forward_lstm+0x64>
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800a3ae:	466d      	mov	r5, sp
 800a3b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3b4:	68cc      	ldr	r4, [r1, #12]
 800a3b6:	899b      	ldrh	r3, [r3, #12]
 800a3b8:	68b9      	ldr	r1, [r7, #8]
 800a3ba:	f8d1 802c 	ldr.w	r8, [r1, #44]	; 0x2c
 800a3be:	0099      	lsls	r1, r3, #2
 800a3c0:	3107      	adds	r1, #7
 800a3c2:	08c9      	lsrs	r1, r1, #3
 800a3c4:	eba5 05c1 	sub.w	r5, r5, r1, lsl #3
 800a3c8:	46ad      	mov	sp, r5
 800a3ca:	1ddd      	adds	r5, r3, #7
 800a3cc:	466e      	mov	r6, sp
 800a3ce:	08ed      	lsrs	r5, r5, #3
 800a3d0:	eba6 05c5 	sub.w	r5, r6, r5, lsl #3
 800a3d4:	46ad      	mov	sp, r5
 800a3d6:	68e5      	ldr	r5, [r4, #12]
 800a3d8:	6864      	ldr	r4, [r4, #4]
 800a3da:	657d      	str	r5, [r7, #84]	; 0x54
 800a3dc:	67fc      	str	r4, [r7, #124]	; 0x7c
 800a3de:	ea4f 0488 	mov.w	r4, r8, lsl #2
 800a3e2:	ee0f 4a10 	vmov	s30, r4
 800a3e6:	466c      	mov	r4, sp
 800a3e8:	eba4 05c1 	sub.w	r5, r4, r1, lsl #3
 800a3ec:	46ad      	mov	sp, r5
 800a3ee:	eba5 01c1 	sub.w	r1, r5, r1, lsl #3
 800a3f2:	f8c7 d010 	str.w	sp, [r7, #16]
 800a3f6:	468d      	mov	sp, r1
 800a3f8:	46ee      	mov	lr, sp
 800a3fa:	2800      	cmp	r0, #0
 800a3fc:	f001 83d7 	beq.w	800bbae <forward_lstm+0x1866>
 800a400:	6945      	ldr	r5, [r0, #20]
 800a402:	6901      	ldr	r1, [r0, #16]
 800a404:	ee0f 5a90 	vmov	s31, r5
 800a408:	6985      	ldr	r5, [r0, #24]
 800a40a:	65b9      	str	r1, [r7, #88]	; 0x58
 800a40c:	677d      	str	r5, [r7, #116]	; 0x74
 800a40e:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 800a412:	b111      	cbz	r1, 800a41a <forward_lstm+0xd2>
 800a414:	6989      	ldr	r1, [r1, #24]
 800a416:	6889      	ldr	r1, [r1, #8]
 800a418:	65b9      	str	r1, [r7, #88]	; 0x58
 800a41a:	ee1f 1a90 	vmov	r1, s31
 800a41e:	b119      	cbz	r1, 800a428 <forward_lstm+0xe0>
 800a420:	6989      	ldr	r1, [r1, #24]
 800a422:	6889      	ldr	r1, [r1, #8]
 800a424:	ee0f 1a90 	vmov	s31, r1
 800a428:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a42a:	b111      	cbz	r1, 800a432 <forward_lstm+0xea>
 800a42c:	6989      	ldr	r1, [r1, #24]
 800a42e:	6889      	ldr	r1, [r1, #8]
 800a430:	6779      	str	r1, [r7, #116]	; 0x74
 800a432:	f1b9 0f00 	cmp.w	r9, #0
 800a436:	d003      	beq.n	800a440 <forward_lstm+0xf8>
 800a438:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800a43c:	f8d1 9008 	ldr.w	r9, [r1, #8]
 800a440:	b108      	cbz	r0, 800a446 <forward_lstm+0xfe>
 800a442:	6981      	ldr	r1, [r0, #24]
 800a444:	6888      	ldr	r0, [r1, #8]
 800a446:	2a03      	cmp	r2, #3
 800a448:	f001 83c1 	beq.w	800bbce <forward_lstm+0x1886>
 800a44c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a450:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 800a454:	f1ba 0f00 	cmp.w	sl, #0
 800a458:	d001      	beq.n	800a45e <forward_lstm+0x116>
 800a45a:	f8da a000 	ldr.w	sl, [sl]
 800a45e:	4423      	add	r3, r4
 800a460:	4621      	mov	r1, r4
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	f1ae 0404 	sub.w	r4, lr, #4
 800a468:	f8c7 9104 	str.w	r9, [r7, #260]	; 0x104
 800a46c:	3e04      	subs	r6, #4
 800a46e:	f1ce 0e04 	rsb	lr, lr, #4
 800a472:	1f15      	subs	r5, r2, #4
 800a474:	f8d7 c098 	ldr.w	ip, [r7, #152]	; 0x98
 800a478:	4699      	mov	r9, r3
 800a47a:	60fc      	str	r4, [r7, #12]
 800a47c:	e016      	b.n	800a4ac <forward_lstm+0x164>
 800a47e:	4423      	add	r3, r4
 800a480:	f853 200e 	ldr.w	r2, [r3, lr]
 800a484:	b1c2      	cbz	r2, 800a4b8 <forward_lstm+0x170>
 800a486:	68d3      	ldr	r3, [r2, #12]
 800a488:	f846 2f04 	str.w	r2, [r6, #4]!
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	6992      	ldr	r2, [r2, #24]
 800a490:	2b01      	cmp	r3, #1
 800a492:	6893      	ldr	r3, [r2, #8]
 800a494:	f845 3f04 	str.w	r3, [r5, #4]!
 800a498:	bf8c      	ite	hi
 800a49a:	2301      	movhi	r3, #1
 800a49c:	2300      	movls	r3, #0
 800a49e:	f801 3b01 	strb.w	r3, [r1], #1
 800a4a2:	bf8c      	ite	hi
 800a4a4:	4643      	movhi	r3, r8
 800a4a6:	2300      	movls	r3, #0
 800a4a8:	f844 3f04 	str.w	r3, [r4, #4]!
 800a4ac:	4549      	cmp	r1, r9
 800a4ae:	d003      	beq.n	800a4b8 <forward_lstm+0x170>
 800a4b0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e2      	bne.n	800a47e <forward_lstm+0x136>
 800a4b8:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a4bc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800a4c0:	689d      	ldr	r5, [r3, #8]
 800a4c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4c6:	6992      	ldr	r2, [r2, #24]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	f8db 1018 	ldr.w	r1, [fp, #24]
 800a4ce:	6892      	ldr	r2, [r2, #8]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800a4d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a4d8:	69a4      	ldr	r4, [r4, #24]
 800a4da:	688a      	ldr	r2, [r1, #8]
 800a4dc:	ee1f 1a10 	vmov	r1, s30
 800a4e0:	663b      	str	r3, [r7, #96]	; 0x60
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	66ba      	str	r2, [r7, #104]	; 0x68
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	68a2      	ldr	r2, [r4, #8]
 800a4ea:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 800a4ee:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 800a4f2:	f8d7 9104 	ldr.w	r9, [r7, #260]	; 0x104
 800a4f6:	667a      	str	r2, [r7, #100]	; 0x64
 800a4f8:	eb05 0201 	add.w	r2, r5, r1
 800a4fc:	4421      	add	r1, r4
 800a4fe:	67bd      	str	r5, [r7, #120]	; 0x78
 800a500:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a504:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a508:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 800a50c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a510:	607b      	str	r3, [r7, #4]
 800a512:	f041 825a 	bne.w	800b9ca <forward_lstm+0x1682>
 800a516:	4629      	mov	r1, r5
 800a518:	2800      	cmp	r0, #0
 800a51a:	f001 828a 	beq.w	800ba32 <forward_lstm+0x16ea>
 800a51e:	ee1f 2a10 	vmov	r2, s30
 800a522:	f001 fcdf 	bl	800bee4 <st_int8_copy>
 800a526:	4648      	mov	r0, r9
 800a528:	ee1f 2a10 	vmov	r2, s30
 800a52c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a530:	f1b9 0f00 	cmp.w	r9, #0
 800a534:	f001 828b 	beq.w	800ba4e <forward_lstm+0x1706>
 800a538:	f001 fcd4 	bl	800bee4 <st_int8_copy>
 800a53c:	ee1f 2a10 	vmov	r2, s30
 800a540:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a544:	2000      	movs	r0, #0
 800a546:	f001 fc6f 	bl	800be28 <st_int8_fill>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	647b      	str	r3, [r7, #68]	; 0x44
 800a550:	2b00      	cmp	r3, #0
 800a552:	f001 824c 	beq.w	800b9ee <forward_lstm+0x16a6>
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f001 824e 	beq.w	800ba00 <forward_lstm+0x16b8>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	643b      	str	r3, [r7, #64]	; 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f001 8251 	beq.w	800ba12 <forward_lstm+0x16ca>
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 800a576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f001 8253 	beq.w	800ba26 <forward_lstm+0x16de>
 800a580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a582:	3b01      	subs	r3, #1
 800a584:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	673b      	str	r3, [r7, #112]	; 0x70
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a594:	b1b3      	cbz	r3, 800a5c4 <forward_lstm+0x27c>
 800a596:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a59a:	899d      	ldrh	r5, [r3, #12]
 800a59c:	b195      	cbz	r5, 800a5c4 <forward_lstm+0x27c>
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	1e5e      	subs	r6, r3, #1
 800a5aa:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800a5ae:	6811      	ldr	r1, [r2, #0]
 800a5b0:	fb03 f406 	mul.w	r4, r3, r6
 800a5b4:	425b      	negs	r3, r3
 800a5b6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5ba:	6003      	str	r3, [r0, #0]
 800a5bc:	f842 1b04 	str.w	r1, [r2], #4
 800a5c0:	4295      	cmp	r5, r2
 800a5c2:	d1f2      	bne.n	800a5aa <forward_lstm+0x262>
 800a5c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5c6:	fa1f f288 	uxth.w	r2, r8
 800a5ca:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 800a5ce:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800a8e4 <forward_lstm+0x59c>
 800a5d2:	b299      	uxth	r1, r3
 800a5d4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800a5d8:	009d      	lsls	r5, r3, #2
 800a5da:	f1a1 0310 	sub.w	r3, r1, #16
 800a5de:	0096      	lsls	r6, r2, #2
 800a5e0:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800a5e4:	091b      	lsrs	r3, r3, #4
 800a5e6:	fb06 f101 	mul.w	r1, r6, r1
 800a5ea:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	019c      	lsls	r4, r3, #6
 800a5f2:	f1a2 0310 	sub.w	r3, r2, #16
 800a5f6:	fb02 f202 	mul.w	r2, r2, r2
 800a5fa:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800a5fe:	091b      	lsrs	r3, r3, #4
 800a600:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800a604:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 800a608:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800a60a:	f8c7 c0a8 	str.w	ip, [r7, #168]	; 0xa8
 800a60e:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 800a612:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800a614:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 800a618:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 800a61c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800a61e:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
 800a622:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 800a626:	1c5c      	adds	r4, r3, #1
 800a628:	019b      	lsls	r3, r3, #6
 800a62a:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 800a62e:	61fb      	str	r3, [r7, #28]
 800a630:	01a3      	lsls	r3, r4, #6
 800a632:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800a636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a63c:	440b      	add	r3, r1
 800a63e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a642:	440b      	add	r3, r1
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
 800a646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a648:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800a64c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a64e:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 800a652:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800a656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a658:	4633      	mov	r3, r6
 800a65a:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
 800a65e:	1996      	adds	r6, r2, r6
 800a660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a662:	62be      	str	r6, [r7, #40]	; 0x28
 800a664:	18d6      	adds	r6, r2, r3
 800a666:	627e      	str	r6, [r7, #36]	; 0x24
 800a668:	18e6      	adds	r6, r4, r3
 800a66a:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
 800a66e:	6ffe      	ldr	r6, [r7, #124]	; 0x7c
 800a670:	4006      	ands	r6, r0
 800a672:	f8c7 60fc 	str.w	r6, [r7, #252]	; 0xfc
 800a676:	ea08 0600 	and.w	r6, r8, r0
 800a67a:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 800a67e:	f008 060f 	and.w	r6, r8, #15
 800a682:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800a686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a68a:	0089      	lsls	r1, r1, #2
 800a68c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a68e:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800a692:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800a696:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800a698:	61b8      	str	r0, [r7, #24]
 800a69a:	fb05 f101 	mul.w	r1, r5, r1
 800a69e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a6a0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800a6a4:	fb05 f501 	mul.w	r5, r5, r1
 800a6a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a6aa:	4419      	add	r1, r3
 800a6ac:	f8c7 5090 	str.w	r5, [r7, #144]	; 0x90
 800a6b0:	6239      	str	r1, [r7, #32]
 800a6b2:	18d1      	adds	r1, r2, r3
 800a6b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a6b8:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800a6bc:	617b      	str	r3, [r7, #20]
 800a6be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a6c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a6c4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a6ce:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800a6d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6d6:	4b82      	ldr	r3, [pc, #520]	; (800a8e0 <forward_lstm+0x598>)
 800a6d8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800a6dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a6e0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800a6e4:	e9c7 3246 	strd	r3, r2, [r7, #280]	; 0x118
 800a6e8:	e9c7 324a 	strd	r3, r2, [r7, #296]	; 0x128
 800a6ec:	e9c7 324e 	strd	r3, r2, [r7, #312]	; 0x138
 800a6f0:	e9c7 3252 	strd	r3, r2, [r7, #328]	; 0x148
 800a6f4:	e9c7 3256 	strd	r3, r2, [r7, #344]	; 0x158
 800a6f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800a702:	4403      	add	r3, r0
 800a704:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800a708:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 800a70c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a714:	e9c7 1144 	strd	r1, r1, [r7, #272]	; 0x110
 800a718:	e9c7 334c 	strd	r3, r3, [r7, #304]	; 0x130
 800a71c:	e9c7 0050 	strd	r0, r0, [r7, #320]	; 0x140
 800a720:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a724:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800a726:	e9c7 0054 	strd	r0, r0, [r7, #336]	; 0x150
 800a72a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a72e:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 800a732:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800a736:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800a73a:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800a73e:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
 800a742:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800a746:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
 800a74a:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800a74e:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
 800a752:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 800a756:	e9c7 5558 	strd	r5, r5, [r7, #352]	; 0x160
 800a75a:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 800a75e:	2a00      	cmp	r2, #0
 800a760:	f001 81b9 	beq.w	800bad6 <forward_lstm+0x178e>
 800a764:	46a9      	mov	r9, r5
 800a766:	69f8      	ldr	r0, [r7, #28]
 800a768:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800a76a:	469e      	mov	lr, r3
 800a76c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a770:	3080      	adds	r0, #128	; 0x80
 800a772:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 800a776:	46a0      	mov	r8, r4
 800a778:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800a77a:	4410      	add	r0, r2
 800a77c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a77e:	468c      	mov	ip, r1
 800a780:	f8c7 50cc 	str.w	r5, [r7, #204]	; 0xcc
 800a784:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800a786:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800a78a:	f8c7 50d0 	str.w	r5, [r7, #208]	; 0xd0
 800a78e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a792:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
 800a796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a79a:	1955      	adds	r5, r2, r5
 800a79c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a7a0:	f8c7 9080 	str.w	r9, [r7, #128]	; 0x80
 800a7a4:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
 800a7a8:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 800a7ac:	e9d7 b313 	ldrd	fp, r3, [r7, #76]	; 0x4c
 800a7b0:	442a      	add	r2, r5
 800a7b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800a7bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	69ba      	ldr	r2, [r7, #24]
 800a7c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7ca:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a7ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a7d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d6:	f002 020f 	and.w	r2, r2, #15
 800a7da:	469a      	mov	sl, r3
 800a7dc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800a7e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7e4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800a8e4 <forward_lstm+0x59c>
 800a7e8:	ecec 8a01 	vstmia	ip!, {s17}
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f001 815f 	beq.w	800bab0 <forward_lstm+0x1768>
 800a7f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7f6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800a7fa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a7fe:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 800a802:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800a806:	3910      	subs	r1, #16
 800a808:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800a80c:	3340      	adds	r3, #64	; 0x40
 800a80e:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800a812:	290f      	cmp	r1, #15
 800a814:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a818:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800a81c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800a820:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a824:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800a828:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a82c:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 800a830:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800a834:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800a838:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800a83c:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800a840:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800a844:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a848:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800a84c:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800a850:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800a854:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800a858:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800a85c:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800a860:	eeee 7a26 	vfma.f32	s15, s28, s13
 800a864:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800a868:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800a86c:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800a870:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 800a874:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800a878:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800a87c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800a880:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800a884:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800a888:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800a88c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800a890:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800a894:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800a898:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a89c:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800a8a0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800a8a4:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a8a8:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a8ac:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a8b0:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a8b4:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a8b8:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a8bc:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a8c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a8c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a8c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a8cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8d0:	d897      	bhi.n	800a802 <forward_lstm+0x4ba>
 800a8d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8d6:	e9d7 5428 	ldrd	r5, r4, [r7, #160]	; 0xa0
 800a8da:	4453      	add	r3, sl
 800a8dc:	e004      	b.n	800a8e8 <forward_lstm+0x5a0>
 800a8de:	bf00      	nop
 800a8e0:	01821040 	.word	0x01821040
 800a8e4:	00000000 	.word	0x00000000
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	d076      	beq.n	800a9da <forward_lstm+0x692>
 800a8ec:	edd3 6a00 	vldr	s13, [r3]
 800a8f0:	2d01      	cmp	r5, #1
 800a8f2:	edd4 7a00 	vldr	s15, [r4]
 800a8f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8fa:	d06e      	beq.n	800a9da <forward_lstm+0x692>
 800a8fc:	edd4 6a01 	vldr	s13, [r4, #4]
 800a900:	2d02      	cmp	r5, #2
 800a902:	edd3 7a01 	vldr	s15, [r3, #4]
 800a906:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a90a:	d066      	beq.n	800a9da <forward_lstm+0x692>
 800a90c:	edd4 6a02 	vldr	s13, [r4, #8]
 800a910:	2d03      	cmp	r5, #3
 800a912:	edd3 7a02 	vldr	s15, [r3, #8]
 800a916:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a91a:	d05e      	beq.n	800a9da <forward_lstm+0x692>
 800a91c:	edd4 6a03 	vldr	s13, [r4, #12]
 800a920:	2d04      	cmp	r5, #4
 800a922:	edd3 7a03 	vldr	s15, [r3, #12]
 800a926:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a92a:	d056      	beq.n	800a9da <forward_lstm+0x692>
 800a92c:	edd3 6a04 	vldr	s13, [r3, #16]
 800a930:	2d05      	cmp	r5, #5
 800a932:	edd4 7a04 	vldr	s15, [r4, #16]
 800a936:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a93a:	d04e      	beq.n	800a9da <forward_lstm+0x692>
 800a93c:	edd3 6a05 	vldr	s13, [r3, #20]
 800a940:	2d06      	cmp	r5, #6
 800a942:	edd4 7a05 	vldr	s15, [r4, #20]
 800a946:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a94a:	d046      	beq.n	800a9da <forward_lstm+0x692>
 800a94c:	edd3 6a06 	vldr	s13, [r3, #24]
 800a950:	2d07      	cmp	r5, #7
 800a952:	edd4 7a06 	vldr	s15, [r4, #24]
 800a956:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a95a:	d03e      	beq.n	800a9da <forward_lstm+0x692>
 800a95c:	edd3 6a07 	vldr	s13, [r3, #28]
 800a960:	2d08      	cmp	r5, #8
 800a962:	edd4 7a07 	vldr	s15, [r4, #28]
 800a966:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a96a:	d036      	beq.n	800a9da <forward_lstm+0x692>
 800a96c:	edd3 6a08 	vldr	s13, [r3, #32]
 800a970:	2d09      	cmp	r5, #9
 800a972:	edd4 7a08 	vldr	s15, [r4, #32]
 800a976:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a97a:	d02e      	beq.n	800a9da <forward_lstm+0x692>
 800a97c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800a980:	2d0a      	cmp	r5, #10
 800a982:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800a986:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a98a:	d026      	beq.n	800a9da <forward_lstm+0x692>
 800a98c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800a990:	2d0b      	cmp	r5, #11
 800a992:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800a996:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a99a:	d01e      	beq.n	800a9da <forward_lstm+0x692>
 800a99c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800a9a0:	2d0c      	cmp	r5, #12
 800a9a2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800a9a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9aa:	d016      	beq.n	800a9da <forward_lstm+0x692>
 800a9ac:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800a9b0:	f1b5 020d 	subs.w	r2, r5, #13
 800a9b4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800a9b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9bc:	d00d      	beq.n	800a9da <forward_lstm+0x692>
 800a9be:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800a9c2:	2a01      	cmp	r2, #1
 800a9c4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800a9c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9cc:	d005      	beq.n	800a9da <forward_lstm+0x692>
 800a9ce:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800a9d2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800a9d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a9de:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 800a8e4 <forward_lstm+0x59c>
 800a9e2:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f001 805a 	beq.w	800baa0 <forward_lstm+0x1758>
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800a9f4:	3340      	adds	r3, #64	; 0x40
 800a9f6:	3240      	adds	r2, #64	; 0x40
 800a9f8:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800a9fc:	3340      	adds	r3, #64	; 0x40
 800a9fe:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 800aa02:	3240      	adds	r2, #64	; 0x40
 800aa04:	ed13 4a20 	vldr	s8, [r3, #-128]	; 0xffffff80
 800aa08:	ee67 7a86 	vmul.f32	s15, s15, s12
 800aa0c:	ed52 4a20 	vldr	s9, [r2, #-128]	; 0xffffff80
 800aa10:	ed13 5a1e 	vldr	s10, [r3, #-120]	; 0xffffff88
 800aa14:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800aa18:	eee4 7a24 	vfma.f32	s15, s8, s9
 800aa1c:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800aa20:	ed53 ea1d 	vldr	s29, [r3, #-116]	; 0xffffff8c
 800aa24:	ed13 ea1c 	vldr	s28, [r3, #-112]	; 0xffffff90
 800aa28:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800aa2c:	ed13 da1b 	vldr	s26, [r3, #-108]	; 0xffffff94
 800aa30:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800aa34:	eee5 7a25 	vfma.f32	s15, s10, s11
 800aa38:	ed13 ca1a 	vldr	s24, [r3, #-104]	; 0xffffff98
 800aa3c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800aa40:	ed13 ba19 	vldr	s22, [r3, #-100]	; 0xffffff9c
 800aa44:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800aa48:	ed13 aa18 	vldr	s20, [r3, #-96]	; 0xffffffa0
 800aa4c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800aa50:	eeee 7a86 	vfma.f32	s15, s29, s12
 800aa54:	ed13 9a17 	vldr	s18, [r3, #-92]	; 0xffffffa4
 800aa58:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800aa5c:	ed53 0a16 	vldr	s1, [r3, #-88]	; 0xffffffa8
 800aa60:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800aa64:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800aa68:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800aa6c:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800aa70:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800aa74:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800aa78:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800aa7c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800aa80:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 800aa84:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800aa88:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800aa8c:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800aa90:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800aa94:	4298      	cmp	r0, r3
 800aa96:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800aa9a:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800aa9e:	eeea 7a29 	vfma.f32	s15, s20, s19
 800aaa2:	eee9 7a00 	vfma.f32	s15, s18, s0
 800aaa6:	eee0 7a81 	vfma.f32	s15, s1, s2
 800aaaa:	eee1 7a82 	vfma.f32	s15, s3, s4
 800aaae:	eee2 7a83 	vfma.f32	s15, s5, s6
 800aab2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800aab6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800aaba:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aabe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aac2:	d199      	bne.n	800a9f8 <forward_lstm+0x6b0>
 800aac4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aac8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aacc:	189a      	adds	r2, r3, r2
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d078      	beq.n	800abc4 <forward_lstm+0x87c>
 800aad2:	4633      	mov	r3, r6
 800aad4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800aad8:	ed91 6a00 	vldr	s12, [r1]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	edd2 7a00 	vldr	s15, [r2]
 800aae2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aae6:	d06d      	beq.n	800abc4 <forward_lstm+0x87c>
 800aae8:	ed91 6a01 	vldr	s12, [r1, #4]
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	edd2 7a01 	vldr	s15, [r2, #4]
 800aaf2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aaf6:	d065      	beq.n	800abc4 <forward_lstm+0x87c>
 800aaf8:	ed91 6a02 	vldr	s12, [r1, #8]
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	edd2 7a02 	vldr	s15, [r2, #8]
 800ab02:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab06:	d05d      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab08:	ed91 6a03 	vldr	s12, [r1, #12]
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	edd2 7a03 	vldr	s15, [r2, #12]
 800ab12:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab16:	d055      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab18:	ed91 6a04 	vldr	s12, [r1, #16]
 800ab1c:	2b05      	cmp	r3, #5
 800ab1e:	edd2 7a04 	vldr	s15, [r2, #16]
 800ab22:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab26:	d04d      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab28:	ed91 6a05 	vldr	s12, [r1, #20]
 800ab2c:	2b06      	cmp	r3, #6
 800ab2e:	edd2 7a05 	vldr	s15, [r2, #20]
 800ab32:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab36:	d045      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab38:	ed91 6a06 	vldr	s12, [r1, #24]
 800ab3c:	2b07      	cmp	r3, #7
 800ab3e:	edd2 7a06 	vldr	s15, [r2, #24]
 800ab42:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab46:	d03d      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab48:	ed91 6a07 	vldr	s12, [r1, #28]
 800ab4c:	2b08      	cmp	r3, #8
 800ab4e:	edd2 7a07 	vldr	s15, [r2, #28]
 800ab52:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab56:	d035      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab58:	ed91 6a08 	vldr	s12, [r1, #32]
 800ab5c:	2b09      	cmp	r3, #9
 800ab5e:	edd2 7a08 	vldr	s15, [r2, #32]
 800ab62:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab66:	d02d      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab68:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800ab6c:	2b0a      	cmp	r3, #10
 800ab6e:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800ab72:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab76:	d025      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab78:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800ab7c:	2b0b      	cmp	r3, #11
 800ab7e:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800ab82:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab86:	d01d      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab88:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800ab8c:	2b0c      	cmp	r3, #12
 800ab8e:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800ab92:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ab96:	d015      	beq.n	800abc4 <forward_lstm+0x87c>
 800ab98:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800ab9c:	3b0d      	subs	r3, #13
 800ab9e:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800aba2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800aba6:	d00d      	beq.n	800abc4 <forward_lstm+0x87c>
 800aba8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800abac:	2b01      	cmp	r3, #1
 800abae:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800abb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 800abb6:	d005      	beq.n	800abc4 <forward_lstm+0x87c>
 800abb8:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800abbc:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800abc0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800abc4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800abc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abcc:	f8c7 90b4 	str.w	r9, [r7, #180]	; 0xb4
 800abd0:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800abd4:	ecb3 6a01 	vldmia	r3!, {s12}
 800abd8:	edd9 7a00 	vldr	s15, [r9]
 800abdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800abe0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800abe4:	ecf3 6a01 	vldmia	r3!, {s13}
 800abe8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800abec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abf4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800abf8:	ed5f 6ac6 	vldr	s13, [pc, #-792]	; 800a8e4 <forward_lstm+0x59c>
 800abfc:	ed0c 7a01 	vstr	s14, [ip, #-4]
 800ac00:	edc8 8a00 	vstr	s17, [r8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 8747 	beq.w	800ba98 <forward_lstm+0x1750>
 800ac0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac0e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800ac12:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800ac16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac1a:	3340      	adds	r3, #64	; 0x40
 800ac1c:	ed13 7a0f 	vldr	s14, [r3, #-60]	; 0xffffffc4
 800ac20:	3910      	subs	r1, #16
 800ac22:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800ac26:	3340      	adds	r3, #64	; 0x40
 800ac28:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800ac2c:	290f      	cmp	r1, #15
 800ac2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac32:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800ac36:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800ac3a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800ac3e:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800ac42:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ac46:	ed13 7a1d 	vldr	s14, [r3, #-116]	; 0xffffff8c
 800ac4a:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800ac4e:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800ac52:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800ac56:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800ac5a:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800ac5e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ac62:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800ac66:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800ac6a:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800ac6e:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800ac72:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800ac76:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800ac7a:	eeee 7a07 	vfma.f32	s15, s28, s14
 800ac7e:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800ac82:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800ac86:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800ac8a:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 800ac8e:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800ac92:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800ac96:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ac9a:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800ac9e:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800aca2:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800aca6:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800acaa:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800acae:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800acb2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800acb6:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800acba:	ed13 7a11 	vldr	s14, [r3, #-68]	; 0xffffffbc
 800acbe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800acc2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800acc6:	eee9 7a89 	vfma.f32	s15, s19, s18
 800acca:	eee0 7a20 	vfma.f32	s15, s0, s1
 800acce:	eee1 7a21 	vfma.f32	s15, s2, s3
 800acd2:	eee2 7a22 	vfma.f32	s15, s4, s5
 800acd6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800acda:	eee4 7a24 	vfma.f32	s15, s8, s9
 800acde:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ace2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ace6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800acea:	d897      	bhi.n	800ac1c <forward_lstm+0x8d4>
 800acec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800acf4:	4413      	add	r3, r2
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	d076      	beq.n	800ade8 <forward_lstm+0xaa0>
 800acfa:	ed94 7a00 	vldr	s14, [r4]
 800acfe:	2d01      	cmp	r5, #1
 800ad00:	edd3 7a00 	vldr	s15, [r3]
 800ad04:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad08:	d06e      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad0a:	ed94 7a01 	vldr	s14, [r4, #4]
 800ad0e:	2d02      	cmp	r5, #2
 800ad10:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad14:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad18:	d066      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad1a:	ed94 7a02 	vldr	s14, [r4, #8]
 800ad1e:	2d03      	cmp	r5, #3
 800ad20:	edd3 7a02 	vldr	s15, [r3, #8]
 800ad24:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad28:	d05e      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad2a:	ed94 7a03 	vldr	s14, [r4, #12]
 800ad2e:	2d04      	cmp	r5, #4
 800ad30:	edd3 7a03 	vldr	s15, [r3, #12]
 800ad34:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad38:	d056      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad3a:	ed94 7a04 	vldr	s14, [r4, #16]
 800ad3e:	2d05      	cmp	r5, #5
 800ad40:	edd3 7a04 	vldr	s15, [r3, #16]
 800ad44:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad48:	d04e      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad4a:	ed94 7a05 	vldr	s14, [r4, #20]
 800ad4e:	2d06      	cmp	r5, #6
 800ad50:	edd3 7a05 	vldr	s15, [r3, #20]
 800ad54:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad58:	d046      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad5a:	ed94 7a06 	vldr	s14, [r4, #24]
 800ad5e:	2d07      	cmp	r5, #7
 800ad60:	edd3 7a06 	vldr	s15, [r3, #24]
 800ad64:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad68:	d03e      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad6a:	ed94 7a07 	vldr	s14, [r4, #28]
 800ad6e:	2d08      	cmp	r5, #8
 800ad70:	edd3 7a07 	vldr	s15, [r3, #28]
 800ad74:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad78:	d036      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad7a:	ed94 7a08 	vldr	s14, [r4, #32]
 800ad7e:	2d09      	cmp	r5, #9
 800ad80:	edd3 7a08 	vldr	s15, [r3, #32]
 800ad84:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad88:	d02e      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad8a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800ad8e:	2d0a      	cmp	r5, #10
 800ad90:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ad94:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad98:	d026      	beq.n	800ade8 <forward_lstm+0xaa0>
 800ad9a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800ad9e:	2d0b      	cmp	r5, #11
 800ada0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ada4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ada8:	d01e      	beq.n	800ade8 <forward_lstm+0xaa0>
 800adaa:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800adae:	2d0c      	cmp	r5, #12
 800adb0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800adb4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800adb8:	d016      	beq.n	800ade8 <forward_lstm+0xaa0>
 800adba:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800adbe:	f1b5 020d 	subs.w	r2, r5, #13
 800adc2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800adc6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800adca:	d00d      	beq.n	800ade8 <forward_lstm+0xaa0>
 800adcc:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800add0:	2a01      	cmp	r2, #1
 800add2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800add6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800adda:	d005      	beq.n	800ade8 <forward_lstm+0xaa0>
 800addc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ade0:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800ade4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ade8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800adec:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 800b10c <forward_lstm+0xdc4>
 800adf0:	edc8 6a00 	vstr	s13, [r8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 8647 	beq.w	800ba88 <forward_lstm+0x1740>
 800adfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800ae02:	3340      	adds	r3, #64	; 0x40
 800ae04:	3240      	adds	r2, #64	; 0x40
 800ae06:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800ae0a:	3340      	adds	r3, #64	; 0x40
 800ae0c:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 800ae10:	3240      	adds	r2, #64	; 0x40
 800ae12:	ed13 4a20 	vldr	s8, [r3, #-128]	; 0xffffff80
 800ae16:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ae1a:	ed52 4a20 	vldr	s9, [r2, #-128]	; 0xffffff80
 800ae1e:	ed13 5a1e 	vldr	s10, [r3, #-120]	; 0xffffff88
 800ae22:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800ae26:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ae2a:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800ae2e:	ed53 ea1d 	vldr	s29, [r3, #-116]	; 0xffffff8c
 800ae32:	ed13 ea1c 	vldr	s28, [r3, #-112]	; 0xffffff90
 800ae36:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800ae3a:	ed13 da1b 	vldr	s26, [r3, #-108]	; 0xffffff94
 800ae3e:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800ae42:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ae46:	ed13 ca1a 	vldr	s24, [r3, #-104]	; 0xffffff98
 800ae4a:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800ae4e:	ed13 ba19 	vldr	s22, [r3, #-100]	; 0xffffff9c
 800ae52:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800ae56:	ed13 aa18 	vldr	s20, [r3, #-96]	; 0xffffffa0
 800ae5a:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800ae5e:	eeee 7a86 	vfma.f32	s15, s29, s12
 800ae62:	ed13 9a17 	vldr	s18, [r3, #-92]	; 0xffffffa4
 800ae66:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800ae6a:	ed53 0a16 	vldr	s1, [r3, #-88]	; 0xffffffa8
 800ae6e:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800ae72:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800ae76:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800ae7a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800ae7e:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800ae82:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800ae86:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800ae8a:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800ae8e:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 800ae92:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800ae96:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800ae9a:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800ae9e:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800aea2:	4283      	cmp	r3, r0
 800aea4:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800aea8:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800aeac:	eeea 7a29 	vfma.f32	s15, s20, s19
 800aeb0:	eee9 7a00 	vfma.f32	s15, s18, s0
 800aeb4:	eee0 7a81 	vfma.f32	s15, s1, s2
 800aeb8:	eee1 7a82 	vfma.f32	s15, s3, s4
 800aebc:	eee2 7a83 	vfma.f32	s15, s5, s6
 800aec0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800aec4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800aec8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aed0:	d199      	bne.n	800ae06 <forward_lstm+0xabe>
 800aed2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aed6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aeda:	189a      	adds	r2, r3, r2
 800aedc:	2e00      	cmp	r6, #0
 800aede:	d078      	beq.n	800afd2 <forward_lstm+0xc8a>
 800aee0:	4633      	mov	r3, r6
 800aee2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800aee6:	ed91 6a00 	vldr	s12, [r1]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	edd2 7a00 	vldr	s15, [r2]
 800aef0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800aef4:	d06d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800aef6:	ed91 6a01 	vldr	s12, [r1, #4]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	edd2 7a01 	vldr	s15, [r2, #4]
 800af00:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af04:	d065      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af06:	ed91 6a02 	vldr	s12, [r1, #8]
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	edd2 7a02 	vldr	s15, [r2, #8]
 800af10:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af14:	d05d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af16:	ed91 6a03 	vldr	s12, [r1, #12]
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	edd2 7a03 	vldr	s15, [r2, #12]
 800af20:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af24:	d055      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af26:	ed91 6a04 	vldr	s12, [r1, #16]
 800af2a:	2b05      	cmp	r3, #5
 800af2c:	edd2 7a04 	vldr	s15, [r2, #16]
 800af30:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af34:	d04d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af36:	ed91 6a05 	vldr	s12, [r1, #20]
 800af3a:	2b06      	cmp	r3, #6
 800af3c:	edd2 7a05 	vldr	s15, [r2, #20]
 800af40:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af44:	d045      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af46:	ed91 6a06 	vldr	s12, [r1, #24]
 800af4a:	2b07      	cmp	r3, #7
 800af4c:	edd2 7a06 	vldr	s15, [r2, #24]
 800af50:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af54:	d03d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af56:	ed91 6a07 	vldr	s12, [r1, #28]
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	edd2 7a07 	vldr	s15, [r2, #28]
 800af60:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af64:	d035      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af66:	ed91 6a08 	vldr	s12, [r1, #32]
 800af6a:	2b09      	cmp	r3, #9
 800af6c:	edd2 7a08 	vldr	s15, [r2, #32]
 800af70:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af74:	d02d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af76:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800af7a:	2b0a      	cmp	r3, #10
 800af7c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800af80:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af84:	d025      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af86:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800af8a:	2b0b      	cmp	r3, #11
 800af8c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800af90:	eea6 7a27 	vfma.f32	s14, s12, s15
 800af94:	d01d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800af96:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800af9a:	2b0c      	cmp	r3, #12
 800af9c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800afa0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800afa4:	d015      	beq.n	800afd2 <forward_lstm+0xc8a>
 800afa6:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800afaa:	3b0d      	subs	r3, #13
 800afac:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800afb0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800afb4:	d00d      	beq.n	800afd2 <forward_lstm+0xc8a>
 800afb6:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800afba:	2b01      	cmp	r3, #1
 800afbc:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800afc0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800afc4:	d005      	beq.n	800afd2 <forward_lstm+0xc8a>
 800afc6:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800afca:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800afce:	eea6 7a27 	vfma.f32	s14, s12, s15
 800afd2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800afd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afda:	f109 0904 	add.w	r9, r9, #4
 800afde:	ed88 7a00 	vstr	s14, [r8]
 800afe2:	edd3 7a00 	vldr	s15, [r3]
 800afe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afea:	ecb3 6a01 	vldmia	r3!, {s12}
 800afee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aff6:	ecf3 6a01 	vldmia	r3!, {s13}
 800affa:	eee6 6a27 	vfma.f32	s13, s12, s15
 800affe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b006:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b00a:	eca8 7a01 	vstmia	r8!, {s14}
 800b00e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b10c <forward_lstm+0xdc4>
 800b012:	edce 8a00 	vstr	s17, [lr]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 8557 	beq.w	800baca <forward_lstm+0x1782>
 800b01c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b020:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800b024:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b02c:	3340      	adds	r3, #64	; 0x40
 800b02e:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800b032:	3910      	subs	r1, #16
 800b034:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800b038:	3340      	adds	r3, #64	; 0x40
 800b03a:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800b03e:	290f      	cmp	r1, #15
 800b040:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b044:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800b048:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800b04c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800b050:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800b054:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b058:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 800b05c:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800b060:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800b064:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800b068:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800b06c:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800b070:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b074:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800b078:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800b07c:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800b080:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800b084:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800b088:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800b08c:	eeee 7a26 	vfma.f32	s15, s28, s13
 800b090:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800b094:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800b098:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800b09c:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 800b0a0:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800b0a4:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800b0a8:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b0ac:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800b0b0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800b0b4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800b0b8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800b0bc:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800b0c0:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800b0c4:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b0c8:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800b0cc:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800b0d0:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b0d4:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b0d8:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b0dc:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b0e0:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b0e4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b0e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b0ec:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b0f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b0f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b0f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0fc:	d897      	bhi.n	800b02e <forward_lstm+0xce6>
 800b0fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b106:	4413      	add	r3, r2
 800b108:	e002      	b.n	800b110 <forward_lstm+0xdc8>
 800b10a:	bf00      	nop
 800b10c:	00000000 	.word	0x00000000
 800b110:	2d00      	cmp	r5, #0
 800b112:	d076      	beq.n	800b202 <forward_lstm+0xeba>
 800b114:	edd4 6a00 	vldr	s13, [r4]
 800b118:	2d01      	cmp	r5, #1
 800b11a:	edd3 7a00 	vldr	s15, [r3]
 800b11e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b122:	d06e      	beq.n	800b202 <forward_lstm+0xeba>
 800b124:	edd4 6a01 	vldr	s13, [r4, #4]
 800b128:	2d02      	cmp	r5, #2
 800b12a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b12e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b132:	d066      	beq.n	800b202 <forward_lstm+0xeba>
 800b134:	edd4 6a02 	vldr	s13, [r4, #8]
 800b138:	2d03      	cmp	r5, #3
 800b13a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b13e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b142:	d05e      	beq.n	800b202 <forward_lstm+0xeba>
 800b144:	edd4 6a03 	vldr	s13, [r4, #12]
 800b148:	2d04      	cmp	r5, #4
 800b14a:	edd3 7a03 	vldr	s15, [r3, #12]
 800b14e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b152:	d056      	beq.n	800b202 <forward_lstm+0xeba>
 800b154:	edd4 6a04 	vldr	s13, [r4, #16]
 800b158:	2d05      	cmp	r5, #5
 800b15a:	edd3 7a04 	vldr	s15, [r3, #16]
 800b15e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b162:	d04e      	beq.n	800b202 <forward_lstm+0xeba>
 800b164:	edd4 6a05 	vldr	s13, [r4, #20]
 800b168:	2d06      	cmp	r5, #6
 800b16a:	edd3 7a05 	vldr	s15, [r3, #20]
 800b16e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b172:	d046      	beq.n	800b202 <forward_lstm+0xeba>
 800b174:	edd4 6a06 	vldr	s13, [r4, #24]
 800b178:	2d07      	cmp	r5, #7
 800b17a:	edd3 7a06 	vldr	s15, [r3, #24]
 800b17e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b182:	d03e      	beq.n	800b202 <forward_lstm+0xeba>
 800b184:	edd4 6a07 	vldr	s13, [r4, #28]
 800b188:	2d08      	cmp	r5, #8
 800b18a:	edd3 7a07 	vldr	s15, [r3, #28]
 800b18e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b192:	d036      	beq.n	800b202 <forward_lstm+0xeba>
 800b194:	edd4 6a08 	vldr	s13, [r4, #32]
 800b198:	2d09      	cmp	r5, #9
 800b19a:	edd3 7a08 	vldr	s15, [r3, #32]
 800b19e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b1a2:	d02e      	beq.n	800b202 <forward_lstm+0xeba>
 800b1a4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800b1a8:	2d0a      	cmp	r5, #10
 800b1aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b1ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b1b2:	d026      	beq.n	800b202 <forward_lstm+0xeba>
 800b1b4:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800b1b8:	2d0b      	cmp	r5, #11
 800b1ba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b1be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b1c2:	d01e      	beq.n	800b202 <forward_lstm+0xeba>
 800b1c4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800b1c8:	2d0c      	cmp	r5, #12
 800b1ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b1ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b1d2:	d016      	beq.n	800b202 <forward_lstm+0xeba>
 800b1d4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800b1d8:	f1b5 020d 	subs.w	r2, r5, #13
 800b1dc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b1e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b1e4:	d00d      	beq.n	800b202 <forward_lstm+0xeba>
 800b1e6:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800b1ea:	2a01      	cmp	r2, #1
 800b1ec:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b1f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b1f4:	d005      	beq.n	800b202 <forward_lstm+0xeba>
 800b1f6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800b1fa:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800b1fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b202:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b206:	ed5f 6a3f 	vldr	s13, [pc, #-252]	; 800b10c <forward_lstm+0xdc4>
 800b20a:	ed8e 7a00 	vstr	s14, [lr]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 8455 	beq.w	800babe <forward_lstm+0x1776>
 800b214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b218:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 800b21c:	3340      	adds	r3, #64	; 0x40
 800b21e:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800b222:	3340      	adds	r3, #64	; 0x40
 800b224:	ed12 6a0f 	vldr	s12, [r2, #-60]	; 0xffffffc4
 800b228:	3240      	adds	r2, #64	; 0x40
 800b22a:	ed13 4a20 	vldr	s8, [r3, #-128]	; 0xffffff80
 800b22e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b232:	ed52 4a20 	vldr	s9, [r2, #-128]	; 0xffffff80
 800b236:	ed13 5a1e 	vldr	s10, [r3, #-120]	; 0xffffff88
 800b23a:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800b23e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b242:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800b246:	ed53 ea1d 	vldr	s29, [r3, #-116]	; 0xffffff8c
 800b24a:	ed13 ea1c 	vldr	s28, [r3, #-112]	; 0xffffff90
 800b24e:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800b252:	ed13 da1b 	vldr	s26, [r3, #-108]	; 0xffffff94
 800b256:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800b25a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b25e:	ed13 ca1a 	vldr	s24, [r3, #-104]	; 0xffffff98
 800b262:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800b266:	ed13 ba19 	vldr	s22, [r3, #-100]	; 0xffffff9c
 800b26a:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800b26e:	ed13 aa18 	vldr	s20, [r3, #-96]	; 0xffffffa0
 800b272:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800b276:	eeee 7a86 	vfma.f32	s15, s29, s12
 800b27a:	ed13 9a17 	vldr	s18, [r3, #-92]	; 0xffffffa4
 800b27e:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800b282:	ed53 0a16 	vldr	s1, [r3, #-88]	; 0xffffffa8
 800b286:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800b28a:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800b28e:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800b292:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800b296:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800b29a:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800b29e:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 800b2a2:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800b2a6:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 800b2aa:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800b2ae:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800b2b2:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800b2b6:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800b2ba:	4283      	cmp	r3, r0
 800b2bc:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800b2c0:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800b2c4:	eeea 7a29 	vfma.f32	s15, s20, s19
 800b2c8:	eee9 7a00 	vfma.f32	s15, s18, s0
 800b2cc:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b2d0:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b2d4:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b2d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b2dc:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b2e0:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b2e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b2e8:	d199      	bne.n	800b21e <forward_lstm+0xed6>
 800b2ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2ee:	eb0b 0203 	add.w	r2, fp, r3
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	d078      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b2f6:	4633      	mov	r3, r6
 800b2f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b2fc:	ed91 6a00 	vldr	s12, [r1]
 800b300:	2b01      	cmp	r3, #1
 800b302:	edd2 7a00 	vldr	s15, [r2]
 800b306:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b30a:	d06d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b30c:	ed91 6a01 	vldr	s12, [r1, #4]
 800b310:	2b02      	cmp	r3, #2
 800b312:	edd2 7a01 	vldr	s15, [r2, #4]
 800b316:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b31a:	d065      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b31c:	ed91 6a02 	vldr	s12, [r1, #8]
 800b320:	2b03      	cmp	r3, #3
 800b322:	edd2 7a02 	vldr	s15, [r2, #8]
 800b326:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b32a:	d05d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b32c:	ed91 6a03 	vldr	s12, [r1, #12]
 800b330:	2b04      	cmp	r3, #4
 800b332:	edd2 7a03 	vldr	s15, [r2, #12]
 800b336:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b33a:	d055      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b33c:	ed91 6a04 	vldr	s12, [r1, #16]
 800b340:	2b05      	cmp	r3, #5
 800b342:	edd2 7a04 	vldr	s15, [r2, #16]
 800b346:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b34a:	d04d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b34c:	ed91 6a05 	vldr	s12, [r1, #20]
 800b350:	2b06      	cmp	r3, #6
 800b352:	edd2 7a05 	vldr	s15, [r2, #20]
 800b356:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b35a:	d045      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b35c:	ed91 6a06 	vldr	s12, [r1, #24]
 800b360:	2b07      	cmp	r3, #7
 800b362:	edd2 7a06 	vldr	s15, [r2, #24]
 800b366:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b36a:	d03d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b36c:	ed91 6a07 	vldr	s12, [r1, #28]
 800b370:	2b08      	cmp	r3, #8
 800b372:	edd2 7a07 	vldr	s15, [r2, #28]
 800b376:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b37a:	d035      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b37c:	ed91 6a08 	vldr	s12, [r1, #32]
 800b380:	2b09      	cmp	r3, #9
 800b382:	edd2 7a08 	vldr	s15, [r2, #32]
 800b386:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b38a:	d02d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b38c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 800b390:	2b0a      	cmp	r3, #10
 800b392:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800b396:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b39a:	d025      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b39c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 800b3a0:	2b0b      	cmp	r3, #11
 800b3a2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800b3a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b3aa:	d01d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b3ac:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 800b3b0:	2b0c      	cmp	r3, #12
 800b3b2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800b3b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b3ba:	d015      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b3bc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 800b3c0:	3b0d      	subs	r3, #13
 800b3c2:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800b3c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b3ca:	d00d      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b3cc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800b3d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b3da:	d005      	beq.n	800b3e8 <forward_lstm+0x10a0>
 800b3dc:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 800b3e0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800b3e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b3e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b3ec:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b3f0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800b3f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b3f8:	4493      	add	fp, r2
 800b3fa:	4411      	add	r1, r2
 800b3fc:	ed8e 7a00 	vstr	s14, [lr]
 800b400:	449a      	add	sl, r3
 800b402:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800b406:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800b40a:	4419      	add	r1, r3
 800b40c:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 800b410:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800b414:	4411      	add	r1, r2
 800b416:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800b41a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b41e:	4419      	add	r1, r3
 800b420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b424:	ecf3 6a01 	vldmia	r3!, {s13}
 800b428:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800b42c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b430:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b438:	4563      	cmp	r3, ip
 800b43a:	fe87 7a48 	vminnm.f32	s14, s14, s16
 800b43e:	ecae 7a01 	vstmia	lr!, {s14}
 800b442:	f47f a9cd 	bne.w	800a7e0 <forward_lstm+0x498>
 800b446:	f8d7 80b0 	ldr.w	r8, [r7, #176]	; 0xb0
 800b44a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800b44e:	46a3      	mov	fp, r4
 800b450:	ee1f 3a90 	vmov	r3, s31
 800b454:	4642      	mov	r2, r8
 800b456:	4608      	mov	r0, r1
 800b458:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800b45c:	f8d7 a080 	ldr.w	sl, [r7, #128]	; 0x80
 800b460:	47a0      	blx	r4
 800b462:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 800b466:	4642      	mov	r2, r8
 800b468:	ee1f 3a90 	vmov	r3, s31
 800b46c:	4608      	mov	r0, r1
 800b46e:	47a0      	blx	r4
 800b470:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800b474:	4642      	mov	r2, r8
 800b476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b478:	4608      	mov	r0, r1
 800b47a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800b47c:	47a0      	blx	r4
 800b47e:	1e6a      	subs	r2, r5, #1
 800b480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b482:	465c      	mov	r4, fp
 800b484:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800b488:	1eaa      	subs	r2, r5, #2
 800b48a:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 800b48e:	461e      	mov	r6, r3
 800b490:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800b494:	1eea      	subs	r2, r5, #3
 800b496:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800b49a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b49e:	1f2a      	subs	r2, r5, #4
 800b4a0:	f8d7 e0ac 	ldr.w	lr, [r7, #172]	; 0xac
 800b4a4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800b4a8:	1f6a      	subs	r2, r5, #5
 800b4aa:	f8d7 c02c 	ldr.w	ip, [r7, #44]	; 0x2c
 800b4ae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800b4b2:	1faa      	subs	r2, r5, #6
 800b4b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4b6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800b4ba:	1fea      	subs	r2, r5, #7
 800b4bc:	e9d7 8122 	ldrd	r8, r1, [r7, #136]	; 0x88
 800b4c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b4c4:	f1a5 0208 	sub.w	r2, r5, #8
 800b4c8:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800b4cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4d0:	ecf8 7a01 	vldmia	r8!, {s15}
 800b4d4:	ecb3 6a01 	vldmia	r3!, {s12}
 800b4d8:	ed9a 7a00 	vldr	s14, [sl]
 800b4dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b4e0:	ecfe 6a01 	vldmia	lr!, {s13}
 800b4e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b4e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4f0:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800b808 <forward_lstm+0x14c0>
 800b4f4:	ecea 7a01 	vstmia	sl!, {s15}
 800b4f8:	ece1 8a01 	vstmia	r1!, {s17}
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 82e8 	beq.w	800bad2 <forward_lstm+0x178a>
 800b502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b506:	f8d7 b0e4 	ldr.w	fp, [r7, #228]	; 0xe4
 800b50a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b50e:	f100 0340 	add.w	r3, r0, #64	; 0x40
 800b512:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800b516:	f1ab 0b10 	sub.w	fp, fp, #16
 800b51a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800b51e:	3340      	adds	r3, #64	; 0x40
 800b520:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 800b524:	f1bb 0f0f 	cmp.w	fp, #15
 800b528:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b52c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 800b530:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800b534:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800b538:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800b53c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b540:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 800b544:	ed12 ea1d 	vldr	s28, [r2, #-116]	; 0xffffff8c
 800b548:	ed52 da1c 	vldr	s27, [r2, #-112]	; 0xffffff90
 800b54c:	ed13 da1c 	vldr	s26, [r3, #-112]	; 0xffffff90
 800b550:	ed52 ca1b 	vldr	s25, [r2, #-108]	; 0xffffff94
 800b554:	ed13 ca1b 	vldr	s24, [r3, #-108]	; 0xffffff94
 800b558:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b55c:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800b560:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800b564:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800b568:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800b56c:	ed52 9a18 	vldr	s19, [r2, #-96]	; 0xffffffa0
 800b570:	ed13 9a18 	vldr	s18, [r3, #-96]	; 0xffffffa0
 800b574:	eeee 7a26 	vfma.f32	s15, s28, s13
 800b578:	ed12 0a17 	vldr	s0, [r2, #-92]	; 0xffffffa4
 800b57c:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 800b580:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 800b584:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 800b588:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800b58c:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800b590:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b594:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800b598:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800b59c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800b5a0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800b5a4:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800b5a8:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800b5ac:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b5b0:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800b5b4:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800b5b8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b5bc:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b5c0:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b5c4:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b5c8:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b5cc:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b5d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b5d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b5d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b5dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b5e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5e4:	d895      	bhi.n	800b512 <forward_lstm+0x11ca>
 800b5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ea:	18c3      	adds	r3, r0, r3
 800b5ec:	2d00      	cmp	r5, #0
 800b5ee:	f000 8085 	beq.w	800b6fc <forward_lstm+0x13b4>
 800b5f2:	edd4 6a00 	vldr	s13, [r4]
 800b5f6:	edd3 7a00 	vldr	s15, [r3]
 800b5fa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800b5fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b602:	2a00      	cmp	r2, #0
 800b604:	d07a      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b606:	edd4 6a01 	vldr	s13, [r4, #4]
 800b60a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b60e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800b612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b616:	2a00      	cmp	r2, #0
 800b618:	d070      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b61a:	edd4 6a02 	vldr	s13, [r4, #8]
 800b61e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b622:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b626:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	d066      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b62e:	edd4 6a03 	vldr	s13, [r4, #12]
 800b632:	edd3 7a03 	vldr	s15, [r3, #12]
 800b636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b63a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b63e:	2a00      	cmp	r2, #0
 800b640:	d05c      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b642:	edd4 6a04 	vldr	s13, [r4, #16]
 800b646:	edd3 7a04 	vldr	s15, [r3, #16]
 800b64a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b64e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b652:	2a00      	cmp	r2, #0
 800b654:	d052      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b656:	edd4 6a05 	vldr	s13, [r4, #20]
 800b65a:	edd3 7a05 	vldr	s15, [r3, #20]
 800b65e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b662:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b666:	2a00      	cmp	r2, #0
 800b668:	d048      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b66a:	edd4 6a06 	vldr	s13, [r4, #24]
 800b66e:	edd3 7a06 	vldr	s15, [r3, #24]
 800b672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b676:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b67a:	b3fa      	cbz	r2, 800b6fc <forward_lstm+0x13b4>
 800b67c:	edd4 6a07 	vldr	s13, [r4, #28]
 800b680:	edd3 7a07 	vldr	s15, [r3, #28]
 800b684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b68c:	b3b2      	cbz	r2, 800b6fc <forward_lstm+0x13b4>
 800b68e:	edd4 6a08 	vldr	s13, [r4, #32]
 800b692:	2d09      	cmp	r5, #9
 800b694:	edd3 7a08 	vldr	s15, [r3, #32]
 800b698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b69c:	d02e      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b69e:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800b6a2:	2d0a      	cmp	r5, #10
 800b6a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800b6a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6ac:	d026      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b6ae:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800b6b2:	2d0b      	cmp	r5, #11
 800b6b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b6b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6bc:	d01e      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b6be:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800b6c2:	2d0c      	cmp	r5, #12
 800b6c4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b6c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6cc:	d016      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b6ce:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800b6d2:	f1b5 020d 	subs.w	r2, r5, #13
 800b6d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b6da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6de:	d00d      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b6e0:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800b6e4:	2a01      	cmp	r2, #1
 800b6e6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b6ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6ee:	d005      	beq.n	800b6fc <forward_lstm+0x13b4>
 800b6f0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800b6f4:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800b6f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b6fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b700:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b808 <forward_lstm+0x14c0>
 800b704:	ed01 7a01 	vstr	s14, [r1, #-4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 81b7 	beq.w	800ba7c <forward_lstm+0x1734>
 800b70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b712:	f8d7 b0b0 	ldr.w	fp, [r7, #176]	; 0xb0
 800b716:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800b71a:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 800b71e:	ed13 6a0f 	vldr	s12, [r3, #-60]	; 0xffffffc4
 800b722:	f1ab 0b10 	sub.w	fp, fp, #16
 800b726:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800b72a:	3340      	adds	r3, #64	; 0x40
 800b72c:	ed12 4a10 	vldr	s8, [r2, #-64]	; 0xffffffc0
 800b730:	f1bb 0f0f 	cmp.w	fp, #15
 800b734:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b738:	ed53 4a20 	vldr	s9, [r3, #-128]	; 0xffffff80
 800b73c:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 800b740:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800b744:	ed53 5a1e 	vldr	s11, [r3, #-120]	; 0xffffff88
 800b748:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b74c:	ed13 6a1d 	vldr	s12, [r3, #-116]	; 0xffffff8c
 800b750:	ed52 ea1d 	vldr	s29, [r2, #-116]	; 0xffffff8c
 800b754:	ed12 ea1c 	vldr	s28, [r2, #-112]	; 0xffffff90
 800b758:	ed53 da1c 	vldr	s27, [r3, #-112]	; 0xffffff90
 800b75c:	ed12 da1b 	vldr	s26, [r2, #-108]	; 0xffffff94
 800b760:	ed53 ca1b 	vldr	s25, [r3, #-108]	; 0xffffff94
 800b764:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b768:	ed12 ca1a 	vldr	s24, [r2, #-104]	; 0xffffff98
 800b76c:	ed53 ba1a 	vldr	s23, [r3, #-104]	; 0xffffff98
 800b770:	ed12 ba19 	vldr	s22, [r2, #-100]	; 0xffffff9c
 800b774:	ed53 aa19 	vldr	s21, [r3, #-100]	; 0xffffff9c
 800b778:	ed12 aa18 	vldr	s20, [r2, #-96]	; 0xffffffa0
 800b77c:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800b780:	eeee 7a86 	vfma.f32	s15, s29, s12
 800b784:	ed12 9a17 	vldr	s18, [r2, #-92]	; 0xffffffa4
 800b788:	ed13 0a17 	vldr	s0, [r3, #-92]	; 0xffffffa4
 800b78c:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800b790:	ed13 1a16 	vldr	s2, [r3, #-88]	; 0xffffffa8
 800b794:	ed52 1a15 	vldr	s3, [r2, #-84]	; 0xffffffac
 800b798:	ed13 2a15 	vldr	s4, [r3, #-84]	; 0xffffffac
 800b79c:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800b7a0:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 800b7a4:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 800b7a8:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800b7ac:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800b7b0:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800b7b4:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800b7b8:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800b7bc:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 800b7c0:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 800b7c4:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800b7c8:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800b7cc:	eeea 7a29 	vfma.f32	s15, s20, s19
 800b7d0:	eee9 7a00 	vfma.f32	s15, s18, s0
 800b7d4:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b7d8:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b7dc:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b7e0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b7e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b7e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b7ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b7f0:	d895      	bhi.n	800b71e <forward_lstm+0x13d6>
 800b7f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7f6:	eb0c 0203 	add.w	r2, ip, r3
 800b7fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d07a      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b802:	f8d7 b0d8 	ldr.w	fp, [r7, #216]	; 0xd8
 800b806:	e001      	b.n	800b80c <forward_lstm+0x14c4>
 800b808:	00000000 	.word	0x00000000
 800b80c:	ed9b 6a00 	vldr	s12, [fp]
 800b810:	2b01      	cmp	r3, #1
 800b812:	edd2 7a00 	vldr	s15, [r2]
 800b816:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b81a:	d06d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b81c:	ed9b 6a01 	vldr	s12, [fp, #4]
 800b820:	2b02      	cmp	r3, #2
 800b822:	edd2 7a01 	vldr	s15, [r2, #4]
 800b826:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b82a:	d065      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b82c:	ed9b 6a02 	vldr	s12, [fp, #8]
 800b830:	2b03      	cmp	r3, #3
 800b832:	edd2 7a02 	vldr	s15, [r2, #8]
 800b836:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b83a:	d05d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b83c:	ed9b 6a03 	vldr	s12, [fp, #12]
 800b840:	2b04      	cmp	r3, #4
 800b842:	edd2 7a03 	vldr	s15, [r2, #12]
 800b846:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b84a:	d055      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b84c:	ed9b 6a04 	vldr	s12, [fp, #16]
 800b850:	2b05      	cmp	r3, #5
 800b852:	edd2 7a04 	vldr	s15, [r2, #16]
 800b856:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b85a:	d04d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b85c:	ed9b 6a05 	vldr	s12, [fp, #20]
 800b860:	2b06      	cmp	r3, #6
 800b862:	edd2 7a05 	vldr	s15, [r2, #20]
 800b866:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b86a:	d045      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b86c:	ed9b 6a06 	vldr	s12, [fp, #24]
 800b870:	2b07      	cmp	r3, #7
 800b872:	edd2 7a06 	vldr	s15, [r2, #24]
 800b876:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b87a:	d03d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b87c:	ed9b 6a07 	vldr	s12, [fp, #28]
 800b880:	2b08      	cmp	r3, #8
 800b882:	edd2 7a07 	vldr	s15, [r2, #28]
 800b886:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b88a:	d035      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b88c:	ed9b 6a08 	vldr	s12, [fp, #32]
 800b890:	2b09      	cmp	r3, #9
 800b892:	edd2 7a08 	vldr	s15, [r2, #32]
 800b896:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b89a:	d02d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b89c:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 800b8a0:	2b0a      	cmp	r3, #10
 800b8a2:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800b8a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b8aa:	d025      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b8ac:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 800b8b0:	2b0b      	cmp	r3, #11
 800b8b2:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800b8b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b8ba:	d01d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b8bc:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 800b8c0:	2b0c      	cmp	r3, #12
 800b8c2:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800b8c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b8ca:	d015      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b8cc:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 800b8d0:	3b0d      	subs	r3, #13
 800b8d2:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800b8d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b8da:	d00d      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b8dc:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800b8e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b8ea:	d005      	beq.n	800b8f8 <forward_lstm+0x15b0>
 800b8ec:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 800b8f0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800b8f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b8f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b8fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b900:	4418      	add	r0, r3
 800b902:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b906:	ed01 7a01 	vstr	s14, [r1, #-4]
 800b90a:	ecb6 6a01 	vldmia	r6!, {s12}
 800b90e:	449c      	add	ip, r3
 800b910:	ecf9 6a01 	vldmia	r9!, {s13}
 800b914:	ed5a 7a01 	vldr	s15, [sl, #-4]
 800b918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b91c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b920:	459e      	cmp	lr, r3
 800b922:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b926:	ed01 7a01 	vstr	s14, [r1, #-4]
 800b92a:	f47f adcf 	bne.w	800b4cc <forward_lstm+0x1184>
 800b92e:	f8d7 50b0 	ldr.w	r5, [r7, #176]	; 0xb0
 800b932:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 800b936:	ee1f 3a90 	vmov	r3, s31
 800b93a:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800b93e:	4608      	mov	r0, r1
 800b940:	462a      	mov	r2, r5
 800b942:	f8d7 60f8 	ldr.w	r6, [r7, #248]	; 0xf8
 800b946:	47a0      	blx	r4
 800b948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b94a:	462a      	mov	r2, r5
 800b94c:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 800b950:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 800b954:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800b956:	47a0      	blx	r4
 800b958:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b960:	6979      	ldr	r1, [r7, #20]
 800b962:	ecf3 7a01 	vldmia	r3!, {s15}
 800b966:	ed92 7a00 	vldr	s14, [r2]
 800b96a:	428b      	cmp	r3, r1
 800b96c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b970:	ece2 7a01 	vstmia	r2!, {s15}
 800b974:	d1f5      	bne.n	800b962 <forward_lstm+0x161a>
 800b976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b97a:	899b      	ldrh	r3, [r3, #12]
 800b97c:	b163      	cbz	r3, 800b998 <forward_lstm+0x1650>
 800b97e:	2400      	movs	r4, #0
 800b980:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 800b984:	46a8      	mov	r8, r5
 800b986:	f859 5f04 	ldr.w	r5, [r9, #4]!
 800b98a:	3401      	adds	r4, #1
 800b98c:	2d00      	cmp	r5, #0
 800b98e:	d162      	bne.n	800ba56 <forward_lstm+0x170e>
 800b990:	42a3      	cmp	r3, r4
 800b992:	f108 0804 	add.w	r8, r8, #4
 800b996:	dcf6      	bgt.n	800b986 <forward_lstm+0x163e>
 800b998:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b99c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b99e:	440a      	add	r2, r1
 800b9a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800b9a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9aa:	4291      	cmp	r1, r2
 800b9ac:	f340 80ba 	ble.w	800bb24 <forward_lstm+0x17dc>
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	f2c0 80b7 	blt.w	800bb24 <forward_lstm+0x17dc>
 800b9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b9be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b9c2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800b9c6:	f7fe be7a 	b.w	800a6be <forward_lstm+0x376>
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	69d8      	ldr	r0, [r3, #28]
 800b9d0:	f000 fa88 	bl	800bee4 <st_int8_copy>
 800b9d4:	ee1f 2a10 	vmov	r2, s30
 800b9d8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800b9dc:	2000      	movs	r0, #0
 800b9de:	f000 fa23 	bl	800be28 <st_int8_fill>
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f47e adb4 	bne.w	800a556 <forward_lstm+0x20e>
 800b9ee:	4b79      	ldr	r3, [pc, #484]	; (800bbd4 <forward_lstm+0x188c>)
 800b9f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f47e adb2 	bne.w	800a564 <forward_lstm+0x21c>
 800ba00:	4b74      	ldr	r3, [pc, #464]	; (800bbd4 <forward_lstm+0x188c>)
 800ba02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	643b      	str	r3, [r7, #64]	; 0x40
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f47e adaf 	bne.w	800a570 <forward_lstm+0x228>
 800ba12:	4b70      	ldr	r3, [pc, #448]	; (800bbd4 <forward_lstm+0x188c>)
 800ba14:	643b      	str	r3, [r7, #64]	; 0x40
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	ed93 8a10 	vldr	s16, [r3, #64]	; 0x40
 800ba1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f47e adad 	bne.w	800a580 <forward_lstm+0x238>
 800ba26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	673b      	str	r3, [r7, #112]	; 0x70
 800ba2e:	f7fe bdae 	b.w	800a58e <forward_lstm+0x246>
 800ba32:	4618      	mov	r0, r3
 800ba34:	ee1f 2a10 	vmov	r2, s30
 800ba38:	f000 f9f6 	bl	800be28 <st_int8_fill>
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	ee1f 2a10 	vmov	r2, s30
 800ba42:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ba46:	f1b9 0f00 	cmp.w	r9, #0
 800ba4a:	f47e ad75 	bne.w	800a538 <forward_lstm+0x1f0>
 800ba4e:	f000 f9eb 	bl	800be28 <st_int8_fill>
 800ba52:	f7fe bd73 	b.w	800a53c <forward_lstm+0x1f4>
 800ba56:	f8d8 a000 	ldr.w	sl, [r8]
 800ba5a:	ee1f 2a10 	vmov	r2, s30
 800ba5e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ba62:	4651      	mov	r1, sl
 800ba64:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 800ba68:	f000 fa3c 	bl	800bee4 <st_int8_copy>
 800ba6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba70:	f848 5b04 	str.w	r5, [r8], #4
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	dc85      	bgt.n	800b986 <forward_lstm+0x163e>
 800ba7a:	e78d      	b.n	800b998 <forward_lstm+0x1650>
 800ba7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ba80:	4662      	mov	r2, ip
 800ba82:	f8d7 b104 	ldr.w	fp, [r7, #260]	; 0x104
 800ba86:	e6c1      	b.n	800b80c <forward_lstm+0x14c4>
 800ba88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ba8c:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ba90:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800ba94:	f7ff ba27 	b.w	800aee6 <forward_lstm+0xb9e>
 800ba98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba9c:	f7ff b92b 	b.w	800acf6 <forward_lstm+0x9ae>
 800baa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800baa4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800baa8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800baac:	f7ff b814 	b.w	800aad8 <forward_lstm+0x790>
 800bab0:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800bab4:	4653      	mov	r3, sl
 800bab6:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800baba:	f7fe bf15 	b.w	800a8e8 <forward_lstm+0x5a0>
 800babe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bac2:	465a      	mov	r2, fp
 800bac4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800bac8:	e418      	b.n	800b2fc <forward_lstm+0xfb4>
 800baca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bace:	f7ff bb1f 	b.w	800b110 <forward_lstm+0xdc8>
 800bad2:	4603      	mov	r3, r0
 800bad4:	e58a      	b.n	800b5ec <forward_lstm+0x12a4>
 800bad6:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800bada:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800bade:	ee1f 3a90 	vmov	r3, s31
 800bae2:	4690      	mov	r8, r2
 800bae4:	4608      	mov	r0, r1
 800bae6:	47a0      	blx	r4
 800bae8:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 800baec:	ee1f 3a90 	vmov	r3, s31
 800baf0:	4642      	mov	r2, r8
 800baf2:	4608      	mov	r0, r1
 800baf4:	47a0      	blx	r4
 800baf6:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800bafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bafc:	4642      	mov	r2, r8
 800bafe:	4608      	mov	r0, r1
 800bb00:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800bb02:	47a8      	blx	r5
 800bb04:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 800bb08:	ee1f 3a90 	vmov	r3, s31
 800bb0c:	4642      	mov	r2, r8
 800bb0e:	4608      	mov	r0, r1
 800bb10:	47a0      	blx	r4
 800bb12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb14:	4642      	mov	r2, r8
 800bb16:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 800bb1a:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 800bb1e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800bb20:	47a0      	blx	r4
 800bb22:	e728      	b.n	800b976 <forward_lstm+0x162e>
 800bb24:	b343      	cbz	r3, 800bb78 <forward_lstm+0x1830>
 800bb26:	2600      	movs	r6, #0
 800bb28:	f8d7 8098 	ldr.w	r8, [r7, #152]	; 0x98
 800bb2c:	ee1f ba10 	vmov	fp, s30
 800bb30:	f8d7 909c 	ldr.w	r9, [r7, #156]	; 0x9c
 800bb34:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800bb38:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 800bb3c:	e009      	b.n	800bb52 <forward_lstm+0x180a>
 800bb3e:	6821      	ldr	r1, [r4, #0]
 800bb40:	4648      	mov	r0, r9
 800bb42:	f000 f9cf 	bl	800bee4 <st_int8_copy>
 800bb46:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	3404      	adds	r4, #4
 800bb4e:	42b3      	cmp	r3, r6
 800bb50:	dd12      	ble.n	800bb78 <forward_lstm+0x1830>
 800bb52:	f855 2f04 	ldr.w	r2, [r5, #4]!
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	d1f7      	bne.n	800bb4a <forward_lstm+0x1802>
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	465a      	mov	r2, fp
 800bb5e:	42b3      	cmp	r3, r6
 800bb60:	d1ed      	bne.n	800bb3e <forward_lstm+0x17f6>
 800bb62:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0e9      	beq.n	800bb3e <forward_lstm+0x17f6>
 800bb6a:	6821      	ldr	r1, [r4, #0]
 800bb6c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bb6e:	f000 f9b9 	bl	800bee4 <st_int8_copy>
 800bb72:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800bb76:	e7e8      	b.n	800bb4a <forward_lstm+0x1802>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	b18b      	cbz	r3, 800bba0 <forward_lstm+0x1858>
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	69dc      	ldr	r4, [r3, #28]
 800bb80:	b174      	cbz	r4, 800bba0 <forward_lstm+0x1858>
 800bb82:	ee1f 5a10 	vmov	r5, s30
 800bb86:	4621      	mov	r1, r4
 800bb88:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bb8a:	ee1f 2a10 	vmov	r2, s30
 800bb8e:	f000 f9a9 	bl	800bee4 <st_int8_copy>
 800bb92:	ee1f 2a10 	vmov	r2, s30
 800bb96:	1961      	adds	r1, r4, r5
 800bb98:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800bb9c:	f000 f9a2 	bl	800bee4 <st_int8_copy>
 800bba0:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800bba4:	46bd      	mov	sp, r7
 800bba6:	ecbd 8b10 	vpop	{d8-d15}
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	ee0f 0a90 	vmov	s31, r0
 800bbb2:	4681      	mov	r9, r0
 800bbb4:	6778      	str	r0, [r7, #116]	; 0x74
 800bbb6:	65b8      	str	r0, [r7, #88]	; 0x58
 800bbb8:	f7fe bc45 	b.w	800a446 <forward_lstm+0xfe>
 800bbbc:	4683      	mov	fp, r0
 800bbbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bbc2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800bbc6:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800bbca:	f7fe bbe8 	b.w	800a39e <forward_lstm+0x56>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	deff      	udf	#255	; 0xff
 800bbd4:	0800a335 	.word	0x0800a335

0800bbd8 <forward_lite_dense_if32of32wf32>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	ed2d 8b0c 	vpush	{d8-d13}
 800bbe0:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800bbe4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800bbe8:	4287      	cmp	r7, r0
 800bbea:	f240 8105 	bls.w	800bdf8 <forward_lite_dense_if32of32wf32+0x220>
 800bbee:	f1a6 0810 	sub.w	r8, r6, #16
 800bbf2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	f006 0b0f 	and.w	fp, r6, #15
 800bbfc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800bc00:	f108 0801 	add.w	r8, r8, #1
 800bc04:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800bc08:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800bc0c:	2e0f      	cmp	r6, #15
 800bc0e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800be24 <forward_lite_dense_if32of32wf32+0x24c>
 800bc12:	f240 8102 	bls.w	800be1a <forward_lite_dense_if32of32wf32+0x242>
 800bc16:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800bc1a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800bc1e:	46b6      	mov	lr, r6
 800bc20:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800bc24:	f1ae 0e10 	sub.w	lr, lr, #16
 800bc28:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800bc2c:	3440      	adds	r4, #64	; 0x40
 800bc2e:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800bc32:	f1be 0f0f 	cmp.w	lr, #15
 800bc36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc3a:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800bc3e:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800bc42:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800bc46:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800bc4a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800bc4e:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800bc52:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800bc56:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800bc5a:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800bc5e:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800bc62:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800bc66:	eee5 7a86 	vfma.f32	s15, s11, s12
 800bc6a:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800bc6e:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800bc72:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800bc76:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800bc7a:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800bc7e:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800bc82:	eeed 7a26 	vfma.f32	s15, s26, s13
 800bc86:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800bc8a:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800bc8e:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800bc92:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800bc96:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800bc9a:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800bc9e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800bca2:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800bca6:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800bcaa:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800bcae:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800bcb2:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800bcb6:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800bcba:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800bcbe:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800bcc2:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800bcc6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800bcca:	eee9 7a89 	vfma.f32	s15, s19, s18
 800bcce:	eee8 7a88 	vfma.f32	s15, s17, s16
 800bcd2:	eee0 7a20 	vfma.f32	s15, s0, s1
 800bcd6:	eee1 7a21 	vfma.f32	s15, s2, s3
 800bcda:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bcde:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bce2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bce6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800bcea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bcee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bcf2:	d895      	bhi.n	800bc20 <forward_lite_dense_if32of32wf32+0x48>
 800bcf4:	eb02 0e0a 	add.w	lr, r2, sl
 800bcf8:	465c      	mov	r4, fp
 800bcfa:	46c4      	mov	ip, r8
 800bcfc:	2c00      	cmp	r4, #0
 800bcfe:	d075      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd00:	eddc 6a00 	vldr	s13, [ip]
 800bd04:	2c01      	cmp	r4, #1
 800bd06:	edde 7a00 	vldr	s15, [lr]
 800bd0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd0e:	d06d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd10:	eddc 6a01 	vldr	s13, [ip, #4]
 800bd14:	2c02      	cmp	r4, #2
 800bd16:	edde 7a01 	vldr	s15, [lr, #4]
 800bd1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd1e:	d065      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd20:	eddc 6a02 	vldr	s13, [ip, #8]
 800bd24:	2c03      	cmp	r4, #3
 800bd26:	edde 7a02 	vldr	s15, [lr, #8]
 800bd2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd2e:	d05d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd30:	eddc 6a03 	vldr	s13, [ip, #12]
 800bd34:	2c04      	cmp	r4, #4
 800bd36:	edde 7a03 	vldr	s15, [lr, #12]
 800bd3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd3e:	d055      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd40:	eddc 6a04 	vldr	s13, [ip, #16]
 800bd44:	2c05      	cmp	r4, #5
 800bd46:	edde 7a04 	vldr	s15, [lr, #16]
 800bd4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd4e:	d04d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd50:	eddc 6a05 	vldr	s13, [ip, #20]
 800bd54:	2c06      	cmp	r4, #6
 800bd56:	edde 7a05 	vldr	s15, [lr, #20]
 800bd5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd5e:	d045      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd60:	eddc 6a06 	vldr	s13, [ip, #24]
 800bd64:	2c07      	cmp	r4, #7
 800bd66:	edde 7a06 	vldr	s15, [lr, #24]
 800bd6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd6e:	d03d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd70:	eddc 6a07 	vldr	s13, [ip, #28]
 800bd74:	2c08      	cmp	r4, #8
 800bd76:	edde 7a07 	vldr	s15, [lr, #28]
 800bd7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd7e:	d035      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd80:	eddc 6a08 	vldr	s13, [ip, #32]
 800bd84:	2c09      	cmp	r4, #9
 800bd86:	edde 7a08 	vldr	s15, [lr, #32]
 800bd8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd8e:	d02d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bd90:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800bd94:	2c0a      	cmp	r4, #10
 800bd96:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800bd9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bd9e:	d025      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bda0:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800bda4:	2c0b      	cmp	r4, #11
 800bda6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800bdaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bdae:	d01d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bdb0:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800bdb4:	2c0c      	cmp	r4, #12
 800bdb6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800bdba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bdbe:	d015      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bdc0:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800bdc4:	3c0d      	subs	r4, #13
 800bdc6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800bdca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bdce:	d00d      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bdd0:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800bdd4:	2c01      	cmp	r4, #1
 800bdd6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800bdda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bdde:	d005      	beq.n	800bdec <forward_lite_dense_if32of32wf32+0x214>
 800bde0:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800bde4:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800bde8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bdec:	eca5 7a01 	vstmia	r5!, {s14}
 800bdf0:	42af      	cmp	r7, r5
 800bdf2:	444a      	add	r2, r9
 800bdf4:	f63f af0a 	bhi.w	800bc0c <forward_lite_dense_if32of32wf32+0x34>
 800bdf8:	b15b      	cbz	r3, 800be12 <forward_lite_dense_if32of32wf32+0x23a>
 800bdfa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bdfc:	b14a      	cbz	r2, 800be12 <forward_lite_dense_if32of32wf32+0x23a>
 800bdfe:	edd0 7a00 	vldr	s15, [r0]
 800be02:	ecb3 7a01 	vldmia	r3!, {s14}
 800be06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be0a:	ece0 7a01 	vstmia	r0!, {s15}
 800be0e:	4287      	cmp	r7, r0
 800be10:	d1f5      	bne.n	800bdfe <forward_lite_dense_if32of32wf32+0x226>
 800be12:	ecbd 8b0c 	vpop	{d8-d13}
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be1a:	4634      	mov	r4, r6
 800be1c:	4696      	mov	lr, r2
 800be1e:	468c      	mov	ip, r1
 800be20:	e76c      	b.n	800bcfc <forward_lite_dense_if32of32wf32+0x124>
 800be22:	bf00      	nop
 800be24:	00000000 	.word	0x00000000

0800be28 <st_int8_fill>:
 800be28:	0203      	lsls	r3, r0, #8
 800be2a:	468c      	mov	ip, r1
 800be2c:	b510      	push	{r4, lr}
 800be2e:	b2c4      	uxtb	r4, r0
 800be30:	b29b      	uxth	r3, r3
 800be32:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800be36:	431c      	orrs	r4, r3
 800be38:	0403      	lsls	r3, r0, #16
 800be3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800be3e:	431c      	orrs	r4, r3
 800be40:	078b      	lsls	r3, r1, #30
 800be42:	d007      	beq.n	800be54 <st_int8_fill+0x2c>
 800be44:	b3a2      	cbz	r2, 800beb0 <st_int8_fill+0x88>
 800be46:	f80c 0b01 	strb.w	r0, [ip], #1
 800be4a:	f01c 0f03 	tst.w	ip, #3
 800be4e:	f102 32ff 	add.w	r2, r2, #4294967295
 800be52:	d1f7      	bne.n	800be44 <st_int8_fill+0x1c>
 800be54:	0911      	lsrs	r1, r2, #4
 800be56:	d041      	beq.n	800bedc <st_int8_fill+0xb4>
 800be58:	1e4b      	subs	r3, r1, #1
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	d929      	bls.n	800beb2 <st_int8_fill+0x8a>
 800be5e:	f01c 0f07 	tst.w	ip, #7
 800be62:	d126      	bne.n	800beb2 <st_int8_fill+0x8a>
 800be64:	f10c 0310 	add.w	r3, ip, #16
 800be68:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800be6c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800be70:	e943 4404 	strd	r4, r4, [r3, #-16]
 800be74:	e943 4402 	strd	r4, r4, [r3, #-8]
 800be78:	3310      	adds	r3, #16
 800be7a:	428b      	cmp	r3, r1
 800be7c:	d1f8      	bne.n	800be70 <st_int8_fill+0x48>
 800be7e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800be82:	44f4      	add	ip, lr
 800be84:	f002 0203 	and.w	r2, r2, #3
 800be88:	b15b      	cbz	r3, 800bea2 <st_int8_fill+0x7a>
 800be8a:	1e59      	subs	r1, r3, #1
 800be8c:	f8cc 4000 	str.w	r4, [ip]
 800be90:	d005      	beq.n	800be9e <st_int8_fill+0x76>
 800be92:	2901      	cmp	r1, #1
 800be94:	f8cc 4004 	str.w	r4, [ip, #4]
 800be98:	bf18      	it	ne
 800be9a:	f8cc 4008 	strne.w	r4, [ip, #8]
 800be9e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800bea2:	b12a      	cbz	r2, 800beb0 <st_int8_fill+0x88>
 800bea4:	4601      	mov	r1, r0
 800bea6:	4660      	mov	r0, ip
 800bea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beac:	f000 bfb9 	b.w	800ce22 <memset>
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800beb6:	4663      	mov	r3, ip
 800beb8:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 800bebc:	601c      	str	r4, [r3, #0]
 800bebe:	3310      	adds	r3, #16
 800bec0:	f843 4c0c 	str.w	r4, [r3, #-12]
 800bec4:	f843 4c08 	str.w	r4, [r3, #-8]
 800bec8:	f843 4c04 	str.w	r4, [r3, #-4]
 800becc:	4299      	cmp	r1, r3
 800bece:	d1f5      	bne.n	800bebc <st_int8_fill+0x94>
 800bed0:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800bed4:	44f4      	add	ip, lr
 800bed6:	f002 0203 	and.w	r2, r2, #3
 800beda:	e7d5      	b.n	800be88 <st_int8_fill+0x60>
 800bedc:	0893      	lsrs	r3, r2, #2
 800bede:	f002 0203 	and.w	r2, r2, #3
 800bee2:	e7d1      	b.n	800be88 <st_int8_fill+0x60>

0800bee4 <st_int8_copy>:
 800bee4:	4288      	cmp	r0, r1
 800bee6:	d010      	beq.n	800bf0a <st_int8_copy+0x26>
 800bee8:	b17a      	cbz	r2, 800bf0a <st_int8_copy+0x26>
 800beea:	4288      	cmp	r0, r1
 800beec:	eb00 0302 	add.w	r3, r0, r2
 800bef0:	d20c      	bcs.n	800bf0c <st_int8_copy+0x28>
 800bef2:	428b      	cmp	r3, r1
 800bef4:	d90a      	bls.n	800bf0c <st_int8_copy+0x28>
 800bef6:	4283      	cmp	r3, r0
 800bef8:	440a      	add	r2, r1
 800befa:	d906      	bls.n	800bf0a <st_int8_copy+0x26>
 800befc:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800bf00:	4283      	cmp	r3, r0
 800bf02:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800bf06:	d1f9      	bne.n	800befc <st_int8_copy+0x18>
 800bf08:	4770      	bx	lr
 800bf0a:	4770      	bx	lr
 800bf0c:	078b      	lsls	r3, r1, #30
 800bf0e:	d102      	bne.n	800bf16 <st_int8_copy+0x32>
 800bf10:	e008      	b.n	800bf24 <st_int8_copy+0x40>
 800bf12:	2a00      	cmp	r2, #0
 800bf14:	d04d      	beq.n	800bfb2 <st_int8_copy+0xce>
 800bf16:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800bf1a:	3a01      	subs	r2, #1
 800bf1c:	f801 3b01 	strb.w	r3, [r1], #1
 800bf20:	078b      	lsls	r3, r1, #30
 800bf22:	d1f6      	bne.n	800bf12 <st_int8_copy+0x2e>
 800bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf28:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800bf2c:	d05e      	beq.n	800bfec <st_int8_copy+0x108>
 800bf2e:	ea40 0301 	orr.w	r3, r0, r1
 800bf32:	075b      	lsls	r3, r3, #29
 800bf34:	d13e      	bne.n	800bfb4 <st_int8_copy+0xd0>
 800bf36:	f10e 33ff 	add.w	r3, lr, #4294967295
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d93a      	bls.n	800bfb4 <st_int8_copy+0xd0>
 800bf3e:	f100 0310 	add.w	r3, r0, #16
 800bf42:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800bf46:	f101 0c10 	add.w	ip, r1, #16
 800bf4a:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800bf4e:	3310      	adds	r3, #16
 800bf50:	f10c 0c10 	add.w	ip, ip, #16
 800bf54:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 800bf58:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 800bf5c:	4573      	cmp	r3, lr
 800bf5e:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800bf62:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 800bf66:	d1f2      	bne.n	800bf4e <st_int8_copy+0x6a>
 800bf68:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800bf6c:	4421      	add	r1, r4
 800bf6e:	4420      	add	r0, r4
 800bf70:	f002 0203 	and.w	r2, r2, #3
 800bf74:	b16b      	cbz	r3, 800bf92 <st_int8_copy+0xae>
 800bf76:	6804      	ldr	r4, [r0, #0]
 800bf78:	600c      	str	r4, [r1, #0]
 800bf7a:	1e5c      	subs	r4, r3, #1
 800bf7c:	d005      	beq.n	800bf8a <st_int8_copy+0xa6>
 800bf7e:	6845      	ldr	r5, [r0, #4]
 800bf80:	2c01      	cmp	r4, #1
 800bf82:	604d      	str	r5, [r1, #4]
 800bf84:	d001      	beq.n	800bf8a <st_int8_copy+0xa6>
 800bf86:	6884      	ldr	r4, [r0, #8]
 800bf88:	608c      	str	r4, [r1, #8]
 800bf8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800bf8e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800bf92:	b162      	cbz	r2, 800bfae <st_int8_copy+0xca>
 800bf94:	f990 3000 	ldrsb.w	r3, [r0]
 800bf98:	3a01      	subs	r2, #1
 800bf9a:	700b      	strb	r3, [r1, #0]
 800bf9c:	d007      	beq.n	800bfae <st_int8_copy+0xca>
 800bf9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800bfa2:	2a01      	cmp	r2, #1
 800bfa4:	704b      	strb	r3, [r1, #1]
 800bfa6:	d002      	beq.n	800bfae <st_int8_copy+0xca>
 800bfa8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800bfac:	708b      	strb	r3, [r1, #2]
 800bfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb2:	4770      	bx	lr
 800bfb4:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800bfb8:	460b      	mov	r3, r1
 800bfba:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800bfbe:	4684      	mov	ip, r0
 800bfc0:	f8dc 8000 	ldr.w	r8, [ip]
 800bfc4:	3310      	adds	r3, #16
 800bfc6:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800bfca:	f10c 0c10 	add.w	ip, ip, #16
 800bfce:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800bfd2:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 800bfd6:	f843 8c10 	str.w	r8, [r3, #-16]
 800bfda:	f843 7c0c 	str.w	r7, [r3, #-12]
 800bfde:	f843 6c08 	str.w	r6, [r3, #-8]
 800bfe2:	f843 5c04 	str.w	r5, [r3, #-4]
 800bfe6:	459e      	cmp	lr, r3
 800bfe8:	d1ea      	bne.n	800bfc0 <st_int8_copy+0xdc>
 800bfea:	e7bd      	b.n	800bf68 <st_int8_copy+0x84>
 800bfec:	0893      	lsrs	r3, r2, #2
 800bfee:	f002 0203 	and.w	r2, r2, #3
 800bff2:	e7bf      	b.n	800bf74 <st_int8_copy+0x90>

0800bff4 <ai_array_to_buffer_fmt>:
 800bff4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d050      	beq.n	800c09e <ai_array_to_buffer_fmt+0xaa>
 800bffc:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800c000:	4b29      	ldr	r3, [pc, #164]	; (800c0a8 <ai_array_to_buffer_fmt+0xb4>)
 800c002:	429a      	cmp	r2, r3
 800c004:	d00b      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c006:	dc1c      	bgt.n	800c042 <ai_array_to_buffer_fmt+0x4e>
 800c008:	4b28      	ldr	r3, [pc, #160]	; (800c0ac <ai_array_to_buffer_fmt+0xb8>)
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d007      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c00e:	dd0b      	ble.n	800c028 <ai_array_to_buffer_fmt+0x34>
 800c010:	4b27      	ldr	r3, [pc, #156]	; (800c0b0 <ai_array_to_buffer_fmt+0xbc>)
 800c012:	429a      	cmp	r2, r3
 800c014:	d003      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c016:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d131      	bne.n	800c082 <ai_array_to_buffer_fmt+0x8e>
 800c01e:	4613      	mov	r3, r2
 800c020:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c024:	4318      	orrs	r0, r3
 800c026:	4770      	bx	lr
 800c028:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d0f6      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c030:	dd2c      	ble.n	800c08c <ai_array_to_buffer_fmt+0x98>
 800c032:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <ai_array_to_buffer_fmt+0xc0>)
 800c034:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c038:	429a      	cmp	r2, r3
 800c03a:	bf18      	it	ne
 800c03c:	2340      	movne	r3, #64	; 0x40
 800c03e:	4318      	orrs	r0, r3
 800c040:	4770      	bx	lr
 800c042:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <ai_array_to_buffer_fmt+0xc4>)
 800c044:	429a      	cmp	r2, r3
 800c046:	d0ea      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c048:	dd0e      	ble.n	800c068 <ai_array_to_buffer_fmt+0x74>
 800c04a:	4b1c      	ldr	r3, [pc, #112]	; (800c0bc <ai_array_to_buffer_fmt+0xc8>)
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d0e6      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c050:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800c054:	429a      	cmp	r2, r3
 800c056:	d0e2      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c058:	4b19      	ldr	r3, [pc, #100]	; (800c0c0 <ai_array_to_buffer_fmt+0xcc>)
 800c05a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c05e:	429a      	cmp	r2, r3
 800c060:	bf18      	it	ne
 800c062:	2340      	movne	r3, #64	; 0x40
 800c064:	4318      	orrs	r0, r3
 800c066:	4770      	bx	lr
 800c068:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d0d6      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c070:	3307      	adds	r3, #7
 800c072:	429a      	cmp	r2, r3
 800c074:	d0d3      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c076:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800c07a:	429a      	cmp	r2, r3
 800c07c:	bf18      	it	ne
 800c07e:	2340      	movne	r3, #64	; 0x40
 800c080:	e7ce      	b.n	800c020 <ai_array_to_buffer_fmt+0x2c>
 800c082:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <ai_array_to_buffer_fmt+0xd0>)
 800c084:	429a      	cmp	r2, r3
 800c086:	bf18      	it	ne
 800c088:	2340      	movne	r3, #64	; 0x40
 800c08a:	e7c9      	b.n	800c020 <ai_array_to_buffer_fmt+0x2c>
 800c08c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c090:	429a      	cmp	r2, r3
 800c092:	d0c4      	beq.n	800c01e <ai_array_to_buffer_fmt+0x2a>
 800c094:	3380      	adds	r3, #128	; 0x80
 800c096:	429a      	cmp	r2, r3
 800c098:	bf18      	it	ne
 800c09a:	2340      	movne	r3, #64	; 0x40
 800c09c:	e7c0      	b.n	800c020 <ai_array_to_buffer_fmt+0x2c>
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <ai_array_to_buffer_fmt+0xd4>)
 800c0a0:	4003      	ands	r3, r0
 800c0a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c0a6:	e7bb      	b.n	800c020 <ai_array_to_buffer_fmt+0x2c>
 800c0a8:	00840040 	.word	0x00840040
 800c0ac:	00040840 	.word	0x00040840
 800c0b0:	00041040 	.word	0x00041040
 800c0b4:	00040447 	.word	0x00040447
 800c0b8:	00840840 	.word	0x00840840
 800c0bc:	00841040 	.word	0x00841040
 800c0c0:	0084084f 	.word	0x0084084f
 800c0c4:	0004084f 	.word	0x0004084f
 800c0c8:	00803fff 	.word	0x00803fff

0800c0cc <ai_array_get_byte_size>:
 800c0cc:	b319      	cbz	r1, 800c116 <ai_array_get_byte_size+0x4a>
 800c0ce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c0d2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800c0d6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800c0da:	11c0      	asrs	r0, r0, #7
 800c0dc:	fb03 f101 	mul.w	r1, r3, r1
 800c0e0:	2a04      	cmp	r2, #4
 800c0e2:	f101 0107 	add.w	r1, r1, #7
 800c0e6:	f021 0107 	bic.w	r1, r1, #7
 800c0ea:	fa21 f10c 	lsr.w	r1, r1, ip
 800c0ee:	d00b      	beq.n	800c108 <ai_array_get_byte_size+0x3c>
 800c0f0:	2a08      	cmp	r2, #8
 800c0f2:	d002      	beq.n	800c0fa <ai_array_get_byte_size+0x2e>
 800c0f4:	3107      	adds	r1, #7
 800c0f6:	08c8      	lsrs	r0, r1, #3
 800c0f8:	4770      	bx	lr
 800c0fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c0fe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800c102:	3107      	adds	r1, #7
 800c104:	08c8      	lsrs	r0, r1, #3
 800c106:	4770      	bx	lr
 800c108:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800c10c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800c110:	3107      	adds	r1, #7
 800c112:	08c8      	lsrs	r0, r1, #3
 800c114:	4770      	bx	lr
 800c116:	4608      	mov	r0, r1
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop

0800c11c <ai_array_get_data_byte_size>:
 800c11c:	b161      	cbz	r1, 800c138 <ai_array_get_data_byte_size+0x1c>
 800c11e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800c122:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800c126:	fb03 f101 	mul.w	r1, r3, r1
 800c12a:	1dc8      	adds	r0, r1, #7
 800c12c:	f020 0007 	bic.w	r0, r0, #7
 800c130:	40d0      	lsrs	r0, r2
 800c132:	3007      	adds	r0, #7
 800c134:	08c0      	lsrs	r0, r0, #3
 800c136:	4770      	bx	lr
 800c138:	4608      	mov	r0, r1
 800c13a:	4770      	bx	lr

0800c13c <ai_version_get>:
 800c13c:	0212      	lsls	r2, r2, #8
 800c13e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c142:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800c146:	4770      	bx	lr

0800c148 <get_tensor_byte_size>:
 800c148:	b430      	push	{r4, r5}
 800c14a:	6985      	ldr	r5, [r0, #24]
 800c14c:	68c4      	ldr	r4, [r0, #12]
 800c14e:	6941      	ldr	r1, [r0, #20]
 800c150:	4b06      	ldr	r3, [pc, #24]	; (800c16c <get_tensor_byte_size+0x24>)
 800c152:	6828      	ldr	r0, [r5, #0]
 800c154:	4a06      	ldr	r2, [pc, #24]	; (800c170 <get_tensor_byte_size+0x28>)
 800c156:	4003      	ands	r3, r0
 800c158:	68c9      	ldr	r1, [r1, #12]
 800c15a:	68e0      	ldr	r0, [r4, #12]
 800c15c:	4293      	cmp	r3, r2
 800c15e:	fb01 f000 	mul.w	r0, r1, r0
 800c162:	d101      	bne.n	800c168 <get_tensor_byte_size+0x20>
 800c164:	3007      	adds	r0, #7
 800c166:	08c0      	lsrs	r0, r0, #3
 800c168:	bc30      	pop	{r4, r5}
 800c16a:	4770      	bx	lr
 800c16c:	017fffff 	.word	0x017fffff
 800c170:	000400c0 	.word	0x000400c0

0800c174 <malloc>:
 800c174:	4b02      	ldr	r3, [pc, #8]	; (800c180 <malloc+0xc>)
 800c176:	4601      	mov	r1, r0
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	f000 b823 	b.w	800c1c4 <_malloc_r>
 800c17e:	bf00      	nop
 800c180:	24000674 	.word	0x24000674

0800c184 <sbrk_aligned>:
 800c184:	b570      	push	{r4, r5, r6, lr}
 800c186:	4e0e      	ldr	r6, [pc, #56]	; (800c1c0 <sbrk_aligned+0x3c>)
 800c188:	460c      	mov	r4, r1
 800c18a:	6831      	ldr	r1, [r6, #0]
 800c18c:	4605      	mov	r5, r0
 800c18e:	b911      	cbnz	r1, 800c196 <sbrk_aligned+0x12>
 800c190:	f000 fe88 	bl	800cea4 <_sbrk_r>
 800c194:	6030      	str	r0, [r6, #0]
 800c196:	4621      	mov	r1, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	f000 fe83 	bl	800cea4 <_sbrk_r>
 800c19e:	1c43      	adds	r3, r0, #1
 800c1a0:	d00a      	beq.n	800c1b8 <sbrk_aligned+0x34>
 800c1a2:	1cc4      	adds	r4, r0, #3
 800c1a4:	f024 0403 	bic.w	r4, r4, #3
 800c1a8:	42a0      	cmp	r0, r4
 800c1aa:	d007      	beq.n	800c1bc <sbrk_aligned+0x38>
 800c1ac:	1a21      	subs	r1, r4, r0
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f000 fe78 	bl	800cea4 <_sbrk_r>
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d101      	bne.n	800c1bc <sbrk_aligned+0x38>
 800c1b8:	f04f 34ff 	mov.w	r4, #4294967295
 800c1bc:	4620      	mov	r0, r4
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	240030f8 	.word	0x240030f8

0800c1c4 <_malloc_r>:
 800c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c8:	1ccd      	adds	r5, r1, #3
 800c1ca:	f025 0503 	bic.w	r5, r5, #3
 800c1ce:	3508      	adds	r5, #8
 800c1d0:	2d0c      	cmp	r5, #12
 800c1d2:	bf38      	it	cc
 800c1d4:	250c      	movcc	r5, #12
 800c1d6:	2d00      	cmp	r5, #0
 800c1d8:	4607      	mov	r7, r0
 800c1da:	db01      	blt.n	800c1e0 <_malloc_r+0x1c>
 800c1dc:	42a9      	cmp	r1, r5
 800c1de:	d905      	bls.n	800c1ec <_malloc_r+0x28>
 800c1e0:	230c      	movs	r3, #12
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	2600      	movs	r6, #0
 800c1e6:	4630      	mov	r0, r6
 800c1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c2c0 <_malloc_r+0xfc>
 800c1f0:	f000 f868 	bl	800c2c4 <__malloc_lock>
 800c1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1f8:	461c      	mov	r4, r3
 800c1fa:	bb5c      	cbnz	r4, 800c254 <_malloc_r+0x90>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7ff ffc0 	bl	800c184 <sbrk_aligned>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	4604      	mov	r4, r0
 800c208:	d155      	bne.n	800c2b6 <_malloc_r+0xf2>
 800c20a:	f8d8 4000 	ldr.w	r4, [r8]
 800c20e:	4626      	mov	r6, r4
 800c210:	2e00      	cmp	r6, #0
 800c212:	d145      	bne.n	800c2a0 <_malloc_r+0xdc>
 800c214:	2c00      	cmp	r4, #0
 800c216:	d048      	beq.n	800c2aa <_malloc_r+0xe6>
 800c218:	6823      	ldr	r3, [r4, #0]
 800c21a:	4631      	mov	r1, r6
 800c21c:	4638      	mov	r0, r7
 800c21e:	eb04 0903 	add.w	r9, r4, r3
 800c222:	f000 fe3f 	bl	800cea4 <_sbrk_r>
 800c226:	4581      	cmp	r9, r0
 800c228:	d13f      	bne.n	800c2aa <_malloc_r+0xe6>
 800c22a:	6821      	ldr	r1, [r4, #0]
 800c22c:	1a6d      	subs	r5, r5, r1
 800c22e:	4629      	mov	r1, r5
 800c230:	4638      	mov	r0, r7
 800c232:	f7ff ffa7 	bl	800c184 <sbrk_aligned>
 800c236:	3001      	adds	r0, #1
 800c238:	d037      	beq.n	800c2aa <_malloc_r+0xe6>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	442b      	add	r3, r5
 800c23e:	6023      	str	r3, [r4, #0]
 800c240:	f8d8 3000 	ldr.w	r3, [r8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d038      	beq.n	800c2ba <_malloc_r+0xf6>
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	42a2      	cmp	r2, r4
 800c24c:	d12b      	bne.n	800c2a6 <_malloc_r+0xe2>
 800c24e:	2200      	movs	r2, #0
 800c250:	605a      	str	r2, [r3, #4]
 800c252:	e00f      	b.n	800c274 <_malloc_r+0xb0>
 800c254:	6822      	ldr	r2, [r4, #0]
 800c256:	1b52      	subs	r2, r2, r5
 800c258:	d41f      	bmi.n	800c29a <_malloc_r+0xd6>
 800c25a:	2a0b      	cmp	r2, #11
 800c25c:	d917      	bls.n	800c28e <_malloc_r+0xca>
 800c25e:	1961      	adds	r1, r4, r5
 800c260:	42a3      	cmp	r3, r4
 800c262:	6025      	str	r5, [r4, #0]
 800c264:	bf18      	it	ne
 800c266:	6059      	strne	r1, [r3, #4]
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	bf08      	it	eq
 800c26c:	f8c8 1000 	streq.w	r1, [r8]
 800c270:	5162      	str	r2, [r4, r5]
 800c272:	604b      	str	r3, [r1, #4]
 800c274:	4638      	mov	r0, r7
 800c276:	f104 060b 	add.w	r6, r4, #11
 800c27a:	f000 f829 	bl	800c2d0 <__malloc_unlock>
 800c27e:	f026 0607 	bic.w	r6, r6, #7
 800c282:	1d23      	adds	r3, r4, #4
 800c284:	1af2      	subs	r2, r6, r3
 800c286:	d0ae      	beq.n	800c1e6 <_malloc_r+0x22>
 800c288:	1b9b      	subs	r3, r3, r6
 800c28a:	50a3      	str	r3, [r4, r2]
 800c28c:	e7ab      	b.n	800c1e6 <_malloc_r+0x22>
 800c28e:	42a3      	cmp	r3, r4
 800c290:	6862      	ldr	r2, [r4, #4]
 800c292:	d1dd      	bne.n	800c250 <_malloc_r+0x8c>
 800c294:	f8c8 2000 	str.w	r2, [r8]
 800c298:	e7ec      	b.n	800c274 <_malloc_r+0xb0>
 800c29a:	4623      	mov	r3, r4
 800c29c:	6864      	ldr	r4, [r4, #4]
 800c29e:	e7ac      	b.n	800c1fa <_malloc_r+0x36>
 800c2a0:	4634      	mov	r4, r6
 800c2a2:	6876      	ldr	r6, [r6, #4]
 800c2a4:	e7b4      	b.n	800c210 <_malloc_r+0x4c>
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	e7cc      	b.n	800c244 <_malloc_r+0x80>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f000 f80e 	bl	800c2d0 <__malloc_unlock>
 800c2b4:	e797      	b.n	800c1e6 <_malloc_r+0x22>
 800c2b6:	6025      	str	r5, [r4, #0]
 800c2b8:	e7dc      	b.n	800c274 <_malloc_r+0xb0>
 800c2ba:	605b      	str	r3, [r3, #4]
 800c2bc:	deff      	udf	#255	; 0xff
 800c2be:	bf00      	nop
 800c2c0:	240030f4 	.word	0x240030f4

0800c2c4 <__malloc_lock>:
 800c2c4:	4801      	ldr	r0, [pc, #4]	; (800c2cc <__malloc_lock+0x8>)
 800c2c6:	f000 be3a 	b.w	800cf3e <__retarget_lock_acquire_recursive>
 800c2ca:	bf00      	nop
 800c2cc:	2400323c 	.word	0x2400323c

0800c2d0 <__malloc_unlock>:
 800c2d0:	4801      	ldr	r0, [pc, #4]	; (800c2d8 <__malloc_unlock+0x8>)
 800c2d2:	f000 be35 	b.w	800cf40 <__retarget_lock_release_recursive>
 800c2d6:	bf00      	nop
 800c2d8:	2400323c 	.word	0x2400323c

0800c2dc <_realloc_r>:
 800c2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	4614      	mov	r4, r2
 800c2e4:	460e      	mov	r6, r1
 800c2e6:	b921      	cbnz	r1, 800c2f2 <_realloc_r+0x16>
 800c2e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	f7ff bf69 	b.w	800c1c4 <_malloc_r>
 800c2f2:	b92a      	cbnz	r2, 800c300 <_realloc_r+0x24>
 800c2f4:	f001 fc28 	bl	800db48 <_free_r>
 800c2f8:	4625      	mov	r5, r4
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c300:	f001 ffea 	bl	800e2d8 <_malloc_usable_size_r>
 800c304:	4284      	cmp	r4, r0
 800c306:	4607      	mov	r7, r0
 800c308:	d802      	bhi.n	800c310 <_realloc_r+0x34>
 800c30a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c30e:	d812      	bhi.n	800c336 <_realloc_r+0x5a>
 800c310:	4621      	mov	r1, r4
 800c312:	4640      	mov	r0, r8
 800c314:	f7ff ff56 	bl	800c1c4 <_malloc_r>
 800c318:	4605      	mov	r5, r0
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d0ed      	beq.n	800c2fa <_realloc_r+0x1e>
 800c31e:	42bc      	cmp	r4, r7
 800c320:	4622      	mov	r2, r4
 800c322:	4631      	mov	r1, r6
 800c324:	bf28      	it	cs
 800c326:	463a      	movcs	r2, r7
 800c328:	f000 fe0b 	bl	800cf42 <memcpy>
 800c32c:	4631      	mov	r1, r6
 800c32e:	4640      	mov	r0, r8
 800c330:	f001 fc0a 	bl	800db48 <_free_r>
 800c334:	e7e1      	b.n	800c2fa <_realloc_r+0x1e>
 800c336:	4635      	mov	r5, r6
 800c338:	e7df      	b.n	800c2fa <_realloc_r+0x1e>

0800c33a <__cvt>:
 800c33a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c33c:	ed2d 8b02 	vpush	{d8}
 800c340:	eeb0 8b40 	vmov.f64	d8, d0
 800c344:	b085      	sub	sp, #20
 800c346:	4617      	mov	r7, r2
 800c348:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c34a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c34c:	ee18 2a90 	vmov	r2, s17
 800c350:	f025 0520 	bic.w	r5, r5, #32
 800c354:	2a00      	cmp	r2, #0
 800c356:	bfb6      	itet	lt
 800c358:	222d      	movlt	r2, #45	; 0x2d
 800c35a:	2200      	movge	r2, #0
 800c35c:	eeb1 8b40 	vneglt.f64	d8, d0
 800c360:	2d46      	cmp	r5, #70	; 0x46
 800c362:	460c      	mov	r4, r1
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	d004      	beq.n	800c372 <__cvt+0x38>
 800c368:	2d45      	cmp	r5, #69	; 0x45
 800c36a:	d100      	bne.n	800c36e <__cvt+0x34>
 800c36c:	3401      	adds	r4, #1
 800c36e:	2102      	movs	r1, #2
 800c370:	e000      	b.n	800c374 <__cvt+0x3a>
 800c372:	2103      	movs	r1, #3
 800c374:	ab03      	add	r3, sp, #12
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	ab02      	add	r3, sp, #8
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	4622      	mov	r2, r4
 800c37e:	4633      	mov	r3, r6
 800c380:	eeb0 0b48 	vmov.f64	d0, d8
 800c384:	f000 fe74 	bl	800d070 <_dtoa_r>
 800c388:	2d47      	cmp	r5, #71	; 0x47
 800c38a:	d101      	bne.n	800c390 <__cvt+0x56>
 800c38c:	07fb      	lsls	r3, r7, #31
 800c38e:	d51a      	bpl.n	800c3c6 <__cvt+0x8c>
 800c390:	2d46      	cmp	r5, #70	; 0x46
 800c392:	eb00 0204 	add.w	r2, r0, r4
 800c396:	d10c      	bne.n	800c3b2 <__cvt+0x78>
 800c398:	7803      	ldrb	r3, [r0, #0]
 800c39a:	2b30      	cmp	r3, #48	; 0x30
 800c39c:	d107      	bne.n	800c3ae <__cvt+0x74>
 800c39e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a6:	bf1c      	itt	ne
 800c3a8:	f1c4 0401 	rsbne	r4, r4, #1
 800c3ac:	6034      	strne	r4, [r6, #0]
 800c3ae:	6833      	ldr	r3, [r6, #0]
 800c3b0:	441a      	add	r2, r3
 800c3b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ba:	bf08      	it	eq
 800c3bc:	9203      	streq	r2, [sp, #12]
 800c3be:	2130      	movs	r1, #48	; 0x30
 800c3c0:	9b03      	ldr	r3, [sp, #12]
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d307      	bcc.n	800c3d6 <__cvt+0x9c>
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3ca:	1a1b      	subs	r3, r3, r0
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	b005      	add	sp, #20
 800c3d0:	ecbd 8b02 	vpop	{d8}
 800c3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3d6:	1c5c      	adds	r4, r3, #1
 800c3d8:	9403      	str	r4, [sp, #12]
 800c3da:	7019      	strb	r1, [r3, #0]
 800c3dc:	e7f0      	b.n	800c3c0 <__cvt+0x86>

0800c3de <__exponent>:
 800c3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2900      	cmp	r1, #0
 800c3e4:	bfb8      	it	lt
 800c3e6:	4249      	neglt	r1, r1
 800c3e8:	f803 2b02 	strb.w	r2, [r3], #2
 800c3ec:	bfb4      	ite	lt
 800c3ee:	222d      	movlt	r2, #45	; 0x2d
 800c3f0:	222b      	movge	r2, #43	; 0x2b
 800c3f2:	2909      	cmp	r1, #9
 800c3f4:	7042      	strb	r2, [r0, #1]
 800c3f6:	dd2a      	ble.n	800c44e <__exponent+0x70>
 800c3f8:	f10d 0207 	add.w	r2, sp, #7
 800c3fc:	4617      	mov	r7, r2
 800c3fe:	260a      	movs	r6, #10
 800c400:	4694      	mov	ip, r2
 800c402:	fb91 f5f6 	sdiv	r5, r1, r6
 800c406:	fb06 1415 	mls	r4, r6, r5, r1
 800c40a:	3430      	adds	r4, #48	; 0x30
 800c40c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c410:	460c      	mov	r4, r1
 800c412:	2c63      	cmp	r4, #99	; 0x63
 800c414:	f102 32ff 	add.w	r2, r2, #4294967295
 800c418:	4629      	mov	r1, r5
 800c41a:	dcf1      	bgt.n	800c400 <__exponent+0x22>
 800c41c:	3130      	adds	r1, #48	; 0x30
 800c41e:	f1ac 0402 	sub.w	r4, ip, #2
 800c422:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c426:	1c41      	adds	r1, r0, #1
 800c428:	4622      	mov	r2, r4
 800c42a:	42ba      	cmp	r2, r7
 800c42c:	d30a      	bcc.n	800c444 <__exponent+0x66>
 800c42e:	f10d 0209 	add.w	r2, sp, #9
 800c432:	eba2 020c 	sub.w	r2, r2, ip
 800c436:	42bc      	cmp	r4, r7
 800c438:	bf88      	it	hi
 800c43a:	2200      	movhi	r2, #0
 800c43c:	4413      	add	r3, r2
 800c43e:	1a18      	subs	r0, r3, r0
 800c440:	b003      	add	sp, #12
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c448:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c44c:	e7ed      	b.n	800c42a <__exponent+0x4c>
 800c44e:	2330      	movs	r3, #48	; 0x30
 800c450:	3130      	adds	r1, #48	; 0x30
 800c452:	7083      	strb	r3, [r0, #2]
 800c454:	70c1      	strb	r1, [r0, #3]
 800c456:	1d03      	adds	r3, r0, #4
 800c458:	e7f1      	b.n	800c43e <__exponent+0x60>
 800c45a:	0000      	movs	r0, r0
 800c45c:	0000      	movs	r0, r0
	...

0800c460 <_printf_float>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	b08b      	sub	sp, #44	; 0x2c
 800c466:	460c      	mov	r4, r1
 800c468:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c46c:	4616      	mov	r6, r2
 800c46e:	461f      	mov	r7, r3
 800c470:	4605      	mov	r5, r0
 800c472:	f000 fcdf 	bl	800ce34 <_localeconv_r>
 800c476:	f8d0 b000 	ldr.w	fp, [r0]
 800c47a:	4658      	mov	r0, fp
 800c47c:	f7f3 ff80 	bl	8000380 <strlen>
 800c480:	2300      	movs	r3, #0
 800c482:	9308      	str	r3, [sp, #32]
 800c484:	f8d8 3000 	ldr.w	r3, [r8]
 800c488:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c48c:	6822      	ldr	r2, [r4, #0]
 800c48e:	3307      	adds	r3, #7
 800c490:	f023 0307 	bic.w	r3, r3, #7
 800c494:	f103 0108 	add.w	r1, r3, #8
 800c498:	f8c8 1000 	str.w	r1, [r8]
 800c49c:	ed93 0b00 	vldr	d0, [r3]
 800c4a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800c700 <_printf_float+0x2a0>
 800c4a4:	eeb0 7bc0 	vabs.f64	d7, d0
 800c4a8:	eeb4 7b46 	vcmp.f64	d7, d6
 800c4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	dd24      	ble.n	800c502 <_printf_float+0xa2>
 800c4b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c0:	d502      	bpl.n	800c4c8 <_printf_float+0x68>
 800c4c2:	232d      	movs	r3, #45	; 0x2d
 800c4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4c8:	498f      	ldr	r1, [pc, #572]	; (800c708 <_printf_float+0x2a8>)
 800c4ca:	4b90      	ldr	r3, [pc, #576]	; (800c70c <_printf_float+0x2ac>)
 800c4cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c4d0:	bf94      	ite	ls
 800c4d2:	4688      	movls	r8, r1
 800c4d4:	4698      	movhi	r8, r3
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	6123      	str	r3, [r4, #16]
 800c4da:	f022 0204 	bic.w	r2, r2, #4
 800c4de:	2300      	movs	r3, #0
 800c4e0:	6022      	str	r2, [r4, #0]
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	9700      	str	r7, [sp, #0]
 800c4e6:	4633      	mov	r3, r6
 800c4e8:	aa09      	add	r2, sp, #36	; 0x24
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f000 f9d1 	bl	800c894 <_printf_common>
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	f040 808a 	bne.w	800c60c <_printf_float+0x1ac>
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fc:	b00b      	add	sp, #44	; 0x2c
 800c4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c502:	eeb4 0b40 	vcmp.f64	d0, d0
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d709      	bvc.n	800c520 <_printf_float+0xc0>
 800c50c:	ee10 3a90 	vmov	r3, s1
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfbc      	itt	lt
 800c514:	232d      	movlt	r3, #45	; 0x2d
 800c516:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c51a:	497d      	ldr	r1, [pc, #500]	; (800c710 <_printf_float+0x2b0>)
 800c51c:	4b7d      	ldr	r3, [pc, #500]	; (800c714 <_printf_float+0x2b4>)
 800c51e:	e7d5      	b.n	800c4cc <_printf_float+0x6c>
 800c520:	6863      	ldr	r3, [r4, #4]
 800c522:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c526:	9104      	str	r1, [sp, #16]
 800c528:	1c59      	adds	r1, r3, #1
 800c52a:	d13c      	bne.n	800c5a6 <_printf_float+0x146>
 800c52c:	2306      	movs	r3, #6
 800c52e:	6063      	str	r3, [r4, #4]
 800c530:	2300      	movs	r3, #0
 800c532:	9303      	str	r3, [sp, #12]
 800c534:	ab08      	add	r3, sp, #32
 800c536:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c53a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c53e:	ab07      	add	r3, sp, #28
 800c540:	6861      	ldr	r1, [r4, #4]
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	6022      	str	r2, [r4, #0]
 800c546:	f10d 031b 	add.w	r3, sp, #27
 800c54a:	4628      	mov	r0, r5
 800c54c:	f7ff fef5 	bl	800c33a <__cvt>
 800c550:	9b04      	ldr	r3, [sp, #16]
 800c552:	9907      	ldr	r1, [sp, #28]
 800c554:	2b47      	cmp	r3, #71	; 0x47
 800c556:	4680      	mov	r8, r0
 800c558:	d108      	bne.n	800c56c <_printf_float+0x10c>
 800c55a:	1cc8      	adds	r0, r1, #3
 800c55c:	db02      	blt.n	800c564 <_printf_float+0x104>
 800c55e:	6863      	ldr	r3, [r4, #4]
 800c560:	4299      	cmp	r1, r3
 800c562:	dd41      	ble.n	800c5e8 <_printf_float+0x188>
 800c564:	f1a9 0902 	sub.w	r9, r9, #2
 800c568:	fa5f f989 	uxtb.w	r9, r9
 800c56c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c570:	d820      	bhi.n	800c5b4 <_printf_float+0x154>
 800c572:	3901      	subs	r1, #1
 800c574:	464a      	mov	r2, r9
 800c576:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c57a:	9107      	str	r1, [sp, #28]
 800c57c:	f7ff ff2f 	bl	800c3de <__exponent>
 800c580:	9a08      	ldr	r2, [sp, #32]
 800c582:	9004      	str	r0, [sp, #16]
 800c584:	1813      	adds	r3, r2, r0
 800c586:	2a01      	cmp	r2, #1
 800c588:	6123      	str	r3, [r4, #16]
 800c58a:	dc02      	bgt.n	800c592 <_printf_float+0x132>
 800c58c:	6822      	ldr	r2, [r4, #0]
 800c58e:	07d2      	lsls	r2, r2, #31
 800c590:	d501      	bpl.n	800c596 <_printf_float+0x136>
 800c592:	3301      	adds	r3, #1
 800c594:	6123      	str	r3, [r4, #16]
 800c596:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d0a2      	beq.n	800c4e4 <_printf_float+0x84>
 800c59e:	232d      	movs	r3, #45	; 0x2d
 800c5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5a4:	e79e      	b.n	800c4e4 <_printf_float+0x84>
 800c5a6:	9904      	ldr	r1, [sp, #16]
 800c5a8:	2947      	cmp	r1, #71	; 0x47
 800c5aa:	d1c1      	bne.n	800c530 <_printf_float+0xd0>
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1bf      	bne.n	800c530 <_printf_float+0xd0>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e7bc      	b.n	800c52e <_printf_float+0xce>
 800c5b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c5b8:	d118      	bne.n	800c5ec <_printf_float+0x18c>
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	6863      	ldr	r3, [r4, #4]
 800c5be:	dd0b      	ble.n	800c5d8 <_printf_float+0x178>
 800c5c0:	6121      	str	r1, [r4, #16]
 800c5c2:	b913      	cbnz	r3, 800c5ca <_printf_float+0x16a>
 800c5c4:	6822      	ldr	r2, [r4, #0]
 800c5c6:	07d0      	lsls	r0, r2, #31
 800c5c8:	d502      	bpl.n	800c5d0 <_printf_float+0x170>
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	440b      	add	r3, r1
 800c5ce:	6123      	str	r3, [r4, #16]
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	e7de      	b.n	800c596 <_printf_float+0x136>
 800c5d8:	b913      	cbnz	r3, 800c5e0 <_printf_float+0x180>
 800c5da:	6822      	ldr	r2, [r4, #0]
 800c5dc:	07d2      	lsls	r2, r2, #31
 800c5de:	d501      	bpl.n	800c5e4 <_printf_float+0x184>
 800c5e0:	3302      	adds	r3, #2
 800c5e2:	e7f4      	b.n	800c5ce <_printf_float+0x16e>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e7f2      	b.n	800c5ce <_printf_float+0x16e>
 800c5e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c5ec:	9b08      	ldr	r3, [sp, #32]
 800c5ee:	4299      	cmp	r1, r3
 800c5f0:	db05      	blt.n	800c5fe <_printf_float+0x19e>
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	6121      	str	r1, [r4, #16]
 800c5f6:	07d8      	lsls	r0, r3, #31
 800c5f8:	d5ea      	bpl.n	800c5d0 <_printf_float+0x170>
 800c5fa:	1c4b      	adds	r3, r1, #1
 800c5fc:	e7e7      	b.n	800c5ce <_printf_float+0x16e>
 800c5fe:	2900      	cmp	r1, #0
 800c600:	bfd4      	ite	le
 800c602:	f1c1 0202 	rsble	r2, r1, #2
 800c606:	2201      	movgt	r2, #1
 800c608:	4413      	add	r3, r2
 800c60a:	e7e0      	b.n	800c5ce <_printf_float+0x16e>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	055a      	lsls	r2, r3, #21
 800c610:	d407      	bmi.n	800c622 <_printf_float+0x1c2>
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	4642      	mov	r2, r8
 800c616:	4631      	mov	r1, r6
 800c618:	4628      	mov	r0, r5
 800c61a:	47b8      	blx	r7
 800c61c:	3001      	adds	r0, #1
 800c61e:	d12a      	bne.n	800c676 <_printf_float+0x216>
 800c620:	e76a      	b.n	800c4f8 <_printf_float+0x98>
 800c622:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c626:	f240 80e0 	bls.w	800c7ea <_printf_float+0x38a>
 800c62a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c62e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c636:	d133      	bne.n	800c6a0 <_printf_float+0x240>
 800c638:	4a37      	ldr	r2, [pc, #220]	; (800c718 <_printf_float+0x2b8>)
 800c63a:	2301      	movs	r3, #1
 800c63c:	4631      	mov	r1, r6
 800c63e:	4628      	mov	r0, r5
 800c640:	47b8      	blx	r7
 800c642:	3001      	adds	r0, #1
 800c644:	f43f af58 	beq.w	800c4f8 <_printf_float+0x98>
 800c648:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	db02      	blt.n	800c656 <_printf_float+0x1f6>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	07d8      	lsls	r0, r3, #31
 800c654:	d50f      	bpl.n	800c676 <_printf_float+0x216>
 800c656:	4653      	mov	r3, sl
 800c658:	465a      	mov	r2, fp
 800c65a:	4631      	mov	r1, r6
 800c65c:	4628      	mov	r0, r5
 800c65e:	47b8      	blx	r7
 800c660:	3001      	adds	r0, #1
 800c662:	f43f af49 	beq.w	800c4f8 <_printf_float+0x98>
 800c666:	f04f 0800 	mov.w	r8, #0
 800c66a:	f104 091a 	add.w	r9, r4, #26
 800c66e:	9b08      	ldr	r3, [sp, #32]
 800c670:	3b01      	subs	r3, #1
 800c672:	4543      	cmp	r3, r8
 800c674:	dc09      	bgt.n	800c68a <_printf_float+0x22a>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	079b      	lsls	r3, r3, #30
 800c67a:	f100 8106 	bmi.w	800c88a <_printf_float+0x42a>
 800c67e:	68e0      	ldr	r0, [r4, #12]
 800c680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c682:	4298      	cmp	r0, r3
 800c684:	bfb8      	it	lt
 800c686:	4618      	movlt	r0, r3
 800c688:	e738      	b.n	800c4fc <_printf_float+0x9c>
 800c68a:	2301      	movs	r3, #1
 800c68c:	464a      	mov	r2, r9
 800c68e:	4631      	mov	r1, r6
 800c690:	4628      	mov	r0, r5
 800c692:	47b8      	blx	r7
 800c694:	3001      	adds	r0, #1
 800c696:	f43f af2f 	beq.w	800c4f8 <_printf_float+0x98>
 800c69a:	f108 0801 	add.w	r8, r8, #1
 800c69e:	e7e6      	b.n	800c66e <_printf_float+0x20e>
 800c6a0:	9b07      	ldr	r3, [sp, #28]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dc3a      	bgt.n	800c71c <_printf_float+0x2bc>
 800c6a6:	4a1c      	ldr	r2, [pc, #112]	; (800c718 <_printf_float+0x2b8>)
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	f43f af21 	beq.w	800c4f8 <_printf_float+0x98>
 800c6b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	d102      	bne.n	800c6c4 <_printf_float+0x264>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	07d9      	lsls	r1, r3, #31
 800c6c2:	d5d8      	bpl.n	800c676 <_printf_float+0x216>
 800c6c4:	4653      	mov	r3, sl
 800c6c6:	465a      	mov	r2, fp
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f43f af12 	beq.w	800c4f8 <_printf_float+0x98>
 800c6d4:	f04f 0900 	mov.w	r9, #0
 800c6d8:	f104 0a1a 	add.w	sl, r4, #26
 800c6dc:	9b07      	ldr	r3, [sp, #28]
 800c6de:	425b      	negs	r3, r3
 800c6e0:	454b      	cmp	r3, r9
 800c6e2:	dc01      	bgt.n	800c6e8 <_printf_float+0x288>
 800c6e4:	9b08      	ldr	r3, [sp, #32]
 800c6e6:	e795      	b.n	800c614 <_printf_float+0x1b4>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	4652      	mov	r2, sl
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	47b8      	blx	r7
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	f43f af00 	beq.w	800c4f8 <_printf_float+0x98>
 800c6f8:	f109 0901 	add.w	r9, r9, #1
 800c6fc:	e7ee      	b.n	800c6dc <_printf_float+0x27c>
 800c6fe:	bf00      	nop
 800c700:	ffffffff 	.word	0xffffffff
 800c704:	7fefffff 	.word	0x7fefffff
 800c708:	08013ce8 	.word	0x08013ce8
 800c70c:	08013cec 	.word	0x08013cec
 800c710:	08013cf0 	.word	0x08013cf0
 800c714:	08013cf4 	.word	0x08013cf4
 800c718:	08013cf8 	.word	0x08013cf8
 800c71c:	9a08      	ldr	r2, [sp, #32]
 800c71e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c720:	429a      	cmp	r2, r3
 800c722:	bfa8      	it	ge
 800c724:	461a      	movge	r2, r3
 800c726:	2a00      	cmp	r2, #0
 800c728:	4691      	mov	r9, r2
 800c72a:	dc38      	bgt.n	800c79e <_printf_float+0x33e>
 800c72c:	2300      	movs	r3, #0
 800c72e:	9305      	str	r3, [sp, #20]
 800c730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c734:	f104 021a 	add.w	r2, r4, #26
 800c738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c73a:	9905      	ldr	r1, [sp, #20]
 800c73c:	9304      	str	r3, [sp, #16]
 800c73e:	eba3 0309 	sub.w	r3, r3, r9
 800c742:	428b      	cmp	r3, r1
 800c744:	dc33      	bgt.n	800c7ae <_printf_float+0x34e>
 800c746:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	db3c      	blt.n	800c7c8 <_printf_float+0x368>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	07da      	lsls	r2, r3, #31
 800c752:	d439      	bmi.n	800c7c8 <_printf_float+0x368>
 800c754:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800c758:	eba2 0903 	sub.w	r9, r2, r3
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	4591      	cmp	r9, r2
 800c762:	bfa8      	it	ge
 800c764:	4691      	movge	r9, r2
 800c766:	f1b9 0f00 	cmp.w	r9, #0
 800c76a:	dc35      	bgt.n	800c7d8 <_printf_float+0x378>
 800c76c:	f04f 0800 	mov.w	r8, #0
 800c770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c774:	f104 0a1a 	add.w	sl, r4, #26
 800c778:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c77c:	1a9b      	subs	r3, r3, r2
 800c77e:	eba3 0309 	sub.w	r3, r3, r9
 800c782:	4543      	cmp	r3, r8
 800c784:	f77f af77 	ble.w	800c676 <_printf_float+0x216>
 800c788:	2301      	movs	r3, #1
 800c78a:	4652      	mov	r2, sl
 800c78c:	4631      	mov	r1, r6
 800c78e:	4628      	mov	r0, r5
 800c790:	47b8      	blx	r7
 800c792:	3001      	adds	r0, #1
 800c794:	f43f aeb0 	beq.w	800c4f8 <_printf_float+0x98>
 800c798:	f108 0801 	add.w	r8, r8, #1
 800c79c:	e7ec      	b.n	800c778 <_printf_float+0x318>
 800c79e:	4613      	mov	r3, r2
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4642      	mov	r2, r8
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	47b8      	blx	r7
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d1bf      	bne.n	800c72c <_printf_float+0x2cc>
 800c7ac:	e6a4      	b.n	800c4f8 <_printf_float+0x98>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	9204      	str	r2, [sp, #16]
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f43f ae9d 	beq.w	800c4f8 <_printf_float+0x98>
 800c7be:	9b05      	ldr	r3, [sp, #20]
 800c7c0:	9a04      	ldr	r2, [sp, #16]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	e7b7      	b.n	800c738 <_printf_float+0x2d8>
 800c7c8:	4653      	mov	r3, sl
 800c7ca:	465a      	mov	r2, fp
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	d1be      	bne.n	800c754 <_printf_float+0x2f4>
 800c7d6:	e68f      	b.n	800c4f8 <_printf_float+0x98>
 800c7d8:	9a04      	ldr	r2, [sp, #16]
 800c7da:	464b      	mov	r3, r9
 800c7dc:	4442      	add	r2, r8
 800c7de:	4631      	mov	r1, r6
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	47b8      	blx	r7
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d1c1      	bne.n	800c76c <_printf_float+0x30c>
 800c7e8:	e686      	b.n	800c4f8 <_printf_float+0x98>
 800c7ea:	9a08      	ldr	r2, [sp, #32]
 800c7ec:	2a01      	cmp	r2, #1
 800c7ee:	dc01      	bgt.n	800c7f4 <_printf_float+0x394>
 800c7f0:	07db      	lsls	r3, r3, #31
 800c7f2:	d537      	bpl.n	800c864 <_printf_float+0x404>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	4642      	mov	r2, r8
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	47b8      	blx	r7
 800c7fe:	3001      	adds	r0, #1
 800c800:	f43f ae7a 	beq.w	800c4f8 <_printf_float+0x98>
 800c804:	4653      	mov	r3, sl
 800c806:	465a      	mov	r2, fp
 800c808:	4631      	mov	r1, r6
 800c80a:	4628      	mov	r0, r5
 800c80c:	47b8      	blx	r7
 800c80e:	3001      	adds	r0, #1
 800c810:	f43f ae72 	beq.w	800c4f8 <_printf_float+0x98>
 800c814:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c820:	9b08      	ldr	r3, [sp, #32]
 800c822:	d01a      	beq.n	800c85a <_printf_float+0x3fa>
 800c824:	3b01      	subs	r3, #1
 800c826:	f108 0201 	add.w	r2, r8, #1
 800c82a:	4631      	mov	r1, r6
 800c82c:	4628      	mov	r0, r5
 800c82e:	47b8      	blx	r7
 800c830:	3001      	adds	r0, #1
 800c832:	d10e      	bne.n	800c852 <_printf_float+0x3f2>
 800c834:	e660      	b.n	800c4f8 <_printf_float+0x98>
 800c836:	2301      	movs	r3, #1
 800c838:	464a      	mov	r2, r9
 800c83a:	4631      	mov	r1, r6
 800c83c:	4628      	mov	r0, r5
 800c83e:	47b8      	blx	r7
 800c840:	3001      	adds	r0, #1
 800c842:	f43f ae59 	beq.w	800c4f8 <_printf_float+0x98>
 800c846:	f108 0801 	add.w	r8, r8, #1
 800c84a:	9b08      	ldr	r3, [sp, #32]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	4543      	cmp	r3, r8
 800c850:	dcf1      	bgt.n	800c836 <_printf_float+0x3d6>
 800c852:	9b04      	ldr	r3, [sp, #16]
 800c854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c858:	e6dd      	b.n	800c616 <_printf_float+0x1b6>
 800c85a:	f04f 0800 	mov.w	r8, #0
 800c85e:	f104 091a 	add.w	r9, r4, #26
 800c862:	e7f2      	b.n	800c84a <_printf_float+0x3ea>
 800c864:	2301      	movs	r3, #1
 800c866:	4642      	mov	r2, r8
 800c868:	e7df      	b.n	800c82a <_printf_float+0x3ca>
 800c86a:	2301      	movs	r3, #1
 800c86c:	464a      	mov	r2, r9
 800c86e:	4631      	mov	r1, r6
 800c870:	4628      	mov	r0, r5
 800c872:	47b8      	blx	r7
 800c874:	3001      	adds	r0, #1
 800c876:	f43f ae3f 	beq.w	800c4f8 <_printf_float+0x98>
 800c87a:	f108 0801 	add.w	r8, r8, #1
 800c87e:	68e3      	ldr	r3, [r4, #12]
 800c880:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c882:	1a5b      	subs	r3, r3, r1
 800c884:	4543      	cmp	r3, r8
 800c886:	dcf0      	bgt.n	800c86a <_printf_float+0x40a>
 800c888:	e6f9      	b.n	800c67e <_printf_float+0x21e>
 800c88a:	f04f 0800 	mov.w	r8, #0
 800c88e:	f104 0919 	add.w	r9, r4, #25
 800c892:	e7f4      	b.n	800c87e <_printf_float+0x41e>

0800c894 <_printf_common>:
 800c894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	4616      	mov	r6, r2
 800c89a:	4699      	mov	r9, r3
 800c89c:	688a      	ldr	r2, [r1, #8]
 800c89e:	690b      	ldr	r3, [r1, #16]
 800c8a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	bfb8      	it	lt
 800c8a8:	4613      	movlt	r3, r2
 800c8aa:	6033      	str	r3, [r6, #0]
 800c8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b10a      	cbz	r2, 800c8ba <_printf_common+0x26>
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	6033      	str	r3, [r6, #0]
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	0699      	lsls	r1, r3, #26
 800c8be:	bf42      	ittt	mi
 800c8c0:	6833      	ldrmi	r3, [r6, #0]
 800c8c2:	3302      	addmi	r3, #2
 800c8c4:	6033      	strmi	r3, [r6, #0]
 800c8c6:	6825      	ldr	r5, [r4, #0]
 800c8c8:	f015 0506 	ands.w	r5, r5, #6
 800c8cc:	d106      	bne.n	800c8dc <_printf_common+0x48>
 800c8ce:	f104 0a19 	add.w	sl, r4, #25
 800c8d2:	68e3      	ldr	r3, [r4, #12]
 800c8d4:	6832      	ldr	r2, [r6, #0]
 800c8d6:	1a9b      	subs	r3, r3, r2
 800c8d8:	42ab      	cmp	r3, r5
 800c8da:	dc26      	bgt.n	800c92a <_printf_common+0x96>
 800c8dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8e0:	1e13      	subs	r3, r2, #0
 800c8e2:	6822      	ldr	r2, [r4, #0]
 800c8e4:	bf18      	it	ne
 800c8e6:	2301      	movne	r3, #1
 800c8e8:	0692      	lsls	r2, r2, #26
 800c8ea:	d42b      	bmi.n	800c944 <_printf_common+0xb0>
 800c8ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8f0:	4649      	mov	r1, r9
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	47c0      	blx	r8
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	d01e      	beq.n	800c938 <_printf_common+0xa4>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	6922      	ldr	r2, [r4, #16]
 800c8fe:	f003 0306 	and.w	r3, r3, #6
 800c902:	2b04      	cmp	r3, #4
 800c904:	bf02      	ittt	eq
 800c906:	68e5      	ldreq	r5, [r4, #12]
 800c908:	6833      	ldreq	r3, [r6, #0]
 800c90a:	1aed      	subeq	r5, r5, r3
 800c90c:	68a3      	ldr	r3, [r4, #8]
 800c90e:	bf0c      	ite	eq
 800c910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c914:	2500      	movne	r5, #0
 800c916:	4293      	cmp	r3, r2
 800c918:	bfc4      	itt	gt
 800c91a:	1a9b      	subgt	r3, r3, r2
 800c91c:	18ed      	addgt	r5, r5, r3
 800c91e:	2600      	movs	r6, #0
 800c920:	341a      	adds	r4, #26
 800c922:	42b5      	cmp	r5, r6
 800c924:	d11a      	bne.n	800c95c <_printf_common+0xc8>
 800c926:	2000      	movs	r0, #0
 800c928:	e008      	b.n	800c93c <_printf_common+0xa8>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4652      	mov	r2, sl
 800c92e:	4649      	mov	r1, r9
 800c930:	4638      	mov	r0, r7
 800c932:	47c0      	blx	r8
 800c934:	3001      	adds	r0, #1
 800c936:	d103      	bne.n	800c940 <_printf_common+0xac>
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c940:	3501      	adds	r5, #1
 800c942:	e7c6      	b.n	800c8d2 <_printf_common+0x3e>
 800c944:	18e1      	adds	r1, r4, r3
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	2030      	movs	r0, #48	; 0x30
 800c94a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c94e:	4422      	add	r2, r4
 800c950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c958:	3302      	adds	r3, #2
 800c95a:	e7c7      	b.n	800c8ec <_printf_common+0x58>
 800c95c:	2301      	movs	r3, #1
 800c95e:	4622      	mov	r2, r4
 800c960:	4649      	mov	r1, r9
 800c962:	4638      	mov	r0, r7
 800c964:	47c0      	blx	r8
 800c966:	3001      	adds	r0, #1
 800c968:	d0e6      	beq.n	800c938 <_printf_common+0xa4>
 800c96a:	3601      	adds	r6, #1
 800c96c:	e7d9      	b.n	800c922 <_printf_common+0x8e>
	...

0800c970 <_printf_i>:
 800c970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c974:	7e0f      	ldrb	r7, [r1, #24]
 800c976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c978:	2f78      	cmp	r7, #120	; 0x78
 800c97a:	4691      	mov	r9, r2
 800c97c:	4680      	mov	r8, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	469a      	mov	sl, r3
 800c982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c986:	d807      	bhi.n	800c998 <_printf_i+0x28>
 800c988:	2f62      	cmp	r7, #98	; 0x62
 800c98a:	d80a      	bhi.n	800c9a2 <_printf_i+0x32>
 800c98c:	2f00      	cmp	r7, #0
 800c98e:	f000 80d4 	beq.w	800cb3a <_printf_i+0x1ca>
 800c992:	2f58      	cmp	r7, #88	; 0x58
 800c994:	f000 80c0 	beq.w	800cb18 <_printf_i+0x1a8>
 800c998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c99c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9a0:	e03a      	b.n	800ca18 <_printf_i+0xa8>
 800c9a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9a6:	2b15      	cmp	r3, #21
 800c9a8:	d8f6      	bhi.n	800c998 <_printf_i+0x28>
 800c9aa:	a101      	add	r1, pc, #4	; (adr r1, 800c9b0 <_printf_i+0x40>)
 800c9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9b0:	0800ca09 	.word	0x0800ca09
 800c9b4:	0800ca1d 	.word	0x0800ca1d
 800c9b8:	0800c999 	.word	0x0800c999
 800c9bc:	0800c999 	.word	0x0800c999
 800c9c0:	0800c999 	.word	0x0800c999
 800c9c4:	0800c999 	.word	0x0800c999
 800c9c8:	0800ca1d 	.word	0x0800ca1d
 800c9cc:	0800c999 	.word	0x0800c999
 800c9d0:	0800c999 	.word	0x0800c999
 800c9d4:	0800c999 	.word	0x0800c999
 800c9d8:	0800c999 	.word	0x0800c999
 800c9dc:	0800cb21 	.word	0x0800cb21
 800c9e0:	0800ca49 	.word	0x0800ca49
 800c9e4:	0800cadb 	.word	0x0800cadb
 800c9e8:	0800c999 	.word	0x0800c999
 800c9ec:	0800c999 	.word	0x0800c999
 800c9f0:	0800cb43 	.word	0x0800cb43
 800c9f4:	0800c999 	.word	0x0800c999
 800c9f8:	0800ca49 	.word	0x0800ca49
 800c9fc:	0800c999 	.word	0x0800c999
 800ca00:	0800c999 	.word	0x0800c999
 800ca04:	0800cae3 	.word	0x0800cae3
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	1d1a      	adds	r2, r3, #4
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	602a      	str	r2, [r5, #0]
 800ca10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e09f      	b.n	800cb5c <_printf_i+0x1ec>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	682b      	ldr	r3, [r5, #0]
 800ca20:	0607      	lsls	r7, r0, #24
 800ca22:	f103 0104 	add.w	r1, r3, #4
 800ca26:	6029      	str	r1, [r5, #0]
 800ca28:	d501      	bpl.n	800ca2e <_printf_i+0xbe>
 800ca2a:	681e      	ldr	r6, [r3, #0]
 800ca2c:	e003      	b.n	800ca36 <_printf_i+0xc6>
 800ca2e:	0646      	lsls	r6, r0, #25
 800ca30:	d5fb      	bpl.n	800ca2a <_printf_i+0xba>
 800ca32:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	da03      	bge.n	800ca42 <_printf_i+0xd2>
 800ca3a:	232d      	movs	r3, #45	; 0x2d
 800ca3c:	4276      	negs	r6, r6
 800ca3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca42:	485a      	ldr	r0, [pc, #360]	; (800cbac <_printf_i+0x23c>)
 800ca44:	230a      	movs	r3, #10
 800ca46:	e012      	b.n	800ca6e <_printf_i+0xfe>
 800ca48:	682b      	ldr	r3, [r5, #0]
 800ca4a:	6820      	ldr	r0, [r4, #0]
 800ca4c:	1d19      	adds	r1, r3, #4
 800ca4e:	6029      	str	r1, [r5, #0]
 800ca50:	0605      	lsls	r5, r0, #24
 800ca52:	d501      	bpl.n	800ca58 <_printf_i+0xe8>
 800ca54:	681e      	ldr	r6, [r3, #0]
 800ca56:	e002      	b.n	800ca5e <_printf_i+0xee>
 800ca58:	0641      	lsls	r1, r0, #25
 800ca5a:	d5fb      	bpl.n	800ca54 <_printf_i+0xe4>
 800ca5c:	881e      	ldrh	r6, [r3, #0]
 800ca5e:	4853      	ldr	r0, [pc, #332]	; (800cbac <_printf_i+0x23c>)
 800ca60:	2f6f      	cmp	r7, #111	; 0x6f
 800ca62:	bf0c      	ite	eq
 800ca64:	2308      	moveq	r3, #8
 800ca66:	230a      	movne	r3, #10
 800ca68:	2100      	movs	r1, #0
 800ca6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca6e:	6865      	ldr	r5, [r4, #4]
 800ca70:	60a5      	str	r5, [r4, #8]
 800ca72:	2d00      	cmp	r5, #0
 800ca74:	bfa2      	ittt	ge
 800ca76:	6821      	ldrge	r1, [r4, #0]
 800ca78:	f021 0104 	bicge.w	r1, r1, #4
 800ca7c:	6021      	strge	r1, [r4, #0]
 800ca7e:	b90e      	cbnz	r6, 800ca84 <_printf_i+0x114>
 800ca80:	2d00      	cmp	r5, #0
 800ca82:	d04b      	beq.n	800cb1c <_printf_i+0x1ac>
 800ca84:	4615      	mov	r5, r2
 800ca86:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca8a:	fb03 6711 	mls	r7, r3, r1, r6
 800ca8e:	5dc7      	ldrb	r7, [r0, r7]
 800ca90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca94:	4637      	mov	r7, r6
 800ca96:	42bb      	cmp	r3, r7
 800ca98:	460e      	mov	r6, r1
 800ca9a:	d9f4      	bls.n	800ca86 <_printf_i+0x116>
 800ca9c:	2b08      	cmp	r3, #8
 800ca9e:	d10b      	bne.n	800cab8 <_printf_i+0x148>
 800caa0:	6823      	ldr	r3, [r4, #0]
 800caa2:	07de      	lsls	r6, r3, #31
 800caa4:	d508      	bpl.n	800cab8 <_printf_i+0x148>
 800caa6:	6923      	ldr	r3, [r4, #16]
 800caa8:	6861      	ldr	r1, [r4, #4]
 800caaa:	4299      	cmp	r1, r3
 800caac:	bfde      	ittt	le
 800caae:	2330      	movle	r3, #48	; 0x30
 800cab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cab8:	1b52      	subs	r2, r2, r5
 800caba:	6122      	str	r2, [r4, #16]
 800cabc:	f8cd a000 	str.w	sl, [sp]
 800cac0:	464b      	mov	r3, r9
 800cac2:	aa03      	add	r2, sp, #12
 800cac4:	4621      	mov	r1, r4
 800cac6:	4640      	mov	r0, r8
 800cac8:	f7ff fee4 	bl	800c894 <_printf_common>
 800cacc:	3001      	adds	r0, #1
 800cace:	d14a      	bne.n	800cb66 <_printf_i+0x1f6>
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295
 800cad4:	b004      	add	sp, #16
 800cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	f043 0320 	orr.w	r3, r3, #32
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	4833      	ldr	r0, [pc, #204]	; (800cbb0 <_printf_i+0x240>)
 800cae4:	2778      	movs	r7, #120	; 0x78
 800cae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800caea:	6823      	ldr	r3, [r4, #0]
 800caec:	6829      	ldr	r1, [r5, #0]
 800caee:	061f      	lsls	r7, r3, #24
 800caf0:	f851 6b04 	ldr.w	r6, [r1], #4
 800caf4:	d402      	bmi.n	800cafc <_printf_i+0x18c>
 800caf6:	065f      	lsls	r7, r3, #25
 800caf8:	bf48      	it	mi
 800cafa:	b2b6      	uxthmi	r6, r6
 800cafc:	07df      	lsls	r7, r3, #31
 800cafe:	bf48      	it	mi
 800cb00:	f043 0320 	orrmi.w	r3, r3, #32
 800cb04:	6029      	str	r1, [r5, #0]
 800cb06:	bf48      	it	mi
 800cb08:	6023      	strmi	r3, [r4, #0]
 800cb0a:	b91e      	cbnz	r6, 800cb14 <_printf_i+0x1a4>
 800cb0c:	6823      	ldr	r3, [r4, #0]
 800cb0e:	f023 0320 	bic.w	r3, r3, #32
 800cb12:	6023      	str	r3, [r4, #0]
 800cb14:	2310      	movs	r3, #16
 800cb16:	e7a7      	b.n	800ca68 <_printf_i+0xf8>
 800cb18:	4824      	ldr	r0, [pc, #144]	; (800cbac <_printf_i+0x23c>)
 800cb1a:	e7e4      	b.n	800cae6 <_printf_i+0x176>
 800cb1c:	4615      	mov	r5, r2
 800cb1e:	e7bd      	b.n	800ca9c <_printf_i+0x12c>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	6826      	ldr	r6, [r4, #0]
 800cb24:	6961      	ldr	r1, [r4, #20]
 800cb26:	1d18      	adds	r0, r3, #4
 800cb28:	6028      	str	r0, [r5, #0]
 800cb2a:	0635      	lsls	r5, r6, #24
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	d501      	bpl.n	800cb34 <_printf_i+0x1c4>
 800cb30:	6019      	str	r1, [r3, #0]
 800cb32:	e002      	b.n	800cb3a <_printf_i+0x1ca>
 800cb34:	0670      	lsls	r0, r6, #25
 800cb36:	d5fb      	bpl.n	800cb30 <_printf_i+0x1c0>
 800cb38:	8019      	strh	r1, [r3, #0]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	6123      	str	r3, [r4, #16]
 800cb3e:	4615      	mov	r5, r2
 800cb40:	e7bc      	b.n	800cabc <_printf_i+0x14c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	1d1a      	adds	r2, r3, #4
 800cb46:	602a      	str	r2, [r5, #0]
 800cb48:	681d      	ldr	r5, [r3, #0]
 800cb4a:	6862      	ldr	r2, [r4, #4]
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f7f3 fbc6 	bl	80002e0 <memchr>
 800cb54:	b108      	cbz	r0, 800cb5a <_printf_i+0x1ea>
 800cb56:	1b40      	subs	r0, r0, r5
 800cb58:	6060      	str	r0, [r4, #4]
 800cb5a:	6863      	ldr	r3, [r4, #4]
 800cb5c:	6123      	str	r3, [r4, #16]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb64:	e7aa      	b.n	800cabc <_printf_i+0x14c>
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	462a      	mov	r2, r5
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	47d0      	blx	sl
 800cb70:	3001      	adds	r0, #1
 800cb72:	d0ad      	beq.n	800cad0 <_printf_i+0x160>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	079b      	lsls	r3, r3, #30
 800cb78:	d413      	bmi.n	800cba2 <_printf_i+0x232>
 800cb7a:	68e0      	ldr	r0, [r4, #12]
 800cb7c:	9b03      	ldr	r3, [sp, #12]
 800cb7e:	4298      	cmp	r0, r3
 800cb80:	bfb8      	it	lt
 800cb82:	4618      	movlt	r0, r3
 800cb84:	e7a6      	b.n	800cad4 <_printf_i+0x164>
 800cb86:	2301      	movs	r3, #1
 800cb88:	4632      	mov	r2, r6
 800cb8a:	4649      	mov	r1, r9
 800cb8c:	4640      	mov	r0, r8
 800cb8e:	47d0      	blx	sl
 800cb90:	3001      	adds	r0, #1
 800cb92:	d09d      	beq.n	800cad0 <_printf_i+0x160>
 800cb94:	3501      	adds	r5, #1
 800cb96:	68e3      	ldr	r3, [r4, #12]
 800cb98:	9903      	ldr	r1, [sp, #12]
 800cb9a:	1a5b      	subs	r3, r3, r1
 800cb9c:	42ab      	cmp	r3, r5
 800cb9e:	dcf2      	bgt.n	800cb86 <_printf_i+0x216>
 800cba0:	e7eb      	b.n	800cb7a <_printf_i+0x20a>
 800cba2:	2500      	movs	r5, #0
 800cba4:	f104 0619 	add.w	r6, r4, #25
 800cba8:	e7f5      	b.n	800cb96 <_printf_i+0x226>
 800cbaa:	bf00      	nop
 800cbac:	08013cfa 	.word	0x08013cfa
 800cbb0:	08013d0b 	.word	0x08013d0b

0800cbb4 <std>:
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	b510      	push	{r4, lr}
 800cbb8:	4604      	mov	r4, r0
 800cbba:	e9c0 3300 	strd	r3, r3, [r0]
 800cbbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cbc2:	6083      	str	r3, [r0, #8]
 800cbc4:	8181      	strh	r1, [r0, #12]
 800cbc6:	6643      	str	r3, [r0, #100]	; 0x64
 800cbc8:	81c2      	strh	r2, [r0, #14]
 800cbca:	6183      	str	r3, [r0, #24]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	2208      	movs	r2, #8
 800cbd0:	305c      	adds	r0, #92	; 0x5c
 800cbd2:	f000 f926 	bl	800ce22 <memset>
 800cbd6:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <std+0x58>)
 800cbd8:	6263      	str	r3, [r4, #36]	; 0x24
 800cbda:	4b0d      	ldr	r3, [pc, #52]	; (800cc10 <std+0x5c>)
 800cbdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cbde:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <std+0x60>)
 800cbe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cbe2:	4b0d      	ldr	r3, [pc, #52]	; (800cc18 <std+0x64>)
 800cbe4:	6323      	str	r3, [r4, #48]	; 0x30
 800cbe6:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <std+0x68>)
 800cbe8:	6224      	str	r4, [r4, #32]
 800cbea:	429c      	cmp	r4, r3
 800cbec:	d006      	beq.n	800cbfc <std+0x48>
 800cbee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cbf2:	4294      	cmp	r4, r2
 800cbf4:	d002      	beq.n	800cbfc <std+0x48>
 800cbf6:	33d0      	adds	r3, #208	; 0xd0
 800cbf8:	429c      	cmp	r4, r3
 800cbfa:	d105      	bne.n	800cc08 <std+0x54>
 800cbfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc04:	f000 b99a 	b.w	800cf3c <__retarget_lock_init_recursive>
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0800cd9d 	.word	0x0800cd9d
 800cc10:	0800cdbf 	.word	0x0800cdbf
 800cc14:	0800cdf7 	.word	0x0800cdf7
 800cc18:	0800ce1b 	.word	0x0800ce1b
 800cc1c:	240030fc 	.word	0x240030fc

0800cc20 <stdio_exit_handler>:
 800cc20:	4a02      	ldr	r2, [pc, #8]	; (800cc2c <stdio_exit_handler+0xc>)
 800cc22:	4903      	ldr	r1, [pc, #12]	; (800cc30 <stdio_exit_handler+0x10>)
 800cc24:	4803      	ldr	r0, [pc, #12]	; (800cc34 <stdio_exit_handler+0x14>)
 800cc26:	f000 b869 	b.w	800ccfc <_fwalk_sglue>
 800cc2a:	bf00      	nop
 800cc2c:	2400061c 	.word	0x2400061c
 800cc30:	0800e92d 	.word	0x0800e92d
 800cc34:	24000628 	.word	0x24000628

0800cc38 <cleanup_stdio>:
 800cc38:	6841      	ldr	r1, [r0, #4]
 800cc3a:	4b0c      	ldr	r3, [pc, #48]	; (800cc6c <cleanup_stdio+0x34>)
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	4604      	mov	r4, r0
 800cc42:	d001      	beq.n	800cc48 <cleanup_stdio+0x10>
 800cc44:	f001 fe72 	bl	800e92c <_fflush_r>
 800cc48:	68a1      	ldr	r1, [r4, #8]
 800cc4a:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <cleanup_stdio+0x38>)
 800cc4c:	4299      	cmp	r1, r3
 800cc4e:	d002      	beq.n	800cc56 <cleanup_stdio+0x1e>
 800cc50:	4620      	mov	r0, r4
 800cc52:	f001 fe6b 	bl	800e92c <_fflush_r>
 800cc56:	68e1      	ldr	r1, [r4, #12]
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <cleanup_stdio+0x3c>)
 800cc5a:	4299      	cmp	r1, r3
 800cc5c:	d004      	beq.n	800cc68 <cleanup_stdio+0x30>
 800cc5e:	4620      	mov	r0, r4
 800cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc64:	f001 be62 	b.w	800e92c <_fflush_r>
 800cc68:	bd10      	pop	{r4, pc}
 800cc6a:	bf00      	nop
 800cc6c:	240030fc 	.word	0x240030fc
 800cc70:	24003164 	.word	0x24003164
 800cc74:	240031cc 	.word	0x240031cc

0800cc78 <global_stdio_init.part.0>:
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	4b0b      	ldr	r3, [pc, #44]	; (800cca8 <global_stdio_init.part.0+0x30>)
 800cc7c:	4c0b      	ldr	r4, [pc, #44]	; (800ccac <global_stdio_init.part.0+0x34>)
 800cc7e:	4a0c      	ldr	r2, [pc, #48]	; (800ccb0 <global_stdio_init.part.0+0x38>)
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	4620      	mov	r0, r4
 800cc84:	2200      	movs	r2, #0
 800cc86:	2104      	movs	r1, #4
 800cc88:	f7ff ff94 	bl	800cbb4 <std>
 800cc8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cc90:	2201      	movs	r2, #1
 800cc92:	2109      	movs	r1, #9
 800cc94:	f7ff ff8e 	bl	800cbb4 <std>
 800cc98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca2:	2112      	movs	r1, #18
 800cca4:	f7ff bf86 	b.w	800cbb4 <std>
 800cca8:	24003234 	.word	0x24003234
 800ccac:	240030fc 	.word	0x240030fc
 800ccb0:	0800cc21 	.word	0x0800cc21

0800ccb4 <__sfp_lock_acquire>:
 800ccb4:	4801      	ldr	r0, [pc, #4]	; (800ccbc <__sfp_lock_acquire+0x8>)
 800ccb6:	f000 b942 	b.w	800cf3e <__retarget_lock_acquire_recursive>
 800ccba:	bf00      	nop
 800ccbc:	2400323d 	.word	0x2400323d

0800ccc0 <__sfp_lock_release>:
 800ccc0:	4801      	ldr	r0, [pc, #4]	; (800ccc8 <__sfp_lock_release+0x8>)
 800ccc2:	f000 b93d 	b.w	800cf40 <__retarget_lock_release_recursive>
 800ccc6:	bf00      	nop
 800ccc8:	2400323d 	.word	0x2400323d

0800cccc <__sinit>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	4604      	mov	r4, r0
 800ccd0:	f7ff fff0 	bl	800ccb4 <__sfp_lock_acquire>
 800ccd4:	6a23      	ldr	r3, [r4, #32]
 800ccd6:	b11b      	cbz	r3, 800cce0 <__sinit+0x14>
 800ccd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccdc:	f7ff bff0 	b.w	800ccc0 <__sfp_lock_release>
 800cce0:	4b04      	ldr	r3, [pc, #16]	; (800ccf4 <__sinit+0x28>)
 800cce2:	6223      	str	r3, [r4, #32]
 800cce4:	4b04      	ldr	r3, [pc, #16]	; (800ccf8 <__sinit+0x2c>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1f5      	bne.n	800ccd8 <__sinit+0xc>
 800ccec:	f7ff ffc4 	bl	800cc78 <global_stdio_init.part.0>
 800ccf0:	e7f2      	b.n	800ccd8 <__sinit+0xc>
 800ccf2:	bf00      	nop
 800ccf4:	0800cc39 	.word	0x0800cc39
 800ccf8:	24003234 	.word	0x24003234

0800ccfc <_fwalk_sglue>:
 800ccfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd00:	4607      	mov	r7, r0
 800cd02:	4688      	mov	r8, r1
 800cd04:	4614      	mov	r4, r2
 800cd06:	2600      	movs	r6, #0
 800cd08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd0c:	f1b9 0901 	subs.w	r9, r9, #1
 800cd10:	d505      	bpl.n	800cd1e <_fwalk_sglue+0x22>
 800cd12:	6824      	ldr	r4, [r4, #0]
 800cd14:	2c00      	cmp	r4, #0
 800cd16:	d1f7      	bne.n	800cd08 <_fwalk_sglue+0xc>
 800cd18:	4630      	mov	r0, r6
 800cd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd1e:	89ab      	ldrh	r3, [r5, #12]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d907      	bls.n	800cd34 <_fwalk_sglue+0x38>
 800cd24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	d003      	beq.n	800cd34 <_fwalk_sglue+0x38>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4638      	mov	r0, r7
 800cd30:	47c0      	blx	r8
 800cd32:	4306      	orrs	r6, r0
 800cd34:	3568      	adds	r5, #104	; 0x68
 800cd36:	e7e9      	b.n	800cd0c <_fwalk_sglue+0x10>

0800cd38 <iprintf>:
 800cd38:	b40f      	push	{r0, r1, r2, r3}
 800cd3a:	b507      	push	{r0, r1, r2, lr}
 800cd3c:	4906      	ldr	r1, [pc, #24]	; (800cd58 <iprintf+0x20>)
 800cd3e:	ab04      	add	r3, sp, #16
 800cd40:	6808      	ldr	r0, [r1, #0]
 800cd42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd46:	6881      	ldr	r1, [r0, #8]
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	f001 fc4f 	bl	800e5ec <_vfiprintf_r>
 800cd4e:	b003      	add	sp, #12
 800cd50:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd54:	b004      	add	sp, #16
 800cd56:	4770      	bx	lr
 800cd58:	24000674 	.word	0x24000674

0800cd5c <siprintf>:
 800cd5c:	b40e      	push	{r1, r2, r3}
 800cd5e:	b500      	push	{lr}
 800cd60:	b09c      	sub	sp, #112	; 0x70
 800cd62:	ab1d      	add	r3, sp, #116	; 0x74
 800cd64:	9002      	str	r0, [sp, #8]
 800cd66:	9006      	str	r0, [sp, #24]
 800cd68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd6c:	4809      	ldr	r0, [pc, #36]	; (800cd94 <siprintf+0x38>)
 800cd6e:	9107      	str	r1, [sp, #28]
 800cd70:	9104      	str	r1, [sp, #16]
 800cd72:	4909      	ldr	r1, [pc, #36]	; (800cd98 <siprintf+0x3c>)
 800cd74:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd78:	9105      	str	r1, [sp, #20]
 800cd7a:	6800      	ldr	r0, [r0, #0]
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	a902      	add	r1, sp, #8
 800cd80:	f001 fb0c 	bl	800e39c <_svfiprintf_r>
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
 800cd8a:	b01c      	add	sp, #112	; 0x70
 800cd8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd90:	b003      	add	sp, #12
 800cd92:	4770      	bx	lr
 800cd94:	24000674 	.word	0x24000674
 800cd98:	ffff0208 	.word	0xffff0208

0800cd9c <__sread>:
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	460c      	mov	r4, r1
 800cda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda4:	f000 f86c 	bl	800ce80 <_read_r>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	bfab      	itete	ge
 800cdac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdae:	89a3      	ldrhlt	r3, [r4, #12]
 800cdb0:	181b      	addge	r3, r3, r0
 800cdb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdb6:	bfac      	ite	ge
 800cdb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdba:	81a3      	strhlt	r3, [r4, #12]
 800cdbc:	bd10      	pop	{r4, pc}

0800cdbe <__swrite>:
 800cdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	461f      	mov	r7, r3
 800cdc4:	898b      	ldrh	r3, [r1, #12]
 800cdc6:	05db      	lsls	r3, r3, #23
 800cdc8:	4605      	mov	r5, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	4616      	mov	r6, r2
 800cdce:	d505      	bpl.n	800cddc <__swrite+0x1e>
 800cdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f000 f840 	bl	800ce5c <_lseek_r>
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cde6:	81a3      	strh	r3, [r4, #12]
 800cde8:	4632      	mov	r2, r6
 800cdea:	463b      	mov	r3, r7
 800cdec:	4628      	mov	r0, r5
 800cdee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdf2:	f000 b867 	b.w	800cec4 <_write_r>

0800cdf6 <__sseek>:
 800cdf6:	b510      	push	{r4, lr}
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfe:	f000 f82d 	bl	800ce5c <_lseek_r>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	bf15      	itete	ne
 800ce08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce12:	81a3      	strheq	r3, [r4, #12]
 800ce14:	bf18      	it	ne
 800ce16:	81a3      	strhne	r3, [r4, #12]
 800ce18:	bd10      	pop	{r4, pc}

0800ce1a <__sclose>:
 800ce1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1e:	f000 b80d 	b.w	800ce3c <_close_r>

0800ce22 <memset>:
 800ce22:	4402      	add	r2, r0
 800ce24:	4603      	mov	r3, r0
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d100      	bne.n	800ce2c <memset+0xa>
 800ce2a:	4770      	bx	lr
 800ce2c:	f803 1b01 	strb.w	r1, [r3], #1
 800ce30:	e7f9      	b.n	800ce26 <memset+0x4>
	...

0800ce34 <_localeconv_r>:
 800ce34:	4800      	ldr	r0, [pc, #0]	; (800ce38 <_localeconv_r+0x4>)
 800ce36:	4770      	bx	lr
 800ce38:	24000768 	.word	0x24000768

0800ce3c <_close_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	4d06      	ldr	r5, [pc, #24]	; (800ce58 <_close_r+0x1c>)
 800ce40:	2300      	movs	r3, #0
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	602b      	str	r3, [r5, #0]
 800ce48:	f002 f9a6 	bl	800f198 <_close>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_close_r+0x1a>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_close_r+0x1a>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	24003238 	.word	0x24003238

0800ce5c <_lseek_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d07      	ldr	r5, [pc, #28]	; (800ce7c <_lseek_r+0x20>)
 800ce60:	4604      	mov	r4, r0
 800ce62:	4608      	mov	r0, r1
 800ce64:	4611      	mov	r1, r2
 800ce66:	2200      	movs	r2, #0
 800ce68:	602a      	str	r2, [r5, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	f002 f9bc 	bl	800f1e8 <_lseek>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d102      	bne.n	800ce7a <_lseek_r+0x1e>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b103      	cbz	r3, 800ce7a <_lseek_r+0x1e>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	24003238 	.word	0x24003238

0800ce80 <_read_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4d07      	ldr	r5, [pc, #28]	; (800cea0 <_read_r+0x20>)
 800ce84:	4604      	mov	r4, r0
 800ce86:	4608      	mov	r0, r1
 800ce88:	4611      	mov	r1, r2
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	602a      	str	r2, [r5, #0]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	f002 f9b2 	bl	800f1f8 <_read>
 800ce94:	1c43      	adds	r3, r0, #1
 800ce96:	d102      	bne.n	800ce9e <_read_r+0x1e>
 800ce98:	682b      	ldr	r3, [r5, #0]
 800ce9a:	b103      	cbz	r3, 800ce9e <_read_r+0x1e>
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	24003238 	.word	0x24003238

0800cea4 <_sbrk_r>:
 800cea4:	b538      	push	{r3, r4, r5, lr}
 800cea6:	4d06      	ldr	r5, [pc, #24]	; (800cec0 <_sbrk_r+0x1c>)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4608      	mov	r0, r1
 800ceae:	602b      	str	r3, [r5, #0]
 800ceb0:	f7f4 f840 	bl	8000f34 <_sbrk>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_sbrk_r+0x1a>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_sbrk_r+0x1a>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	24003238 	.word	0x24003238

0800cec4 <_write_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_write_r+0x20>)
 800cec8:	4604      	mov	r4, r0
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f002 f998 	bl	800f208 <_write>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_write_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_write_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	24003238 	.word	0x24003238

0800cee8 <__errno>:
 800cee8:	4b01      	ldr	r3, [pc, #4]	; (800cef0 <__errno+0x8>)
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	24000674 	.word	0x24000674

0800cef4 <__libc_init_array>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	4d0d      	ldr	r5, [pc, #52]	; (800cf2c <__libc_init_array+0x38>)
 800cef8:	4c0d      	ldr	r4, [pc, #52]	; (800cf30 <__libc_init_array+0x3c>)
 800cefa:	1b64      	subs	r4, r4, r5
 800cefc:	10a4      	asrs	r4, r4, #2
 800cefe:	2600      	movs	r6, #0
 800cf00:	42a6      	cmp	r6, r4
 800cf02:	d109      	bne.n	800cf18 <__libc_init_array+0x24>
 800cf04:	4d0b      	ldr	r5, [pc, #44]	; (800cf34 <__libc_init_array+0x40>)
 800cf06:	4c0c      	ldr	r4, [pc, #48]	; (800cf38 <__libc_init_array+0x44>)
 800cf08:	f002 f988 	bl	800f21c <_init>
 800cf0c:	1b64      	subs	r4, r4, r5
 800cf0e:	10a4      	asrs	r4, r4, #2
 800cf10:	2600      	movs	r6, #0
 800cf12:	42a6      	cmp	r6, r4
 800cf14:	d105      	bne.n	800cf22 <__libc_init_array+0x2e>
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf1c:	4798      	blx	r3
 800cf1e:	3601      	adds	r6, #1
 800cf20:	e7ee      	b.n	800cf00 <__libc_init_array+0xc>
 800cf22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf26:	4798      	blx	r3
 800cf28:	3601      	adds	r6, #1
 800cf2a:	e7f2      	b.n	800cf12 <__libc_init_array+0x1e>
 800cf2c:	080141b0 	.word	0x080141b0
 800cf30:	080141b0 	.word	0x080141b0
 800cf34:	080141b0 	.word	0x080141b0
 800cf38:	080141b4 	.word	0x080141b4

0800cf3c <__retarget_lock_init_recursive>:
 800cf3c:	4770      	bx	lr

0800cf3e <__retarget_lock_acquire_recursive>:
 800cf3e:	4770      	bx	lr

0800cf40 <__retarget_lock_release_recursive>:
 800cf40:	4770      	bx	lr

0800cf42 <memcpy>:
 800cf42:	440a      	add	r2, r1
 800cf44:	4291      	cmp	r1, r2
 800cf46:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf4a:	d100      	bne.n	800cf4e <memcpy+0xc>
 800cf4c:	4770      	bx	lr
 800cf4e:	b510      	push	{r4, lr}
 800cf50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf58:	4291      	cmp	r1, r2
 800cf5a:	d1f9      	bne.n	800cf50 <memcpy+0xe>
 800cf5c:	bd10      	pop	{r4, pc}

0800cf5e <quorem>:
 800cf5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf62:	6903      	ldr	r3, [r0, #16]
 800cf64:	690c      	ldr	r4, [r1, #16]
 800cf66:	42a3      	cmp	r3, r4
 800cf68:	4607      	mov	r7, r0
 800cf6a:	db7e      	blt.n	800d06a <quorem+0x10c>
 800cf6c:	3c01      	subs	r4, #1
 800cf6e:	f101 0814 	add.w	r8, r1, #20
 800cf72:	f100 0514 	add.w	r5, r0, #20
 800cf76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf84:	3301      	adds	r3, #1
 800cf86:	429a      	cmp	r2, r3
 800cf88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf90:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf94:	d331      	bcc.n	800cffa <quorem+0x9c>
 800cf96:	f04f 0e00 	mov.w	lr, #0
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	46ac      	mov	ip, r5
 800cf9e:	46f2      	mov	sl, lr
 800cfa0:	f850 2b04 	ldr.w	r2, [r0], #4
 800cfa4:	b293      	uxth	r3, r2
 800cfa6:	fb06 e303 	mla	r3, r6, r3, lr
 800cfaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cfae:	0c1a      	lsrs	r2, r3, #16
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	ebaa 0303 	sub.w	r3, sl, r3
 800cfb6:	f8dc a000 	ldr.w	sl, [ip]
 800cfba:	fa13 f38a 	uxtah	r3, r3, sl
 800cfbe:	fb06 220e 	mla	r2, r6, lr, r2
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	9b00      	ldr	r3, [sp, #0]
 800cfc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cfca:	b292      	uxth	r2, r2
 800cfcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cfd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfd4:	f8bd 3000 	ldrh.w	r3, [sp]
 800cfd8:	4581      	cmp	r9, r0
 800cfda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfde:	f84c 3b04 	str.w	r3, [ip], #4
 800cfe2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cfe6:	d2db      	bcs.n	800cfa0 <quorem+0x42>
 800cfe8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cfec:	b92b      	cbnz	r3, 800cffa <quorem+0x9c>
 800cfee:	9b01      	ldr	r3, [sp, #4]
 800cff0:	3b04      	subs	r3, #4
 800cff2:	429d      	cmp	r5, r3
 800cff4:	461a      	mov	r2, r3
 800cff6:	d32c      	bcc.n	800d052 <quorem+0xf4>
 800cff8:	613c      	str	r4, [r7, #16]
 800cffa:	4638      	mov	r0, r7
 800cffc:	f001 f86c 	bl	800e0d8 <__mcmp>
 800d000:	2800      	cmp	r0, #0
 800d002:	db22      	blt.n	800d04a <quorem+0xec>
 800d004:	3601      	adds	r6, #1
 800d006:	4629      	mov	r1, r5
 800d008:	2000      	movs	r0, #0
 800d00a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d00e:	f8d1 c000 	ldr.w	ip, [r1]
 800d012:	b293      	uxth	r3, r2
 800d014:	1ac3      	subs	r3, r0, r3
 800d016:	0c12      	lsrs	r2, r2, #16
 800d018:	fa13 f38c 	uxtah	r3, r3, ip
 800d01c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d024:	b29b      	uxth	r3, r3
 800d026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d02a:	45c1      	cmp	r9, r8
 800d02c:	f841 3b04 	str.w	r3, [r1], #4
 800d030:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d034:	d2e9      	bcs.n	800d00a <quorem+0xac>
 800d036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d03e:	b922      	cbnz	r2, 800d04a <quorem+0xec>
 800d040:	3b04      	subs	r3, #4
 800d042:	429d      	cmp	r5, r3
 800d044:	461a      	mov	r2, r3
 800d046:	d30a      	bcc.n	800d05e <quorem+0x100>
 800d048:	613c      	str	r4, [r7, #16]
 800d04a:	4630      	mov	r0, r6
 800d04c:	b003      	add	sp, #12
 800d04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d052:	6812      	ldr	r2, [r2, #0]
 800d054:	3b04      	subs	r3, #4
 800d056:	2a00      	cmp	r2, #0
 800d058:	d1ce      	bne.n	800cff8 <quorem+0x9a>
 800d05a:	3c01      	subs	r4, #1
 800d05c:	e7c9      	b.n	800cff2 <quorem+0x94>
 800d05e:	6812      	ldr	r2, [r2, #0]
 800d060:	3b04      	subs	r3, #4
 800d062:	2a00      	cmp	r2, #0
 800d064:	d1f0      	bne.n	800d048 <quorem+0xea>
 800d066:	3c01      	subs	r4, #1
 800d068:	e7eb      	b.n	800d042 <quorem+0xe4>
 800d06a:	2000      	movs	r0, #0
 800d06c:	e7ee      	b.n	800d04c <quorem+0xee>
	...

0800d070 <_dtoa_r>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	ed2d 8b02 	vpush	{d8}
 800d078:	69c5      	ldr	r5, [r0, #28]
 800d07a:	b091      	sub	sp, #68	; 0x44
 800d07c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d080:	ec59 8b10 	vmov	r8, r9, d0
 800d084:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800d086:	9106      	str	r1, [sp, #24]
 800d088:	4606      	mov	r6, r0
 800d08a:	9208      	str	r2, [sp, #32]
 800d08c:	930c      	str	r3, [sp, #48]	; 0x30
 800d08e:	b975      	cbnz	r5, 800d0ae <_dtoa_r+0x3e>
 800d090:	2010      	movs	r0, #16
 800d092:	f7ff f86f 	bl	800c174 <malloc>
 800d096:	4602      	mov	r2, r0
 800d098:	61f0      	str	r0, [r6, #28]
 800d09a:	b920      	cbnz	r0, 800d0a6 <_dtoa_r+0x36>
 800d09c:	4ba6      	ldr	r3, [pc, #664]	; (800d338 <_dtoa_r+0x2c8>)
 800d09e:	21ef      	movs	r1, #239	; 0xef
 800d0a0:	48a6      	ldr	r0, [pc, #664]	; (800d33c <_dtoa_r+0x2cc>)
 800d0a2:	f001 fd1b 	bl	800eadc <__assert_func>
 800d0a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d0aa:	6005      	str	r5, [r0, #0]
 800d0ac:	60c5      	str	r5, [r0, #12]
 800d0ae:	69f3      	ldr	r3, [r6, #28]
 800d0b0:	6819      	ldr	r1, [r3, #0]
 800d0b2:	b151      	cbz	r1, 800d0ca <_dtoa_r+0x5a>
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	604a      	str	r2, [r1, #4]
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4093      	lsls	r3, r2
 800d0bc:	608b      	str	r3, [r1, #8]
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f000 fdce 	bl	800dc60 <_Bfree>
 800d0c4:	69f3      	ldr	r3, [r6, #28]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	f1b9 0300 	subs.w	r3, r9, #0
 800d0ce:	bfbb      	ittet	lt
 800d0d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d0d4:	9303      	strlt	r3, [sp, #12]
 800d0d6:	2300      	movge	r3, #0
 800d0d8:	2201      	movlt	r2, #1
 800d0da:	bfac      	ite	ge
 800d0dc:	6023      	strge	r3, [r4, #0]
 800d0de:	6022      	strlt	r2, [r4, #0]
 800d0e0:	4b97      	ldr	r3, [pc, #604]	; (800d340 <_dtoa_r+0x2d0>)
 800d0e2:	9c03      	ldr	r4, [sp, #12]
 800d0e4:	43a3      	bics	r3, r4
 800d0e6:	d11c      	bne.n	800d122 <_dtoa_r+0xb2>
 800d0e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0ee:	6013      	str	r3, [r2, #0]
 800d0f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d0f4:	ea53 0308 	orrs.w	r3, r3, r8
 800d0f8:	f000 84fb 	beq.w	800daf2 <_dtoa_r+0xa82>
 800d0fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d0fe:	b963      	cbnz	r3, 800d11a <_dtoa_r+0xaa>
 800d100:	4b90      	ldr	r3, [pc, #576]	; (800d344 <_dtoa_r+0x2d4>)
 800d102:	e020      	b.n	800d146 <_dtoa_r+0xd6>
 800d104:	4b90      	ldr	r3, [pc, #576]	; (800d348 <_dtoa_r+0x2d8>)
 800d106:	9301      	str	r3, [sp, #4]
 800d108:	3308      	adds	r3, #8
 800d10a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	9801      	ldr	r0, [sp, #4]
 800d110:	b011      	add	sp, #68	; 0x44
 800d112:	ecbd 8b02 	vpop	{d8}
 800d116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d11a:	4b8a      	ldr	r3, [pc, #552]	; (800d344 <_dtoa_r+0x2d4>)
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	3303      	adds	r3, #3
 800d120:	e7f3      	b.n	800d10a <_dtoa_r+0x9a>
 800d122:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d126:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12e:	d10c      	bne.n	800d14a <_dtoa_r+0xda>
 800d130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d132:	2301      	movs	r3, #1
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f000 84d7 	beq.w	800daec <_dtoa_r+0xa7c>
 800d13e:	4b83      	ldr	r3, [pc, #524]	; (800d34c <_dtoa_r+0x2dc>)
 800d140:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	3b01      	subs	r3, #1
 800d146:	9301      	str	r3, [sp, #4]
 800d148:	e7e1      	b.n	800d10e <_dtoa_r+0x9e>
 800d14a:	aa0e      	add	r2, sp, #56	; 0x38
 800d14c:	a90f      	add	r1, sp, #60	; 0x3c
 800d14e:	4630      	mov	r0, r6
 800d150:	eeb0 0b48 	vmov.f64	d0, d8
 800d154:	f001 f866 	bl	800e224 <__d2b>
 800d158:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d15c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d15e:	4605      	mov	r5, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d046      	beq.n	800d1f2 <_dtoa_r+0x182>
 800d164:	eeb0 7b48 	vmov.f64	d7, d8
 800d168:	ee18 1a90 	vmov	r1, s17
 800d16c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d170:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800d174:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d178:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d17c:	2000      	movs	r0, #0
 800d17e:	ee07 1a90 	vmov	s15, r1
 800d182:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800d186:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d320 <_dtoa_r+0x2b0>
 800d18a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d18e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d328 <_dtoa_r+0x2b8>
 800d192:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d196:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800d330 <_dtoa_r+0x2c0>
 800d19a:	ee07 3a90 	vmov	s15, r3
 800d19e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d1a2:	eeb0 7b46 	vmov.f64	d7, d6
 800d1a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d1aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d1ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b6:	ee16 ba90 	vmov	fp, s13
 800d1ba:	9009      	str	r0, [sp, #36]	; 0x24
 800d1bc:	d508      	bpl.n	800d1d0 <_dtoa_r+0x160>
 800d1be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d1c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ca:	bf18      	it	ne
 800d1cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d1d0:	f1bb 0f16 	cmp.w	fp, #22
 800d1d4:	d82b      	bhi.n	800d22e <_dtoa_r+0x1be>
 800d1d6:	495e      	ldr	r1, [pc, #376]	; (800d350 <_dtoa_r+0x2e0>)
 800d1d8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800d1dc:	ed91 7b00 	vldr	d7, [r1]
 800d1e0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e8:	d501      	bpl.n	800d1ee <_dtoa_r+0x17e>
 800d1ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	e01e      	b.n	800d230 <_dtoa_r+0x1c0>
 800d1f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800d1fa:	2920      	cmp	r1, #32
 800d1fc:	bfc1      	itttt	gt
 800d1fe:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800d202:	408c      	lslgt	r4, r1
 800d204:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800d208:	fa28 f101 	lsrgt.w	r1, r8, r1
 800d20c:	bfd6      	itet	le
 800d20e:	f1c1 0120 	rsble	r1, r1, #32
 800d212:	4321      	orrgt	r1, r4
 800d214:	fa08 f101 	lslle.w	r1, r8, r1
 800d218:	ee07 1a90 	vmov	s15, r1
 800d21c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d220:	3b01      	subs	r3, #1
 800d222:	ee17 1a90 	vmov	r1, s15
 800d226:	2001      	movs	r0, #1
 800d228:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d22c:	e7a7      	b.n	800d17e <_dtoa_r+0x10e>
 800d22e:	2101      	movs	r1, #1
 800d230:	1ad2      	subs	r2, r2, r3
 800d232:	1e53      	subs	r3, r2, #1
 800d234:	9305      	str	r3, [sp, #20]
 800d236:	bf45      	ittet	mi
 800d238:	f1c2 0301 	rsbmi	r3, r2, #1
 800d23c:	9304      	strmi	r3, [sp, #16]
 800d23e:	2300      	movpl	r3, #0
 800d240:	2300      	movmi	r3, #0
 800d242:	bf4c      	ite	mi
 800d244:	9305      	strmi	r3, [sp, #20]
 800d246:	9304      	strpl	r3, [sp, #16]
 800d248:	f1bb 0f00 	cmp.w	fp, #0
 800d24c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d24e:	db18      	blt.n	800d282 <_dtoa_r+0x212>
 800d250:	9b05      	ldr	r3, [sp, #20]
 800d252:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d256:	445b      	add	r3, fp
 800d258:	9305      	str	r3, [sp, #20]
 800d25a:	2300      	movs	r3, #0
 800d25c:	9a06      	ldr	r2, [sp, #24]
 800d25e:	2a09      	cmp	r2, #9
 800d260:	d848      	bhi.n	800d2f4 <_dtoa_r+0x284>
 800d262:	2a05      	cmp	r2, #5
 800d264:	bfc4      	itt	gt
 800d266:	3a04      	subgt	r2, #4
 800d268:	9206      	strgt	r2, [sp, #24]
 800d26a:	9a06      	ldr	r2, [sp, #24]
 800d26c:	f1a2 0202 	sub.w	r2, r2, #2
 800d270:	bfcc      	ite	gt
 800d272:	2400      	movgt	r4, #0
 800d274:	2401      	movle	r4, #1
 800d276:	2a03      	cmp	r2, #3
 800d278:	d847      	bhi.n	800d30a <_dtoa_r+0x29a>
 800d27a:	e8df f002 	tbb	[pc, r2]
 800d27e:	2d0b      	.short	0x2d0b
 800d280:	392b      	.short	0x392b
 800d282:	9b04      	ldr	r3, [sp, #16]
 800d284:	2200      	movs	r2, #0
 800d286:	eba3 030b 	sub.w	r3, r3, fp
 800d28a:	9304      	str	r3, [sp, #16]
 800d28c:	920a      	str	r2, [sp, #40]	; 0x28
 800d28e:	f1cb 0300 	rsb	r3, fp, #0
 800d292:	e7e3      	b.n	800d25c <_dtoa_r+0x1ec>
 800d294:	2200      	movs	r2, #0
 800d296:	9207      	str	r2, [sp, #28]
 800d298:	9a08      	ldr	r2, [sp, #32]
 800d29a:	2a00      	cmp	r2, #0
 800d29c:	dc38      	bgt.n	800d310 <_dtoa_r+0x2a0>
 800d29e:	f04f 0a01 	mov.w	sl, #1
 800d2a2:	46d1      	mov	r9, sl
 800d2a4:	4652      	mov	r2, sl
 800d2a6:	f8cd a020 	str.w	sl, [sp, #32]
 800d2aa:	69f7      	ldr	r7, [r6, #28]
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	2004      	movs	r0, #4
 800d2b0:	f100 0c14 	add.w	ip, r0, #20
 800d2b4:	4594      	cmp	ip, r2
 800d2b6:	d930      	bls.n	800d31a <_dtoa_r+0x2aa>
 800d2b8:	6079      	str	r1, [r7, #4]
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	930d      	str	r3, [sp, #52]	; 0x34
 800d2be:	f000 fc8f 	bl	800dbe0 <_Balloc>
 800d2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c4:	9001      	str	r0, [sp, #4]
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d145      	bne.n	800d358 <_dtoa_r+0x2e8>
 800d2cc:	4b21      	ldr	r3, [pc, #132]	; (800d354 <_dtoa_r+0x2e4>)
 800d2ce:	f240 11af 	movw	r1, #431	; 0x1af
 800d2d2:	e6e5      	b.n	800d0a0 <_dtoa_r+0x30>
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	e7de      	b.n	800d296 <_dtoa_r+0x226>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	9207      	str	r2, [sp, #28]
 800d2dc:	9a08      	ldr	r2, [sp, #32]
 800d2de:	eb0b 0a02 	add.w	sl, fp, r2
 800d2e2:	f10a 0901 	add.w	r9, sl, #1
 800d2e6:	464a      	mov	r2, r9
 800d2e8:	2a01      	cmp	r2, #1
 800d2ea:	bfb8      	it	lt
 800d2ec:	2201      	movlt	r2, #1
 800d2ee:	e7dc      	b.n	800d2aa <_dtoa_r+0x23a>
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	e7f2      	b.n	800d2da <_dtoa_r+0x26a>
 800d2f4:	2401      	movs	r4, #1
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800d2fc:	f04f 3aff 	mov.w	sl, #4294967295
 800d300:	2100      	movs	r1, #0
 800d302:	46d1      	mov	r9, sl
 800d304:	2212      	movs	r2, #18
 800d306:	9108      	str	r1, [sp, #32]
 800d308:	e7cf      	b.n	800d2aa <_dtoa_r+0x23a>
 800d30a:	2201      	movs	r2, #1
 800d30c:	9207      	str	r2, [sp, #28]
 800d30e:	e7f5      	b.n	800d2fc <_dtoa_r+0x28c>
 800d310:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d314:	46d1      	mov	r9, sl
 800d316:	4652      	mov	r2, sl
 800d318:	e7c7      	b.n	800d2aa <_dtoa_r+0x23a>
 800d31a:	3101      	adds	r1, #1
 800d31c:	0040      	lsls	r0, r0, #1
 800d31e:	e7c7      	b.n	800d2b0 <_dtoa_r+0x240>
 800d320:	636f4361 	.word	0x636f4361
 800d324:	3fd287a7 	.word	0x3fd287a7
 800d328:	8b60c8b3 	.word	0x8b60c8b3
 800d32c:	3fc68a28 	.word	0x3fc68a28
 800d330:	509f79fb 	.word	0x509f79fb
 800d334:	3fd34413 	.word	0x3fd34413
 800d338:	08013d29 	.word	0x08013d29
 800d33c:	08013d40 	.word	0x08013d40
 800d340:	7ff00000 	.word	0x7ff00000
 800d344:	08013d25 	.word	0x08013d25
 800d348:	08013d1c 	.word	0x08013d1c
 800d34c:	08013cf9 	.word	0x08013cf9
 800d350:	08013e30 	.word	0x08013e30
 800d354:	08013d98 	.word	0x08013d98
 800d358:	69f2      	ldr	r2, [r6, #28]
 800d35a:	9901      	ldr	r1, [sp, #4]
 800d35c:	6011      	str	r1, [r2, #0]
 800d35e:	f1b9 0f0e 	cmp.w	r9, #14
 800d362:	d86c      	bhi.n	800d43e <_dtoa_r+0x3ce>
 800d364:	2c00      	cmp	r4, #0
 800d366:	d06a      	beq.n	800d43e <_dtoa_r+0x3ce>
 800d368:	f1bb 0f00 	cmp.w	fp, #0
 800d36c:	f340 80a0 	ble.w	800d4b0 <_dtoa_r+0x440>
 800d370:	4ac1      	ldr	r2, [pc, #772]	; (800d678 <_dtoa_r+0x608>)
 800d372:	f00b 010f 	and.w	r1, fp, #15
 800d376:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d37a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d37e:	ed92 7b00 	vldr	d7, [r2]
 800d382:	ea4f 122b 	mov.w	r2, fp, asr #4
 800d386:	f000 8087 	beq.w	800d498 <_dtoa_r+0x428>
 800d38a:	49bc      	ldr	r1, [pc, #752]	; (800d67c <_dtoa_r+0x60c>)
 800d38c:	ed91 6b08 	vldr	d6, [r1, #32]
 800d390:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800d394:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d398:	f002 020f 	and.w	r2, r2, #15
 800d39c:	2103      	movs	r1, #3
 800d39e:	48b7      	ldr	r0, [pc, #732]	; (800d67c <_dtoa_r+0x60c>)
 800d3a0:	2a00      	cmp	r2, #0
 800d3a2:	d17b      	bne.n	800d49c <_dtoa_r+0x42c>
 800d3a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d3ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	f000 80a0 	beq.w	800d4fc <_dtoa_r+0x48c>
 800d3bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d3c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c8:	f140 8098 	bpl.w	800d4fc <_dtoa_r+0x48c>
 800d3cc:	f1b9 0f00 	cmp.w	r9, #0
 800d3d0:	f000 8094 	beq.w	800d4fc <_dtoa_r+0x48c>
 800d3d4:	f1ba 0f00 	cmp.w	sl, #0
 800d3d8:	dd2f      	ble.n	800d43a <_dtoa_r+0x3ca>
 800d3da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d3de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3e6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d3ea:	3101      	adds	r1, #1
 800d3ec:	4654      	mov	r4, sl
 800d3ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d3f6:	ee07 1a90 	vmov	s15, r1
 800d3fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d402:	ee15 7a90 	vmov	r7, s11
 800d406:	ec51 0b15 	vmov	r0, r1, d5
 800d40a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800d40e:	2c00      	cmp	r4, #0
 800d410:	d177      	bne.n	800d502 <_dtoa_r+0x492>
 800d412:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d416:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d41a:	ec41 0b17 	vmov	d7, r0, r1
 800d41e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d426:	f300 826a 	bgt.w	800d8fe <_dtoa_r+0x88e>
 800d42a:	eeb1 7b47 	vneg.f64	d7, d7
 800d42e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d436:	f100 8260 	bmi.w	800d8fa <_dtoa_r+0x88a>
 800d43a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d43e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d440:	2a00      	cmp	r2, #0
 800d442:	f2c0 811d 	blt.w	800d680 <_dtoa_r+0x610>
 800d446:	f1bb 0f0e 	cmp.w	fp, #14
 800d44a:	f300 8119 	bgt.w	800d680 <_dtoa_r+0x610>
 800d44e:	4b8a      	ldr	r3, [pc, #552]	; (800d678 <_dtoa_r+0x608>)
 800d450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d454:	ed93 6b00 	vldr	d6, [r3]
 800d458:	9b08      	ldr	r3, [sp, #32]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f280 80b7 	bge.w	800d5ce <_dtoa_r+0x55e>
 800d460:	f1b9 0f00 	cmp.w	r9, #0
 800d464:	f300 80b3 	bgt.w	800d5ce <_dtoa_r+0x55e>
 800d468:	f040 8246 	bne.w	800d8f8 <_dtoa_r+0x888>
 800d46c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d470:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d474:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d478:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d480:	464c      	mov	r4, r9
 800d482:	464f      	mov	r7, r9
 800d484:	f280 821c 	bge.w	800d8c0 <_dtoa_r+0x850>
 800d488:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d48c:	2331      	movs	r3, #49	; 0x31
 800d48e:	f808 3b01 	strb.w	r3, [r8], #1
 800d492:	f10b 0b01 	add.w	fp, fp, #1
 800d496:	e218      	b.n	800d8ca <_dtoa_r+0x85a>
 800d498:	2102      	movs	r1, #2
 800d49a:	e780      	b.n	800d39e <_dtoa_r+0x32e>
 800d49c:	07d4      	lsls	r4, r2, #31
 800d49e:	d504      	bpl.n	800d4aa <_dtoa_r+0x43a>
 800d4a0:	ed90 6b00 	vldr	d6, [r0]
 800d4a4:	3101      	adds	r1, #1
 800d4a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4aa:	1052      	asrs	r2, r2, #1
 800d4ac:	3008      	adds	r0, #8
 800d4ae:	e777      	b.n	800d3a0 <_dtoa_r+0x330>
 800d4b0:	d022      	beq.n	800d4f8 <_dtoa_r+0x488>
 800d4b2:	f1cb 0200 	rsb	r2, fp, #0
 800d4b6:	4970      	ldr	r1, [pc, #448]	; (800d678 <_dtoa_r+0x608>)
 800d4b8:	f002 000f 	and.w	r0, r2, #15
 800d4bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d4c0:	ed91 7b00 	vldr	d7, [r1]
 800d4c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d4c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d4cc:	486b      	ldr	r0, [pc, #428]	; (800d67c <_dtoa_r+0x60c>)
 800d4ce:	1112      	asrs	r2, r2, #4
 800d4d0:	2400      	movs	r4, #0
 800d4d2:	2102      	movs	r1, #2
 800d4d4:	b92a      	cbnz	r2, 800d4e2 <_dtoa_r+0x472>
 800d4d6:	2c00      	cmp	r4, #0
 800d4d8:	f43f af6a 	beq.w	800d3b0 <_dtoa_r+0x340>
 800d4dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d4e0:	e766      	b.n	800d3b0 <_dtoa_r+0x340>
 800d4e2:	07d7      	lsls	r7, r2, #31
 800d4e4:	d505      	bpl.n	800d4f2 <_dtoa_r+0x482>
 800d4e6:	ed90 6b00 	vldr	d6, [r0]
 800d4ea:	3101      	adds	r1, #1
 800d4ec:	2401      	movs	r4, #1
 800d4ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d4f2:	1052      	asrs	r2, r2, #1
 800d4f4:	3008      	adds	r0, #8
 800d4f6:	e7ed      	b.n	800d4d4 <_dtoa_r+0x464>
 800d4f8:	2102      	movs	r1, #2
 800d4fa:	e759      	b.n	800d3b0 <_dtoa_r+0x340>
 800d4fc:	465a      	mov	r2, fp
 800d4fe:	464c      	mov	r4, r9
 800d500:	e775      	b.n	800d3ee <_dtoa_r+0x37e>
 800d502:	ec41 0b17 	vmov	d7, r0, r1
 800d506:	495c      	ldr	r1, [pc, #368]	; (800d678 <_dtoa_r+0x608>)
 800d508:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800d50c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800d510:	9901      	ldr	r1, [sp, #4]
 800d512:	440c      	add	r4, r1
 800d514:	9907      	ldr	r1, [sp, #28]
 800d516:	b351      	cbz	r1, 800d56e <_dtoa_r+0x4fe>
 800d518:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d51c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d520:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d524:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d528:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d52c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d530:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d534:	ee14 1a90 	vmov	r1, s9
 800d538:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d53c:	3130      	adds	r1, #48	; 0x30
 800d53e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d542:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d54a:	f808 1b01 	strb.w	r1, [r8], #1
 800d54e:	d439      	bmi.n	800d5c4 <_dtoa_r+0x554>
 800d550:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d554:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d55c:	d472      	bmi.n	800d644 <_dtoa_r+0x5d4>
 800d55e:	45a0      	cmp	r8, r4
 800d560:	f43f af6b 	beq.w	800d43a <_dtoa_r+0x3ca>
 800d564:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d568:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d56c:	e7e0      	b.n	800d530 <_dtoa_r+0x4c0>
 800d56e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d572:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d576:	4620      	mov	r0, r4
 800d578:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d57c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d580:	ee14 1a90 	vmov	r1, s9
 800d584:	3130      	adds	r1, #48	; 0x30
 800d586:	f808 1b01 	strb.w	r1, [r8], #1
 800d58a:	45a0      	cmp	r8, r4
 800d58c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d590:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d594:	d118      	bne.n	800d5c8 <_dtoa_r+0x558>
 800d596:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d59a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d59e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a6:	dc4d      	bgt.n	800d644 <_dtoa_r+0x5d4>
 800d5a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d5ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b4:	f57f af41 	bpl.w	800d43a <_dtoa_r+0x3ca>
 800d5b8:	4680      	mov	r8, r0
 800d5ba:	3801      	subs	r0, #1
 800d5bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d5c0:	2b30      	cmp	r3, #48	; 0x30
 800d5c2:	d0f9      	beq.n	800d5b8 <_dtoa_r+0x548>
 800d5c4:	4693      	mov	fp, r2
 800d5c6:	e02a      	b.n	800d61e <_dtoa_r+0x5ae>
 800d5c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d5cc:	e7d6      	b.n	800d57c <_dtoa_r+0x50c>
 800d5ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d5d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d5da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d5de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d5e2:	ee15 3a10 	vmov	r3, s10
 800d5e6:	3330      	adds	r3, #48	; 0x30
 800d5e8:	f808 3b01 	strb.w	r3, [r8], #1
 800d5ec:	9b01      	ldr	r3, [sp, #4]
 800d5ee:	eba8 0303 	sub.w	r3, r8, r3
 800d5f2:	4599      	cmp	r9, r3
 800d5f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d5f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d5fc:	d133      	bne.n	800d666 <_dtoa_r+0x5f6>
 800d5fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d602:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d60a:	dc1a      	bgt.n	800d642 <_dtoa_r+0x5d2>
 800d60c:	eeb4 7b46 	vcmp.f64	d7, d6
 800d610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d614:	d103      	bne.n	800d61e <_dtoa_r+0x5ae>
 800d616:	ee15 3a10 	vmov	r3, s10
 800d61a:	07d9      	lsls	r1, r3, #31
 800d61c:	d411      	bmi.n	800d642 <_dtoa_r+0x5d2>
 800d61e:	4629      	mov	r1, r5
 800d620:	4630      	mov	r0, r6
 800d622:	f000 fb1d 	bl	800dc60 <_Bfree>
 800d626:	2300      	movs	r3, #0
 800d628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d62a:	f888 3000 	strb.w	r3, [r8]
 800d62e:	f10b 0301 	add.w	r3, fp, #1
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d636:	2b00      	cmp	r3, #0
 800d638:	f43f ad69 	beq.w	800d10e <_dtoa_r+0x9e>
 800d63c:	f8c3 8000 	str.w	r8, [r3]
 800d640:	e565      	b.n	800d10e <_dtoa_r+0x9e>
 800d642:	465a      	mov	r2, fp
 800d644:	4643      	mov	r3, r8
 800d646:	4698      	mov	r8, r3
 800d648:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800d64c:	2939      	cmp	r1, #57	; 0x39
 800d64e:	d106      	bne.n	800d65e <_dtoa_r+0x5ee>
 800d650:	9901      	ldr	r1, [sp, #4]
 800d652:	4299      	cmp	r1, r3
 800d654:	d1f7      	bne.n	800d646 <_dtoa_r+0x5d6>
 800d656:	9801      	ldr	r0, [sp, #4]
 800d658:	2130      	movs	r1, #48	; 0x30
 800d65a:	3201      	adds	r2, #1
 800d65c:	7001      	strb	r1, [r0, #0]
 800d65e:	7819      	ldrb	r1, [r3, #0]
 800d660:	3101      	adds	r1, #1
 800d662:	7019      	strb	r1, [r3, #0]
 800d664:	e7ae      	b.n	800d5c4 <_dtoa_r+0x554>
 800d666:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d66a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d672:	d1b2      	bne.n	800d5da <_dtoa_r+0x56a>
 800d674:	e7d3      	b.n	800d61e <_dtoa_r+0x5ae>
 800d676:	bf00      	nop
 800d678:	08013e30 	.word	0x08013e30
 800d67c:	08013e08 	.word	0x08013e08
 800d680:	9907      	ldr	r1, [sp, #28]
 800d682:	2900      	cmp	r1, #0
 800d684:	f000 80d0 	beq.w	800d828 <_dtoa_r+0x7b8>
 800d688:	9906      	ldr	r1, [sp, #24]
 800d68a:	2901      	cmp	r1, #1
 800d68c:	f300 80b4 	bgt.w	800d7f8 <_dtoa_r+0x788>
 800d690:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d692:	2900      	cmp	r1, #0
 800d694:	f000 80ac 	beq.w	800d7f0 <_dtoa_r+0x780>
 800d698:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d69c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d6a0:	461c      	mov	r4, r3
 800d6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a4:	9b04      	ldr	r3, [sp, #16]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	9304      	str	r3, [sp, #16]
 800d6aa:	9b05      	ldr	r3, [sp, #20]
 800d6ac:	2101      	movs	r1, #1
 800d6ae:	4413      	add	r3, r2
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	9305      	str	r3, [sp, #20]
 800d6b4:	f000 fb8a 	bl	800ddcc <__i2b>
 800d6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	f1b8 0f00 	cmp.w	r8, #0
 800d6c0:	d00d      	beq.n	800d6de <_dtoa_r+0x66e>
 800d6c2:	9a05      	ldr	r2, [sp, #20]
 800d6c4:	2a00      	cmp	r2, #0
 800d6c6:	dd0a      	ble.n	800d6de <_dtoa_r+0x66e>
 800d6c8:	4542      	cmp	r2, r8
 800d6ca:	9904      	ldr	r1, [sp, #16]
 800d6cc:	bfa8      	it	ge
 800d6ce:	4642      	movge	r2, r8
 800d6d0:	1a89      	subs	r1, r1, r2
 800d6d2:	9104      	str	r1, [sp, #16]
 800d6d4:	9905      	ldr	r1, [sp, #20]
 800d6d6:	eba8 0802 	sub.w	r8, r8, r2
 800d6da:	1a8a      	subs	r2, r1, r2
 800d6dc:	9205      	str	r2, [sp, #20]
 800d6de:	b303      	cbz	r3, 800d722 <_dtoa_r+0x6b2>
 800d6e0:	9a07      	ldr	r2, [sp, #28]
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	f000 80a5 	beq.w	800d832 <_dtoa_r+0x7c2>
 800d6e8:	2c00      	cmp	r4, #0
 800d6ea:	dd13      	ble.n	800d714 <_dtoa_r+0x6a4>
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	930d      	str	r3, [sp, #52]	; 0x34
 800d6f4:	f000 fc2a 	bl	800df4c <__pow5mult>
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4601      	mov	r1, r0
 800d6fc:	4607      	mov	r7, r0
 800d6fe:	4630      	mov	r0, r6
 800d700:	f000 fb7a 	bl	800ddf8 <__multiply>
 800d704:	4629      	mov	r1, r5
 800d706:	9009      	str	r0, [sp, #36]	; 0x24
 800d708:	4630      	mov	r0, r6
 800d70a:	f000 faa9 	bl	800dc60 <_Bfree>
 800d70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d712:	4615      	mov	r5, r2
 800d714:	1b1a      	subs	r2, r3, r4
 800d716:	d004      	beq.n	800d722 <_dtoa_r+0x6b2>
 800d718:	4629      	mov	r1, r5
 800d71a:	4630      	mov	r0, r6
 800d71c:	f000 fc16 	bl	800df4c <__pow5mult>
 800d720:	4605      	mov	r5, r0
 800d722:	2101      	movs	r1, #1
 800d724:	4630      	mov	r0, r6
 800d726:	f000 fb51 	bl	800ddcc <__i2b>
 800d72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	4604      	mov	r4, r0
 800d730:	f340 8081 	ble.w	800d836 <_dtoa_r+0x7c6>
 800d734:	461a      	mov	r2, r3
 800d736:	4601      	mov	r1, r0
 800d738:	4630      	mov	r0, r6
 800d73a:	f000 fc07 	bl	800df4c <__pow5mult>
 800d73e:	9b06      	ldr	r3, [sp, #24]
 800d740:	2b01      	cmp	r3, #1
 800d742:	4604      	mov	r4, r0
 800d744:	dd7a      	ble.n	800d83c <_dtoa_r+0x7cc>
 800d746:	2300      	movs	r3, #0
 800d748:	9309      	str	r3, [sp, #36]	; 0x24
 800d74a:	6922      	ldr	r2, [r4, #16]
 800d74c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d750:	6910      	ldr	r0, [r2, #16]
 800d752:	f000 faed 	bl	800dd30 <__hi0bits>
 800d756:	f1c0 0020 	rsb	r0, r0, #32
 800d75a:	9b05      	ldr	r3, [sp, #20]
 800d75c:	4418      	add	r0, r3
 800d75e:	f010 001f 	ands.w	r0, r0, #31
 800d762:	f000 8093 	beq.w	800d88c <_dtoa_r+0x81c>
 800d766:	f1c0 0220 	rsb	r2, r0, #32
 800d76a:	2a04      	cmp	r2, #4
 800d76c:	f340 8085 	ble.w	800d87a <_dtoa_r+0x80a>
 800d770:	9b04      	ldr	r3, [sp, #16]
 800d772:	f1c0 001c 	rsb	r0, r0, #28
 800d776:	4403      	add	r3, r0
 800d778:	9304      	str	r3, [sp, #16]
 800d77a:	9b05      	ldr	r3, [sp, #20]
 800d77c:	4480      	add	r8, r0
 800d77e:	4403      	add	r3, r0
 800d780:	9305      	str	r3, [sp, #20]
 800d782:	9b04      	ldr	r3, [sp, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dd05      	ble.n	800d794 <_dtoa_r+0x724>
 800d788:	4629      	mov	r1, r5
 800d78a:	461a      	mov	r2, r3
 800d78c:	4630      	mov	r0, r6
 800d78e:	f000 fc37 	bl	800e000 <__lshift>
 800d792:	4605      	mov	r5, r0
 800d794:	9b05      	ldr	r3, [sp, #20]
 800d796:	2b00      	cmp	r3, #0
 800d798:	dd05      	ble.n	800d7a6 <_dtoa_r+0x736>
 800d79a:	4621      	mov	r1, r4
 800d79c:	461a      	mov	r2, r3
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f000 fc2e 	bl	800e000 <__lshift>
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d071      	beq.n	800d890 <_dtoa_r+0x820>
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f000 fc92 	bl	800e0d8 <__mcmp>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	da6b      	bge.n	800d890 <_dtoa_r+0x820>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	220a      	movs	r2, #10
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f000 fa70 	bl	800dca4 <__multadd>
 800d7c4:	9b07      	ldr	r3, [sp, #28]
 800d7c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f000 8197 	beq.w	800db00 <_dtoa_r+0xa90>
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	220a      	movs	r2, #10
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 fa63 	bl	800dca4 <__multadd>
 800d7de:	f1ba 0f00 	cmp.w	sl, #0
 800d7e2:	4607      	mov	r7, r0
 800d7e4:	f300 8093 	bgt.w	800d90e <_dtoa_r+0x89e>
 800d7e8:	9b06      	ldr	r3, [sp, #24]
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	dc57      	bgt.n	800d89e <_dtoa_r+0x82e>
 800d7ee:	e08e      	b.n	800d90e <_dtoa_r+0x89e>
 800d7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d7f6:	e751      	b.n	800d69c <_dtoa_r+0x62c>
 800d7f8:	f109 34ff 	add.w	r4, r9, #4294967295
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	bfbf      	itttt	lt
 800d800:	1ae2      	sublt	r2, r4, r3
 800d802:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d804:	189b      	addlt	r3, r3, r2
 800d806:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d808:	bfae      	itee	ge
 800d80a:	1b1c      	subge	r4, r3, r4
 800d80c:	4623      	movlt	r3, r4
 800d80e:	2400      	movlt	r4, #0
 800d810:	f1b9 0f00 	cmp.w	r9, #0
 800d814:	bfb5      	itete	lt
 800d816:	9a04      	ldrlt	r2, [sp, #16]
 800d818:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d81c:	eba2 0809 	sublt.w	r8, r2, r9
 800d820:	464a      	movge	r2, r9
 800d822:	bfb8      	it	lt
 800d824:	2200      	movlt	r2, #0
 800d826:	e73c      	b.n	800d6a2 <_dtoa_r+0x632>
 800d828:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d82c:	9f07      	ldr	r7, [sp, #28]
 800d82e:	461c      	mov	r4, r3
 800d830:	e744      	b.n	800d6bc <_dtoa_r+0x64c>
 800d832:	461a      	mov	r2, r3
 800d834:	e770      	b.n	800d718 <_dtoa_r+0x6a8>
 800d836:	9b06      	ldr	r3, [sp, #24]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	dc18      	bgt.n	800d86e <_dtoa_r+0x7fe>
 800d83c:	9b02      	ldr	r3, [sp, #8]
 800d83e:	b9b3      	cbnz	r3, 800d86e <_dtoa_r+0x7fe>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d846:	b9a2      	cbnz	r2, 800d872 <_dtoa_r+0x802>
 800d848:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d84c:	0d12      	lsrs	r2, r2, #20
 800d84e:	0512      	lsls	r2, r2, #20
 800d850:	b18a      	cbz	r2, 800d876 <_dtoa_r+0x806>
 800d852:	9b04      	ldr	r3, [sp, #16]
 800d854:	3301      	adds	r3, #1
 800d856:	9304      	str	r3, [sp, #16]
 800d858:	9b05      	ldr	r3, [sp, #20]
 800d85a:	3301      	adds	r3, #1
 800d85c:	9305      	str	r3, [sp, #20]
 800d85e:	2301      	movs	r3, #1
 800d860:	9309      	str	r3, [sp, #36]	; 0x24
 800d862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d864:	2b00      	cmp	r3, #0
 800d866:	f47f af70 	bne.w	800d74a <_dtoa_r+0x6da>
 800d86a:	2001      	movs	r0, #1
 800d86c:	e775      	b.n	800d75a <_dtoa_r+0x6ea>
 800d86e:	2300      	movs	r3, #0
 800d870:	e7f6      	b.n	800d860 <_dtoa_r+0x7f0>
 800d872:	9b02      	ldr	r3, [sp, #8]
 800d874:	e7f4      	b.n	800d860 <_dtoa_r+0x7f0>
 800d876:	9209      	str	r2, [sp, #36]	; 0x24
 800d878:	e7f3      	b.n	800d862 <_dtoa_r+0x7f2>
 800d87a:	d082      	beq.n	800d782 <_dtoa_r+0x712>
 800d87c:	9b04      	ldr	r3, [sp, #16]
 800d87e:	321c      	adds	r2, #28
 800d880:	4413      	add	r3, r2
 800d882:	9304      	str	r3, [sp, #16]
 800d884:	9b05      	ldr	r3, [sp, #20]
 800d886:	4490      	add	r8, r2
 800d888:	4413      	add	r3, r2
 800d88a:	e779      	b.n	800d780 <_dtoa_r+0x710>
 800d88c:	4602      	mov	r2, r0
 800d88e:	e7f5      	b.n	800d87c <_dtoa_r+0x80c>
 800d890:	f1b9 0f00 	cmp.w	r9, #0
 800d894:	dc36      	bgt.n	800d904 <_dtoa_r+0x894>
 800d896:	9b06      	ldr	r3, [sp, #24]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	dd33      	ble.n	800d904 <_dtoa_r+0x894>
 800d89c:	46ca      	mov	sl, r9
 800d89e:	f1ba 0f00 	cmp.w	sl, #0
 800d8a2:	d10d      	bne.n	800d8c0 <_dtoa_r+0x850>
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	4653      	mov	r3, sl
 800d8a8:	2205      	movs	r2, #5
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f000 f9fa 	bl	800dca4 <__multadd>
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f000 fc0f 	bl	800e0d8 <__mcmp>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f73f ade4 	bgt.w	800d488 <_dtoa_r+0x418>
 800d8c0:	9b08      	ldr	r3, [sp, #32]
 800d8c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d8c6:	ea6f 0b03 	mvn.w	fp, r3
 800d8ca:	f04f 0900 	mov.w	r9, #0
 800d8ce:	4621      	mov	r1, r4
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f000 f9c5 	bl	800dc60 <_Bfree>
 800d8d6:	2f00      	cmp	r7, #0
 800d8d8:	f43f aea1 	beq.w	800d61e <_dtoa_r+0x5ae>
 800d8dc:	f1b9 0f00 	cmp.w	r9, #0
 800d8e0:	d005      	beq.n	800d8ee <_dtoa_r+0x87e>
 800d8e2:	45b9      	cmp	r9, r7
 800d8e4:	d003      	beq.n	800d8ee <_dtoa_r+0x87e>
 800d8e6:	4649      	mov	r1, r9
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f000 f9b9 	bl	800dc60 <_Bfree>
 800d8ee:	4639      	mov	r1, r7
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f000 f9b5 	bl	800dc60 <_Bfree>
 800d8f6:	e692      	b.n	800d61e <_dtoa_r+0x5ae>
 800d8f8:	2400      	movs	r4, #0
 800d8fa:	4627      	mov	r7, r4
 800d8fc:	e7e0      	b.n	800d8c0 <_dtoa_r+0x850>
 800d8fe:	4693      	mov	fp, r2
 800d900:	4627      	mov	r7, r4
 800d902:	e5c1      	b.n	800d488 <_dtoa_r+0x418>
 800d904:	9b07      	ldr	r3, [sp, #28]
 800d906:	46ca      	mov	sl, r9
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 8100 	beq.w	800db0e <_dtoa_r+0xa9e>
 800d90e:	f1b8 0f00 	cmp.w	r8, #0
 800d912:	dd05      	ble.n	800d920 <_dtoa_r+0x8b0>
 800d914:	4639      	mov	r1, r7
 800d916:	4642      	mov	r2, r8
 800d918:	4630      	mov	r0, r6
 800d91a:	f000 fb71 	bl	800e000 <__lshift>
 800d91e:	4607      	mov	r7, r0
 800d920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d922:	2b00      	cmp	r3, #0
 800d924:	d05d      	beq.n	800d9e2 <_dtoa_r+0x972>
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	4630      	mov	r0, r6
 800d92a:	f000 f959 	bl	800dbe0 <_Balloc>
 800d92e:	4680      	mov	r8, r0
 800d930:	b928      	cbnz	r0, 800d93e <_dtoa_r+0x8ce>
 800d932:	4b82      	ldr	r3, [pc, #520]	; (800db3c <_dtoa_r+0xacc>)
 800d934:	4602      	mov	r2, r0
 800d936:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d93a:	f7ff bbb1 	b.w	800d0a0 <_dtoa_r+0x30>
 800d93e:	693a      	ldr	r2, [r7, #16]
 800d940:	3202      	adds	r2, #2
 800d942:	0092      	lsls	r2, r2, #2
 800d944:	f107 010c 	add.w	r1, r7, #12
 800d948:	300c      	adds	r0, #12
 800d94a:	f7ff fafa 	bl	800cf42 <memcpy>
 800d94e:	2201      	movs	r2, #1
 800d950:	4641      	mov	r1, r8
 800d952:	4630      	mov	r0, r6
 800d954:	f000 fb54 	bl	800e000 <__lshift>
 800d958:	9b01      	ldr	r3, [sp, #4]
 800d95a:	3301      	adds	r3, #1
 800d95c:	9304      	str	r3, [sp, #16]
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	4453      	add	r3, sl
 800d962:	9308      	str	r3, [sp, #32]
 800d964:	9b02      	ldr	r3, [sp, #8]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	46b9      	mov	r9, r7
 800d96c:	9307      	str	r3, [sp, #28]
 800d96e:	4607      	mov	r7, r0
 800d970:	9b04      	ldr	r3, [sp, #16]
 800d972:	4621      	mov	r1, r4
 800d974:	3b01      	subs	r3, #1
 800d976:	4628      	mov	r0, r5
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	f7ff faf0 	bl	800cf5e <quorem>
 800d97e:	4603      	mov	r3, r0
 800d980:	3330      	adds	r3, #48	; 0x30
 800d982:	9005      	str	r0, [sp, #20]
 800d984:	4649      	mov	r1, r9
 800d986:	4628      	mov	r0, r5
 800d988:	9309      	str	r3, [sp, #36]	; 0x24
 800d98a:	f000 fba5 	bl	800e0d8 <__mcmp>
 800d98e:	463a      	mov	r2, r7
 800d990:	4682      	mov	sl, r0
 800d992:	4621      	mov	r1, r4
 800d994:	4630      	mov	r0, r6
 800d996:	f000 fbbb 	bl	800e110 <__mdiff>
 800d99a:	68c2      	ldr	r2, [r0, #12]
 800d99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d99e:	4680      	mov	r8, r0
 800d9a0:	bb0a      	cbnz	r2, 800d9e6 <_dtoa_r+0x976>
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	f000 fb97 	bl	800e0d8 <__mcmp>
 800d9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	4641      	mov	r1, r8
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d9b6:	f000 f953 	bl	800dc60 <_Bfree>
 800d9ba:	9b06      	ldr	r3, [sp, #24]
 800d9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9be:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d9c2:	ea43 0102 	orr.w	r1, r3, r2
 800d9c6:	9b07      	ldr	r3, [sp, #28]
 800d9c8:	4319      	orrs	r1, r3
 800d9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9cc:	d10d      	bne.n	800d9ea <_dtoa_r+0x97a>
 800d9ce:	2b39      	cmp	r3, #57	; 0x39
 800d9d0:	d029      	beq.n	800da26 <_dtoa_r+0x9b6>
 800d9d2:	f1ba 0f00 	cmp.w	sl, #0
 800d9d6:	dd01      	ble.n	800d9dc <_dtoa_r+0x96c>
 800d9d8:	9b05      	ldr	r3, [sp, #20]
 800d9da:	3331      	adds	r3, #49	; 0x31
 800d9dc:	9a02      	ldr	r2, [sp, #8]
 800d9de:	7013      	strb	r3, [r2, #0]
 800d9e0:	e775      	b.n	800d8ce <_dtoa_r+0x85e>
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	e7b8      	b.n	800d958 <_dtoa_r+0x8e8>
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	e7e1      	b.n	800d9ae <_dtoa_r+0x93e>
 800d9ea:	f1ba 0f00 	cmp.w	sl, #0
 800d9ee:	db06      	blt.n	800d9fe <_dtoa_r+0x98e>
 800d9f0:	9906      	ldr	r1, [sp, #24]
 800d9f2:	ea41 0a0a 	orr.w	sl, r1, sl
 800d9f6:	9907      	ldr	r1, [sp, #28]
 800d9f8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800d9fc:	d120      	bne.n	800da40 <_dtoa_r+0x9d0>
 800d9fe:	2a00      	cmp	r2, #0
 800da00:	ddec      	ble.n	800d9dc <_dtoa_r+0x96c>
 800da02:	4629      	mov	r1, r5
 800da04:	2201      	movs	r2, #1
 800da06:	4630      	mov	r0, r6
 800da08:	9304      	str	r3, [sp, #16]
 800da0a:	f000 faf9 	bl	800e000 <__lshift>
 800da0e:	4621      	mov	r1, r4
 800da10:	4605      	mov	r5, r0
 800da12:	f000 fb61 	bl	800e0d8 <__mcmp>
 800da16:	2800      	cmp	r0, #0
 800da18:	9b04      	ldr	r3, [sp, #16]
 800da1a:	dc02      	bgt.n	800da22 <_dtoa_r+0x9b2>
 800da1c:	d1de      	bne.n	800d9dc <_dtoa_r+0x96c>
 800da1e:	07da      	lsls	r2, r3, #31
 800da20:	d5dc      	bpl.n	800d9dc <_dtoa_r+0x96c>
 800da22:	2b39      	cmp	r3, #57	; 0x39
 800da24:	d1d8      	bne.n	800d9d8 <_dtoa_r+0x968>
 800da26:	9a02      	ldr	r2, [sp, #8]
 800da28:	2339      	movs	r3, #57	; 0x39
 800da2a:	7013      	strb	r3, [r2, #0]
 800da2c:	4643      	mov	r3, r8
 800da2e:	4698      	mov	r8, r3
 800da30:	3b01      	subs	r3, #1
 800da32:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800da36:	2a39      	cmp	r2, #57	; 0x39
 800da38:	d051      	beq.n	800dade <_dtoa_r+0xa6e>
 800da3a:	3201      	adds	r2, #1
 800da3c:	701a      	strb	r2, [r3, #0]
 800da3e:	e746      	b.n	800d8ce <_dtoa_r+0x85e>
 800da40:	2a00      	cmp	r2, #0
 800da42:	dd03      	ble.n	800da4c <_dtoa_r+0x9dc>
 800da44:	2b39      	cmp	r3, #57	; 0x39
 800da46:	d0ee      	beq.n	800da26 <_dtoa_r+0x9b6>
 800da48:	3301      	adds	r3, #1
 800da4a:	e7c7      	b.n	800d9dc <_dtoa_r+0x96c>
 800da4c:	9a04      	ldr	r2, [sp, #16]
 800da4e:	9908      	ldr	r1, [sp, #32]
 800da50:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da54:	428a      	cmp	r2, r1
 800da56:	d02b      	beq.n	800dab0 <_dtoa_r+0xa40>
 800da58:	4629      	mov	r1, r5
 800da5a:	2300      	movs	r3, #0
 800da5c:	220a      	movs	r2, #10
 800da5e:	4630      	mov	r0, r6
 800da60:	f000 f920 	bl	800dca4 <__multadd>
 800da64:	45b9      	cmp	r9, r7
 800da66:	4605      	mov	r5, r0
 800da68:	f04f 0300 	mov.w	r3, #0
 800da6c:	f04f 020a 	mov.w	r2, #10
 800da70:	4649      	mov	r1, r9
 800da72:	4630      	mov	r0, r6
 800da74:	d107      	bne.n	800da86 <_dtoa_r+0xa16>
 800da76:	f000 f915 	bl	800dca4 <__multadd>
 800da7a:	4681      	mov	r9, r0
 800da7c:	4607      	mov	r7, r0
 800da7e:	9b04      	ldr	r3, [sp, #16]
 800da80:	3301      	adds	r3, #1
 800da82:	9304      	str	r3, [sp, #16]
 800da84:	e774      	b.n	800d970 <_dtoa_r+0x900>
 800da86:	f000 f90d 	bl	800dca4 <__multadd>
 800da8a:	4639      	mov	r1, r7
 800da8c:	4681      	mov	r9, r0
 800da8e:	2300      	movs	r3, #0
 800da90:	220a      	movs	r2, #10
 800da92:	4630      	mov	r0, r6
 800da94:	f000 f906 	bl	800dca4 <__multadd>
 800da98:	4607      	mov	r7, r0
 800da9a:	e7f0      	b.n	800da7e <_dtoa_r+0xa0e>
 800da9c:	f1ba 0f00 	cmp.w	sl, #0
 800daa0:	9a01      	ldr	r2, [sp, #4]
 800daa2:	bfcc      	ite	gt
 800daa4:	46d0      	movgt	r8, sl
 800daa6:	f04f 0801 	movle.w	r8, #1
 800daaa:	4490      	add	r8, r2
 800daac:	f04f 0900 	mov.w	r9, #0
 800dab0:	4629      	mov	r1, r5
 800dab2:	2201      	movs	r2, #1
 800dab4:	4630      	mov	r0, r6
 800dab6:	9302      	str	r3, [sp, #8]
 800dab8:	f000 faa2 	bl	800e000 <__lshift>
 800dabc:	4621      	mov	r1, r4
 800dabe:	4605      	mov	r5, r0
 800dac0:	f000 fb0a 	bl	800e0d8 <__mcmp>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	dcb1      	bgt.n	800da2c <_dtoa_r+0x9bc>
 800dac8:	d102      	bne.n	800dad0 <_dtoa_r+0xa60>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	07db      	lsls	r3, r3, #31
 800dace:	d4ad      	bmi.n	800da2c <_dtoa_r+0x9bc>
 800dad0:	4643      	mov	r3, r8
 800dad2:	4698      	mov	r8, r3
 800dad4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dad8:	2a30      	cmp	r2, #48	; 0x30
 800dada:	d0fa      	beq.n	800dad2 <_dtoa_r+0xa62>
 800dadc:	e6f7      	b.n	800d8ce <_dtoa_r+0x85e>
 800dade:	9a01      	ldr	r2, [sp, #4]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d1a4      	bne.n	800da2e <_dtoa_r+0x9be>
 800dae4:	f10b 0b01 	add.w	fp, fp, #1
 800dae8:	2331      	movs	r3, #49	; 0x31
 800daea:	e778      	b.n	800d9de <_dtoa_r+0x96e>
 800daec:	4b14      	ldr	r3, [pc, #80]	; (800db40 <_dtoa_r+0xad0>)
 800daee:	f7ff bb2a 	b.w	800d146 <_dtoa_r+0xd6>
 800daf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f47f ab05 	bne.w	800d104 <_dtoa_r+0x94>
 800dafa:	4b12      	ldr	r3, [pc, #72]	; (800db44 <_dtoa_r+0xad4>)
 800dafc:	f7ff bb23 	b.w	800d146 <_dtoa_r+0xd6>
 800db00:	f1ba 0f00 	cmp.w	sl, #0
 800db04:	dc03      	bgt.n	800db0e <_dtoa_r+0xa9e>
 800db06:	9b06      	ldr	r3, [sp, #24]
 800db08:	2b02      	cmp	r3, #2
 800db0a:	f73f aec8 	bgt.w	800d89e <_dtoa_r+0x82e>
 800db0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800db12:	4621      	mov	r1, r4
 800db14:	4628      	mov	r0, r5
 800db16:	f7ff fa22 	bl	800cf5e <quorem>
 800db1a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800db1e:	f808 3b01 	strb.w	r3, [r8], #1
 800db22:	9a01      	ldr	r2, [sp, #4]
 800db24:	eba8 0202 	sub.w	r2, r8, r2
 800db28:	4592      	cmp	sl, r2
 800db2a:	ddb7      	ble.n	800da9c <_dtoa_r+0xa2c>
 800db2c:	4629      	mov	r1, r5
 800db2e:	2300      	movs	r3, #0
 800db30:	220a      	movs	r2, #10
 800db32:	4630      	mov	r0, r6
 800db34:	f000 f8b6 	bl	800dca4 <__multadd>
 800db38:	4605      	mov	r5, r0
 800db3a:	e7ea      	b.n	800db12 <_dtoa_r+0xaa2>
 800db3c:	08013d98 	.word	0x08013d98
 800db40:	08013cf8 	.word	0x08013cf8
 800db44:	08013d1c 	.word	0x08013d1c

0800db48 <_free_r>:
 800db48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db4a:	2900      	cmp	r1, #0
 800db4c:	d044      	beq.n	800dbd8 <_free_r+0x90>
 800db4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db52:	9001      	str	r0, [sp, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	f1a1 0404 	sub.w	r4, r1, #4
 800db5a:	bfb8      	it	lt
 800db5c:	18e4      	addlt	r4, r4, r3
 800db5e:	f7fe fbb1 	bl	800c2c4 <__malloc_lock>
 800db62:	4a1e      	ldr	r2, [pc, #120]	; (800dbdc <_free_r+0x94>)
 800db64:	9801      	ldr	r0, [sp, #4]
 800db66:	6813      	ldr	r3, [r2, #0]
 800db68:	b933      	cbnz	r3, 800db78 <_free_r+0x30>
 800db6a:	6063      	str	r3, [r4, #4]
 800db6c:	6014      	str	r4, [r2, #0]
 800db6e:	b003      	add	sp, #12
 800db70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db74:	f7fe bbac 	b.w	800c2d0 <__malloc_unlock>
 800db78:	42a3      	cmp	r3, r4
 800db7a:	d908      	bls.n	800db8e <_free_r+0x46>
 800db7c:	6825      	ldr	r5, [r4, #0]
 800db7e:	1961      	adds	r1, r4, r5
 800db80:	428b      	cmp	r3, r1
 800db82:	bf01      	itttt	eq
 800db84:	6819      	ldreq	r1, [r3, #0]
 800db86:	685b      	ldreq	r3, [r3, #4]
 800db88:	1949      	addeq	r1, r1, r5
 800db8a:	6021      	streq	r1, [r4, #0]
 800db8c:	e7ed      	b.n	800db6a <_free_r+0x22>
 800db8e:	461a      	mov	r2, r3
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	b10b      	cbz	r3, 800db98 <_free_r+0x50>
 800db94:	42a3      	cmp	r3, r4
 800db96:	d9fa      	bls.n	800db8e <_free_r+0x46>
 800db98:	6811      	ldr	r1, [r2, #0]
 800db9a:	1855      	adds	r5, r2, r1
 800db9c:	42a5      	cmp	r5, r4
 800db9e:	d10b      	bne.n	800dbb8 <_free_r+0x70>
 800dba0:	6824      	ldr	r4, [r4, #0]
 800dba2:	4421      	add	r1, r4
 800dba4:	1854      	adds	r4, r2, r1
 800dba6:	42a3      	cmp	r3, r4
 800dba8:	6011      	str	r1, [r2, #0]
 800dbaa:	d1e0      	bne.n	800db6e <_free_r+0x26>
 800dbac:	681c      	ldr	r4, [r3, #0]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	6053      	str	r3, [r2, #4]
 800dbb2:	440c      	add	r4, r1
 800dbb4:	6014      	str	r4, [r2, #0]
 800dbb6:	e7da      	b.n	800db6e <_free_r+0x26>
 800dbb8:	d902      	bls.n	800dbc0 <_free_r+0x78>
 800dbba:	230c      	movs	r3, #12
 800dbbc:	6003      	str	r3, [r0, #0]
 800dbbe:	e7d6      	b.n	800db6e <_free_r+0x26>
 800dbc0:	6825      	ldr	r5, [r4, #0]
 800dbc2:	1961      	adds	r1, r4, r5
 800dbc4:	428b      	cmp	r3, r1
 800dbc6:	bf04      	itt	eq
 800dbc8:	6819      	ldreq	r1, [r3, #0]
 800dbca:	685b      	ldreq	r3, [r3, #4]
 800dbcc:	6063      	str	r3, [r4, #4]
 800dbce:	bf04      	itt	eq
 800dbd0:	1949      	addeq	r1, r1, r5
 800dbd2:	6021      	streq	r1, [r4, #0]
 800dbd4:	6054      	str	r4, [r2, #4]
 800dbd6:	e7ca      	b.n	800db6e <_free_r+0x26>
 800dbd8:	b003      	add	sp, #12
 800dbda:	bd30      	pop	{r4, r5, pc}
 800dbdc:	240030f4 	.word	0x240030f4

0800dbe0 <_Balloc>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	69c6      	ldr	r6, [r0, #28]
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	460d      	mov	r5, r1
 800dbe8:	b976      	cbnz	r6, 800dc08 <_Balloc+0x28>
 800dbea:	2010      	movs	r0, #16
 800dbec:	f7fe fac2 	bl	800c174 <malloc>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	61e0      	str	r0, [r4, #28]
 800dbf4:	b920      	cbnz	r0, 800dc00 <_Balloc+0x20>
 800dbf6:	4b18      	ldr	r3, [pc, #96]	; (800dc58 <_Balloc+0x78>)
 800dbf8:	4818      	ldr	r0, [pc, #96]	; (800dc5c <_Balloc+0x7c>)
 800dbfa:	216b      	movs	r1, #107	; 0x6b
 800dbfc:	f000 ff6e 	bl	800eadc <__assert_func>
 800dc00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc04:	6006      	str	r6, [r0, #0]
 800dc06:	60c6      	str	r6, [r0, #12]
 800dc08:	69e6      	ldr	r6, [r4, #28]
 800dc0a:	68f3      	ldr	r3, [r6, #12]
 800dc0c:	b183      	cbz	r3, 800dc30 <_Balloc+0x50>
 800dc0e:	69e3      	ldr	r3, [r4, #28]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc16:	b9b8      	cbnz	r0, 800dc48 <_Balloc+0x68>
 800dc18:	2101      	movs	r1, #1
 800dc1a:	fa01 f605 	lsl.w	r6, r1, r5
 800dc1e:	1d72      	adds	r2, r6, #5
 800dc20:	0092      	lsls	r2, r2, #2
 800dc22:	4620      	mov	r0, r4
 800dc24:	f000 ff78 	bl	800eb18 <_calloc_r>
 800dc28:	b160      	cbz	r0, 800dc44 <_Balloc+0x64>
 800dc2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc2e:	e00e      	b.n	800dc4e <_Balloc+0x6e>
 800dc30:	2221      	movs	r2, #33	; 0x21
 800dc32:	2104      	movs	r1, #4
 800dc34:	4620      	mov	r0, r4
 800dc36:	f000 ff6f 	bl	800eb18 <_calloc_r>
 800dc3a:	69e3      	ldr	r3, [r4, #28]
 800dc3c:	60f0      	str	r0, [r6, #12]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1e4      	bne.n	800dc0e <_Balloc+0x2e>
 800dc44:	2000      	movs	r0, #0
 800dc46:	bd70      	pop	{r4, r5, r6, pc}
 800dc48:	6802      	ldr	r2, [r0, #0]
 800dc4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc54:	e7f7      	b.n	800dc46 <_Balloc+0x66>
 800dc56:	bf00      	nop
 800dc58:	08013d29 	.word	0x08013d29
 800dc5c:	08013da9 	.word	0x08013da9

0800dc60 <_Bfree>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	69c6      	ldr	r6, [r0, #28]
 800dc64:	4605      	mov	r5, r0
 800dc66:	460c      	mov	r4, r1
 800dc68:	b976      	cbnz	r6, 800dc88 <_Bfree+0x28>
 800dc6a:	2010      	movs	r0, #16
 800dc6c:	f7fe fa82 	bl	800c174 <malloc>
 800dc70:	4602      	mov	r2, r0
 800dc72:	61e8      	str	r0, [r5, #28]
 800dc74:	b920      	cbnz	r0, 800dc80 <_Bfree+0x20>
 800dc76:	4b09      	ldr	r3, [pc, #36]	; (800dc9c <_Bfree+0x3c>)
 800dc78:	4809      	ldr	r0, [pc, #36]	; (800dca0 <_Bfree+0x40>)
 800dc7a:	218f      	movs	r1, #143	; 0x8f
 800dc7c:	f000 ff2e 	bl	800eadc <__assert_func>
 800dc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc84:	6006      	str	r6, [r0, #0]
 800dc86:	60c6      	str	r6, [r0, #12]
 800dc88:	b13c      	cbz	r4, 800dc9a <_Bfree+0x3a>
 800dc8a:	69eb      	ldr	r3, [r5, #28]
 800dc8c:	6862      	ldr	r2, [r4, #4]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc94:	6021      	str	r1, [r4, #0]
 800dc96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	08013d29 	.word	0x08013d29
 800dca0:	08013da9 	.word	0x08013da9

0800dca4 <__multadd>:
 800dca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca8:	690d      	ldr	r5, [r1, #16]
 800dcaa:	4607      	mov	r7, r0
 800dcac:	460c      	mov	r4, r1
 800dcae:	461e      	mov	r6, r3
 800dcb0:	f101 0c14 	add.w	ip, r1, #20
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	f8dc 3000 	ldr.w	r3, [ip]
 800dcba:	b299      	uxth	r1, r3
 800dcbc:	fb02 6101 	mla	r1, r2, r1, r6
 800dcc0:	0c1e      	lsrs	r6, r3, #16
 800dcc2:	0c0b      	lsrs	r3, r1, #16
 800dcc4:	fb02 3306 	mla	r3, r2, r6, r3
 800dcc8:	b289      	uxth	r1, r1
 800dcca:	3001      	adds	r0, #1
 800dccc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcd0:	4285      	cmp	r5, r0
 800dcd2:	f84c 1b04 	str.w	r1, [ip], #4
 800dcd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dcda:	dcec      	bgt.n	800dcb6 <__multadd+0x12>
 800dcdc:	b30e      	cbz	r6, 800dd22 <__multadd+0x7e>
 800dcde:	68a3      	ldr	r3, [r4, #8]
 800dce0:	42ab      	cmp	r3, r5
 800dce2:	dc19      	bgt.n	800dd18 <__multadd+0x74>
 800dce4:	6861      	ldr	r1, [r4, #4]
 800dce6:	4638      	mov	r0, r7
 800dce8:	3101      	adds	r1, #1
 800dcea:	f7ff ff79 	bl	800dbe0 <_Balloc>
 800dcee:	4680      	mov	r8, r0
 800dcf0:	b928      	cbnz	r0, 800dcfe <__multadd+0x5a>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	4b0c      	ldr	r3, [pc, #48]	; (800dd28 <__multadd+0x84>)
 800dcf6:	480d      	ldr	r0, [pc, #52]	; (800dd2c <__multadd+0x88>)
 800dcf8:	21ba      	movs	r1, #186	; 0xba
 800dcfa:	f000 feef 	bl	800eadc <__assert_func>
 800dcfe:	6922      	ldr	r2, [r4, #16]
 800dd00:	3202      	adds	r2, #2
 800dd02:	f104 010c 	add.w	r1, r4, #12
 800dd06:	0092      	lsls	r2, r2, #2
 800dd08:	300c      	adds	r0, #12
 800dd0a:	f7ff f91a 	bl	800cf42 <memcpy>
 800dd0e:	4621      	mov	r1, r4
 800dd10:	4638      	mov	r0, r7
 800dd12:	f7ff ffa5 	bl	800dc60 <_Bfree>
 800dd16:	4644      	mov	r4, r8
 800dd18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd1c:	3501      	adds	r5, #1
 800dd1e:	615e      	str	r6, [r3, #20]
 800dd20:	6125      	str	r5, [r4, #16]
 800dd22:	4620      	mov	r0, r4
 800dd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd28:	08013d98 	.word	0x08013d98
 800dd2c:	08013da9 	.word	0x08013da9

0800dd30 <__hi0bits>:
 800dd30:	0c03      	lsrs	r3, r0, #16
 800dd32:	041b      	lsls	r3, r3, #16
 800dd34:	b9d3      	cbnz	r3, 800dd6c <__hi0bits+0x3c>
 800dd36:	0400      	lsls	r0, r0, #16
 800dd38:	2310      	movs	r3, #16
 800dd3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dd3e:	bf04      	itt	eq
 800dd40:	0200      	lsleq	r0, r0, #8
 800dd42:	3308      	addeq	r3, #8
 800dd44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dd48:	bf04      	itt	eq
 800dd4a:	0100      	lsleq	r0, r0, #4
 800dd4c:	3304      	addeq	r3, #4
 800dd4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dd52:	bf04      	itt	eq
 800dd54:	0080      	lsleq	r0, r0, #2
 800dd56:	3302      	addeq	r3, #2
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	db05      	blt.n	800dd68 <__hi0bits+0x38>
 800dd5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dd60:	f103 0301 	add.w	r3, r3, #1
 800dd64:	bf08      	it	eq
 800dd66:	2320      	moveq	r3, #32
 800dd68:	4618      	mov	r0, r3
 800dd6a:	4770      	bx	lr
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	e7e4      	b.n	800dd3a <__hi0bits+0xa>

0800dd70 <__lo0bits>:
 800dd70:	6803      	ldr	r3, [r0, #0]
 800dd72:	f013 0207 	ands.w	r2, r3, #7
 800dd76:	d00c      	beq.n	800dd92 <__lo0bits+0x22>
 800dd78:	07d9      	lsls	r1, r3, #31
 800dd7a:	d422      	bmi.n	800ddc2 <__lo0bits+0x52>
 800dd7c:	079a      	lsls	r2, r3, #30
 800dd7e:	bf49      	itett	mi
 800dd80:	085b      	lsrmi	r3, r3, #1
 800dd82:	089b      	lsrpl	r3, r3, #2
 800dd84:	6003      	strmi	r3, [r0, #0]
 800dd86:	2201      	movmi	r2, #1
 800dd88:	bf5c      	itt	pl
 800dd8a:	6003      	strpl	r3, [r0, #0]
 800dd8c:	2202      	movpl	r2, #2
 800dd8e:	4610      	mov	r0, r2
 800dd90:	4770      	bx	lr
 800dd92:	b299      	uxth	r1, r3
 800dd94:	b909      	cbnz	r1, 800dd9a <__lo0bits+0x2a>
 800dd96:	0c1b      	lsrs	r3, r3, #16
 800dd98:	2210      	movs	r2, #16
 800dd9a:	b2d9      	uxtb	r1, r3
 800dd9c:	b909      	cbnz	r1, 800dda2 <__lo0bits+0x32>
 800dd9e:	3208      	adds	r2, #8
 800dda0:	0a1b      	lsrs	r3, r3, #8
 800dda2:	0719      	lsls	r1, r3, #28
 800dda4:	bf04      	itt	eq
 800dda6:	091b      	lsreq	r3, r3, #4
 800dda8:	3204      	addeq	r2, #4
 800ddaa:	0799      	lsls	r1, r3, #30
 800ddac:	bf04      	itt	eq
 800ddae:	089b      	lsreq	r3, r3, #2
 800ddb0:	3202      	addeq	r2, #2
 800ddb2:	07d9      	lsls	r1, r3, #31
 800ddb4:	d403      	bmi.n	800ddbe <__lo0bits+0x4e>
 800ddb6:	085b      	lsrs	r3, r3, #1
 800ddb8:	f102 0201 	add.w	r2, r2, #1
 800ddbc:	d003      	beq.n	800ddc6 <__lo0bits+0x56>
 800ddbe:	6003      	str	r3, [r0, #0]
 800ddc0:	e7e5      	b.n	800dd8e <__lo0bits+0x1e>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	e7e3      	b.n	800dd8e <__lo0bits+0x1e>
 800ddc6:	2220      	movs	r2, #32
 800ddc8:	e7e1      	b.n	800dd8e <__lo0bits+0x1e>
	...

0800ddcc <__i2b>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	460c      	mov	r4, r1
 800ddd0:	2101      	movs	r1, #1
 800ddd2:	f7ff ff05 	bl	800dbe0 <_Balloc>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	b928      	cbnz	r0, 800dde6 <__i2b+0x1a>
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <__i2b+0x24>)
 800dddc:	4805      	ldr	r0, [pc, #20]	; (800ddf4 <__i2b+0x28>)
 800ddde:	f240 1145 	movw	r1, #325	; 0x145
 800dde2:	f000 fe7b 	bl	800eadc <__assert_func>
 800dde6:	2301      	movs	r3, #1
 800dde8:	6144      	str	r4, [r0, #20]
 800ddea:	6103      	str	r3, [r0, #16]
 800ddec:	bd10      	pop	{r4, pc}
 800ddee:	bf00      	nop
 800ddf0:	08013d98 	.word	0x08013d98
 800ddf4:	08013da9 	.word	0x08013da9

0800ddf8 <__multiply>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	4691      	mov	r9, r2
 800ddfe:	690a      	ldr	r2, [r1, #16]
 800de00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de04:	429a      	cmp	r2, r3
 800de06:	bfb8      	it	lt
 800de08:	460b      	movlt	r3, r1
 800de0a:	460c      	mov	r4, r1
 800de0c:	bfbc      	itt	lt
 800de0e:	464c      	movlt	r4, r9
 800de10:	4699      	movlt	r9, r3
 800de12:	6927      	ldr	r7, [r4, #16]
 800de14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de18:	68a3      	ldr	r3, [r4, #8]
 800de1a:	6861      	ldr	r1, [r4, #4]
 800de1c:	eb07 060a 	add.w	r6, r7, sl
 800de20:	42b3      	cmp	r3, r6
 800de22:	b085      	sub	sp, #20
 800de24:	bfb8      	it	lt
 800de26:	3101      	addlt	r1, #1
 800de28:	f7ff feda 	bl	800dbe0 <_Balloc>
 800de2c:	b930      	cbnz	r0, 800de3c <__multiply+0x44>
 800de2e:	4602      	mov	r2, r0
 800de30:	4b44      	ldr	r3, [pc, #272]	; (800df44 <__multiply+0x14c>)
 800de32:	4845      	ldr	r0, [pc, #276]	; (800df48 <__multiply+0x150>)
 800de34:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800de38:	f000 fe50 	bl	800eadc <__assert_func>
 800de3c:	f100 0514 	add.w	r5, r0, #20
 800de40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800de44:	462b      	mov	r3, r5
 800de46:	2200      	movs	r2, #0
 800de48:	4543      	cmp	r3, r8
 800de4a:	d321      	bcc.n	800de90 <__multiply+0x98>
 800de4c:	f104 0314 	add.w	r3, r4, #20
 800de50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800de54:	f109 0314 	add.w	r3, r9, #20
 800de58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800de5c:	9202      	str	r2, [sp, #8]
 800de5e:	1b3a      	subs	r2, r7, r4
 800de60:	3a15      	subs	r2, #21
 800de62:	f022 0203 	bic.w	r2, r2, #3
 800de66:	3204      	adds	r2, #4
 800de68:	f104 0115 	add.w	r1, r4, #21
 800de6c:	428f      	cmp	r7, r1
 800de6e:	bf38      	it	cc
 800de70:	2204      	movcc	r2, #4
 800de72:	9201      	str	r2, [sp, #4]
 800de74:	9a02      	ldr	r2, [sp, #8]
 800de76:	9303      	str	r3, [sp, #12]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d80c      	bhi.n	800de96 <__multiply+0x9e>
 800de7c:	2e00      	cmp	r6, #0
 800de7e:	dd03      	ble.n	800de88 <__multiply+0x90>
 800de80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800de84:	2b00      	cmp	r3, #0
 800de86:	d05b      	beq.n	800df40 <__multiply+0x148>
 800de88:	6106      	str	r6, [r0, #16]
 800de8a:	b005      	add	sp, #20
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	f843 2b04 	str.w	r2, [r3], #4
 800de94:	e7d8      	b.n	800de48 <__multiply+0x50>
 800de96:	f8b3 a000 	ldrh.w	sl, [r3]
 800de9a:	f1ba 0f00 	cmp.w	sl, #0
 800de9e:	d024      	beq.n	800deea <__multiply+0xf2>
 800dea0:	f104 0e14 	add.w	lr, r4, #20
 800dea4:	46a9      	mov	r9, r5
 800dea6:	f04f 0c00 	mov.w	ip, #0
 800deaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800deae:	f8d9 1000 	ldr.w	r1, [r9]
 800deb2:	fa1f fb82 	uxth.w	fp, r2
 800deb6:	b289      	uxth	r1, r1
 800deb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800debc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dec0:	f8d9 2000 	ldr.w	r2, [r9]
 800dec4:	4461      	add	r1, ip
 800dec6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800deca:	fb0a c20b 	mla	r2, sl, fp, ip
 800dece:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ded2:	b289      	uxth	r1, r1
 800ded4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ded8:	4577      	cmp	r7, lr
 800deda:	f849 1b04 	str.w	r1, [r9], #4
 800dede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dee2:	d8e2      	bhi.n	800deaa <__multiply+0xb2>
 800dee4:	9a01      	ldr	r2, [sp, #4]
 800dee6:	f845 c002 	str.w	ip, [r5, r2]
 800deea:	9a03      	ldr	r2, [sp, #12]
 800deec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800def0:	3304      	adds	r3, #4
 800def2:	f1b9 0f00 	cmp.w	r9, #0
 800def6:	d021      	beq.n	800df3c <__multiply+0x144>
 800def8:	6829      	ldr	r1, [r5, #0]
 800defa:	f104 0c14 	add.w	ip, r4, #20
 800defe:	46ae      	mov	lr, r5
 800df00:	f04f 0a00 	mov.w	sl, #0
 800df04:	f8bc b000 	ldrh.w	fp, [ip]
 800df08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df0c:	fb09 220b 	mla	r2, r9, fp, r2
 800df10:	4452      	add	r2, sl
 800df12:	b289      	uxth	r1, r1
 800df14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df18:	f84e 1b04 	str.w	r1, [lr], #4
 800df1c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df24:	f8be 1000 	ldrh.w	r1, [lr]
 800df28:	fb09 110a 	mla	r1, r9, sl, r1
 800df2c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800df30:	4567      	cmp	r7, ip
 800df32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df36:	d8e5      	bhi.n	800df04 <__multiply+0x10c>
 800df38:	9a01      	ldr	r2, [sp, #4]
 800df3a:	50a9      	str	r1, [r5, r2]
 800df3c:	3504      	adds	r5, #4
 800df3e:	e799      	b.n	800de74 <__multiply+0x7c>
 800df40:	3e01      	subs	r6, #1
 800df42:	e79b      	b.n	800de7c <__multiply+0x84>
 800df44:	08013d98 	.word	0x08013d98
 800df48:	08013da9 	.word	0x08013da9

0800df4c <__pow5mult>:
 800df4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df50:	4615      	mov	r5, r2
 800df52:	f012 0203 	ands.w	r2, r2, #3
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	d007      	beq.n	800df6c <__pow5mult+0x20>
 800df5c:	4c25      	ldr	r4, [pc, #148]	; (800dff4 <__pow5mult+0xa8>)
 800df5e:	3a01      	subs	r2, #1
 800df60:	2300      	movs	r3, #0
 800df62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df66:	f7ff fe9d 	bl	800dca4 <__multadd>
 800df6a:	4607      	mov	r7, r0
 800df6c:	10ad      	asrs	r5, r5, #2
 800df6e:	d03d      	beq.n	800dfec <__pow5mult+0xa0>
 800df70:	69f4      	ldr	r4, [r6, #28]
 800df72:	b97c      	cbnz	r4, 800df94 <__pow5mult+0x48>
 800df74:	2010      	movs	r0, #16
 800df76:	f7fe f8fd 	bl	800c174 <malloc>
 800df7a:	4602      	mov	r2, r0
 800df7c:	61f0      	str	r0, [r6, #28]
 800df7e:	b928      	cbnz	r0, 800df8c <__pow5mult+0x40>
 800df80:	4b1d      	ldr	r3, [pc, #116]	; (800dff8 <__pow5mult+0xac>)
 800df82:	481e      	ldr	r0, [pc, #120]	; (800dffc <__pow5mult+0xb0>)
 800df84:	f240 11b3 	movw	r1, #435	; 0x1b3
 800df88:	f000 fda8 	bl	800eadc <__assert_func>
 800df8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df90:	6004      	str	r4, [r0, #0]
 800df92:	60c4      	str	r4, [r0, #12]
 800df94:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800df98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df9c:	b94c      	cbnz	r4, 800dfb2 <__pow5mult+0x66>
 800df9e:	f240 2171 	movw	r1, #625	; 0x271
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f7ff ff12 	bl	800ddcc <__i2b>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800dfae:	4604      	mov	r4, r0
 800dfb0:	6003      	str	r3, [r0, #0]
 800dfb2:	f04f 0900 	mov.w	r9, #0
 800dfb6:	07eb      	lsls	r3, r5, #31
 800dfb8:	d50a      	bpl.n	800dfd0 <__pow5mult+0x84>
 800dfba:	4639      	mov	r1, r7
 800dfbc:	4622      	mov	r2, r4
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	f7ff ff1a 	bl	800ddf8 <__multiply>
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	4680      	mov	r8, r0
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f7ff fe49 	bl	800dc60 <_Bfree>
 800dfce:	4647      	mov	r7, r8
 800dfd0:	106d      	asrs	r5, r5, #1
 800dfd2:	d00b      	beq.n	800dfec <__pow5mult+0xa0>
 800dfd4:	6820      	ldr	r0, [r4, #0]
 800dfd6:	b938      	cbnz	r0, 800dfe8 <__pow5mult+0x9c>
 800dfd8:	4622      	mov	r2, r4
 800dfda:	4621      	mov	r1, r4
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f7ff ff0b 	bl	800ddf8 <__multiply>
 800dfe2:	6020      	str	r0, [r4, #0]
 800dfe4:	f8c0 9000 	str.w	r9, [r0]
 800dfe8:	4604      	mov	r4, r0
 800dfea:	e7e4      	b.n	800dfb6 <__pow5mult+0x6a>
 800dfec:	4638      	mov	r0, r7
 800dfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dff2:	bf00      	nop
 800dff4:	08013ef8 	.word	0x08013ef8
 800dff8:	08013d29 	.word	0x08013d29
 800dffc:	08013da9 	.word	0x08013da9

0800e000 <__lshift>:
 800e000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e004:	460c      	mov	r4, r1
 800e006:	6849      	ldr	r1, [r1, #4]
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e00e:	68a3      	ldr	r3, [r4, #8]
 800e010:	4607      	mov	r7, r0
 800e012:	4691      	mov	r9, r2
 800e014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e018:	f108 0601 	add.w	r6, r8, #1
 800e01c:	42b3      	cmp	r3, r6
 800e01e:	db0b      	blt.n	800e038 <__lshift+0x38>
 800e020:	4638      	mov	r0, r7
 800e022:	f7ff fddd 	bl	800dbe0 <_Balloc>
 800e026:	4605      	mov	r5, r0
 800e028:	b948      	cbnz	r0, 800e03e <__lshift+0x3e>
 800e02a:	4602      	mov	r2, r0
 800e02c:	4b28      	ldr	r3, [pc, #160]	; (800e0d0 <__lshift+0xd0>)
 800e02e:	4829      	ldr	r0, [pc, #164]	; (800e0d4 <__lshift+0xd4>)
 800e030:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e034:	f000 fd52 	bl	800eadc <__assert_func>
 800e038:	3101      	adds	r1, #1
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	e7ee      	b.n	800e01c <__lshift+0x1c>
 800e03e:	2300      	movs	r3, #0
 800e040:	f100 0114 	add.w	r1, r0, #20
 800e044:	f100 0210 	add.w	r2, r0, #16
 800e048:	4618      	mov	r0, r3
 800e04a:	4553      	cmp	r3, sl
 800e04c:	db33      	blt.n	800e0b6 <__lshift+0xb6>
 800e04e:	6920      	ldr	r0, [r4, #16]
 800e050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e054:	f104 0314 	add.w	r3, r4, #20
 800e058:	f019 091f 	ands.w	r9, r9, #31
 800e05c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e064:	d02b      	beq.n	800e0be <__lshift+0xbe>
 800e066:	f1c9 0e20 	rsb	lr, r9, #32
 800e06a:	468a      	mov	sl, r1
 800e06c:	2200      	movs	r2, #0
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	fa00 f009 	lsl.w	r0, r0, r9
 800e074:	4310      	orrs	r0, r2
 800e076:	f84a 0b04 	str.w	r0, [sl], #4
 800e07a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e07e:	459c      	cmp	ip, r3
 800e080:	fa22 f20e 	lsr.w	r2, r2, lr
 800e084:	d8f3      	bhi.n	800e06e <__lshift+0x6e>
 800e086:	ebac 0304 	sub.w	r3, ip, r4
 800e08a:	3b15      	subs	r3, #21
 800e08c:	f023 0303 	bic.w	r3, r3, #3
 800e090:	3304      	adds	r3, #4
 800e092:	f104 0015 	add.w	r0, r4, #21
 800e096:	4584      	cmp	ip, r0
 800e098:	bf38      	it	cc
 800e09a:	2304      	movcc	r3, #4
 800e09c:	50ca      	str	r2, [r1, r3]
 800e09e:	b10a      	cbz	r2, 800e0a4 <__lshift+0xa4>
 800e0a0:	f108 0602 	add.w	r6, r8, #2
 800e0a4:	3e01      	subs	r6, #1
 800e0a6:	4638      	mov	r0, r7
 800e0a8:	612e      	str	r6, [r5, #16]
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	f7ff fdd8 	bl	800dc60 <_Bfree>
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	e7c5      	b.n	800e04a <__lshift+0x4a>
 800e0be:	3904      	subs	r1, #4
 800e0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e0c8:	459c      	cmp	ip, r3
 800e0ca:	d8f9      	bhi.n	800e0c0 <__lshift+0xc0>
 800e0cc:	e7ea      	b.n	800e0a4 <__lshift+0xa4>
 800e0ce:	bf00      	nop
 800e0d0:	08013d98 	.word	0x08013d98
 800e0d4:	08013da9 	.word	0x08013da9

0800e0d8 <__mcmp>:
 800e0d8:	b530      	push	{r4, r5, lr}
 800e0da:	6902      	ldr	r2, [r0, #16]
 800e0dc:	690c      	ldr	r4, [r1, #16]
 800e0de:	1b12      	subs	r2, r2, r4
 800e0e0:	d10e      	bne.n	800e100 <__mcmp+0x28>
 800e0e2:	f100 0314 	add.w	r3, r0, #20
 800e0e6:	3114      	adds	r1, #20
 800e0e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e0ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e0f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e0f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e0f8:	42a5      	cmp	r5, r4
 800e0fa:	d003      	beq.n	800e104 <__mcmp+0x2c>
 800e0fc:	d305      	bcc.n	800e10a <__mcmp+0x32>
 800e0fe:	2201      	movs	r2, #1
 800e100:	4610      	mov	r0, r2
 800e102:	bd30      	pop	{r4, r5, pc}
 800e104:	4283      	cmp	r3, r0
 800e106:	d3f3      	bcc.n	800e0f0 <__mcmp+0x18>
 800e108:	e7fa      	b.n	800e100 <__mcmp+0x28>
 800e10a:	f04f 32ff 	mov.w	r2, #4294967295
 800e10e:	e7f7      	b.n	800e100 <__mcmp+0x28>

0800e110 <__mdiff>:
 800e110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	460c      	mov	r4, r1
 800e116:	4606      	mov	r6, r0
 800e118:	4611      	mov	r1, r2
 800e11a:	4620      	mov	r0, r4
 800e11c:	4690      	mov	r8, r2
 800e11e:	f7ff ffdb 	bl	800e0d8 <__mcmp>
 800e122:	1e05      	subs	r5, r0, #0
 800e124:	d110      	bne.n	800e148 <__mdiff+0x38>
 800e126:	4629      	mov	r1, r5
 800e128:	4630      	mov	r0, r6
 800e12a:	f7ff fd59 	bl	800dbe0 <_Balloc>
 800e12e:	b930      	cbnz	r0, 800e13e <__mdiff+0x2e>
 800e130:	4b3a      	ldr	r3, [pc, #232]	; (800e21c <__mdiff+0x10c>)
 800e132:	4602      	mov	r2, r0
 800e134:	f240 2137 	movw	r1, #567	; 0x237
 800e138:	4839      	ldr	r0, [pc, #228]	; (800e220 <__mdiff+0x110>)
 800e13a:	f000 fccf 	bl	800eadc <__assert_func>
 800e13e:	2301      	movs	r3, #1
 800e140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e148:	bfa4      	itt	ge
 800e14a:	4643      	movge	r3, r8
 800e14c:	46a0      	movge	r8, r4
 800e14e:	4630      	mov	r0, r6
 800e150:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e154:	bfa6      	itte	ge
 800e156:	461c      	movge	r4, r3
 800e158:	2500      	movge	r5, #0
 800e15a:	2501      	movlt	r5, #1
 800e15c:	f7ff fd40 	bl	800dbe0 <_Balloc>
 800e160:	b920      	cbnz	r0, 800e16c <__mdiff+0x5c>
 800e162:	4b2e      	ldr	r3, [pc, #184]	; (800e21c <__mdiff+0x10c>)
 800e164:	4602      	mov	r2, r0
 800e166:	f240 2145 	movw	r1, #581	; 0x245
 800e16a:	e7e5      	b.n	800e138 <__mdiff+0x28>
 800e16c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e170:	6926      	ldr	r6, [r4, #16]
 800e172:	60c5      	str	r5, [r0, #12]
 800e174:	f104 0914 	add.w	r9, r4, #20
 800e178:	f108 0514 	add.w	r5, r8, #20
 800e17c:	f100 0e14 	add.w	lr, r0, #20
 800e180:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e184:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e188:	f108 0210 	add.w	r2, r8, #16
 800e18c:	46f2      	mov	sl, lr
 800e18e:	2100      	movs	r1, #0
 800e190:	f859 3b04 	ldr.w	r3, [r9], #4
 800e194:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e198:	fa11 f88b 	uxtah	r8, r1, fp
 800e19c:	b299      	uxth	r1, r3
 800e19e:	0c1b      	lsrs	r3, r3, #16
 800e1a0:	eba8 0801 	sub.w	r8, r8, r1
 800e1a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e1a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e1ac:	fa1f f888 	uxth.w	r8, r8
 800e1b0:	1419      	asrs	r1, r3, #16
 800e1b2:	454e      	cmp	r6, r9
 800e1b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e1b8:	f84a 3b04 	str.w	r3, [sl], #4
 800e1bc:	d8e8      	bhi.n	800e190 <__mdiff+0x80>
 800e1be:	1b33      	subs	r3, r6, r4
 800e1c0:	3b15      	subs	r3, #21
 800e1c2:	f023 0303 	bic.w	r3, r3, #3
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	3415      	adds	r4, #21
 800e1ca:	42a6      	cmp	r6, r4
 800e1cc:	bf38      	it	cc
 800e1ce:	2304      	movcc	r3, #4
 800e1d0:	441d      	add	r5, r3
 800e1d2:	4473      	add	r3, lr
 800e1d4:	469e      	mov	lr, r3
 800e1d6:	462e      	mov	r6, r5
 800e1d8:	4566      	cmp	r6, ip
 800e1da:	d30e      	bcc.n	800e1fa <__mdiff+0xea>
 800e1dc:	f10c 0203 	add.w	r2, ip, #3
 800e1e0:	1b52      	subs	r2, r2, r5
 800e1e2:	f022 0203 	bic.w	r2, r2, #3
 800e1e6:	3d03      	subs	r5, #3
 800e1e8:	45ac      	cmp	ip, r5
 800e1ea:	bf38      	it	cc
 800e1ec:	2200      	movcc	r2, #0
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e1f4:	b17a      	cbz	r2, 800e216 <__mdiff+0x106>
 800e1f6:	6107      	str	r7, [r0, #16]
 800e1f8:	e7a4      	b.n	800e144 <__mdiff+0x34>
 800e1fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800e1fe:	fa11 f288 	uxtah	r2, r1, r8
 800e202:	1414      	asrs	r4, r2, #16
 800e204:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e208:	b292      	uxth	r2, r2
 800e20a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e20e:	f84e 2b04 	str.w	r2, [lr], #4
 800e212:	1421      	asrs	r1, r4, #16
 800e214:	e7e0      	b.n	800e1d8 <__mdiff+0xc8>
 800e216:	3f01      	subs	r7, #1
 800e218:	e7ea      	b.n	800e1f0 <__mdiff+0xe0>
 800e21a:	bf00      	nop
 800e21c:	08013d98 	.word	0x08013d98
 800e220:	08013da9 	.word	0x08013da9

0800e224 <__d2b>:
 800e224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e228:	460f      	mov	r7, r1
 800e22a:	2101      	movs	r1, #1
 800e22c:	ec59 8b10 	vmov	r8, r9, d0
 800e230:	4616      	mov	r6, r2
 800e232:	f7ff fcd5 	bl	800dbe0 <_Balloc>
 800e236:	4604      	mov	r4, r0
 800e238:	b930      	cbnz	r0, 800e248 <__d2b+0x24>
 800e23a:	4602      	mov	r2, r0
 800e23c:	4b24      	ldr	r3, [pc, #144]	; (800e2d0 <__d2b+0xac>)
 800e23e:	4825      	ldr	r0, [pc, #148]	; (800e2d4 <__d2b+0xb0>)
 800e240:	f240 310f 	movw	r1, #783	; 0x30f
 800e244:	f000 fc4a 	bl	800eadc <__assert_func>
 800e248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e24c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e250:	bb2d      	cbnz	r5, 800e29e <__d2b+0x7a>
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	f1b8 0300 	subs.w	r3, r8, #0
 800e258:	d026      	beq.n	800e2a8 <__d2b+0x84>
 800e25a:	4668      	mov	r0, sp
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	f7ff fd87 	bl	800dd70 <__lo0bits>
 800e262:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e266:	b1e8      	cbz	r0, 800e2a4 <__d2b+0x80>
 800e268:	f1c0 0320 	rsb	r3, r0, #32
 800e26c:	fa02 f303 	lsl.w	r3, r2, r3
 800e270:	430b      	orrs	r3, r1
 800e272:	40c2      	lsrs	r2, r0
 800e274:	6163      	str	r3, [r4, #20]
 800e276:	9201      	str	r2, [sp, #4]
 800e278:	9b01      	ldr	r3, [sp, #4]
 800e27a:	61a3      	str	r3, [r4, #24]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	bf14      	ite	ne
 800e280:	2202      	movne	r2, #2
 800e282:	2201      	moveq	r2, #1
 800e284:	6122      	str	r2, [r4, #16]
 800e286:	b1bd      	cbz	r5, 800e2b8 <__d2b+0x94>
 800e288:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e28c:	4405      	add	r5, r0
 800e28e:	603d      	str	r5, [r7, #0]
 800e290:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e294:	6030      	str	r0, [r6, #0]
 800e296:	4620      	mov	r0, r4
 800e298:	b003      	add	sp, #12
 800e29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e29e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2a2:	e7d6      	b.n	800e252 <__d2b+0x2e>
 800e2a4:	6161      	str	r1, [r4, #20]
 800e2a6:	e7e7      	b.n	800e278 <__d2b+0x54>
 800e2a8:	a801      	add	r0, sp, #4
 800e2aa:	f7ff fd61 	bl	800dd70 <__lo0bits>
 800e2ae:	9b01      	ldr	r3, [sp, #4]
 800e2b0:	6163      	str	r3, [r4, #20]
 800e2b2:	3020      	adds	r0, #32
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	e7e5      	b.n	800e284 <__d2b+0x60>
 800e2b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e2bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2c0:	6038      	str	r0, [r7, #0]
 800e2c2:	6918      	ldr	r0, [r3, #16]
 800e2c4:	f7ff fd34 	bl	800dd30 <__hi0bits>
 800e2c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e2cc:	e7e2      	b.n	800e294 <__d2b+0x70>
 800e2ce:	bf00      	nop
 800e2d0:	08013d98 	.word	0x08013d98
 800e2d4:	08013da9 	.word	0x08013da9

0800e2d8 <_malloc_usable_size_r>:
 800e2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2dc:	1f18      	subs	r0, r3, #4
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfbc      	itt	lt
 800e2e2:	580b      	ldrlt	r3, [r1, r0]
 800e2e4:	18c0      	addlt	r0, r0, r3
 800e2e6:	4770      	bx	lr

0800e2e8 <__ssputs_r>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	688e      	ldr	r6, [r1, #8]
 800e2ee:	461f      	mov	r7, r3
 800e2f0:	42be      	cmp	r6, r7
 800e2f2:	680b      	ldr	r3, [r1, #0]
 800e2f4:	4682      	mov	sl, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	4690      	mov	r8, r2
 800e2fa:	d82c      	bhi.n	800e356 <__ssputs_r+0x6e>
 800e2fc:	898a      	ldrh	r2, [r1, #12]
 800e2fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e302:	d026      	beq.n	800e352 <__ssputs_r+0x6a>
 800e304:	6965      	ldr	r5, [r4, #20]
 800e306:	6909      	ldr	r1, [r1, #16]
 800e308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e30c:	eba3 0901 	sub.w	r9, r3, r1
 800e310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e314:	1c7b      	adds	r3, r7, #1
 800e316:	444b      	add	r3, r9
 800e318:	106d      	asrs	r5, r5, #1
 800e31a:	429d      	cmp	r5, r3
 800e31c:	bf38      	it	cc
 800e31e:	461d      	movcc	r5, r3
 800e320:	0553      	lsls	r3, r2, #21
 800e322:	d527      	bpl.n	800e374 <__ssputs_r+0x8c>
 800e324:	4629      	mov	r1, r5
 800e326:	f7fd ff4d 	bl	800c1c4 <_malloc_r>
 800e32a:	4606      	mov	r6, r0
 800e32c:	b360      	cbz	r0, 800e388 <__ssputs_r+0xa0>
 800e32e:	6921      	ldr	r1, [r4, #16]
 800e330:	464a      	mov	r2, r9
 800e332:	f7fe fe06 	bl	800cf42 <memcpy>
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e340:	81a3      	strh	r3, [r4, #12]
 800e342:	6126      	str	r6, [r4, #16]
 800e344:	6165      	str	r5, [r4, #20]
 800e346:	444e      	add	r6, r9
 800e348:	eba5 0509 	sub.w	r5, r5, r9
 800e34c:	6026      	str	r6, [r4, #0]
 800e34e:	60a5      	str	r5, [r4, #8]
 800e350:	463e      	mov	r6, r7
 800e352:	42be      	cmp	r6, r7
 800e354:	d900      	bls.n	800e358 <__ssputs_r+0x70>
 800e356:	463e      	mov	r6, r7
 800e358:	6820      	ldr	r0, [r4, #0]
 800e35a:	4632      	mov	r2, r6
 800e35c:	4641      	mov	r1, r8
 800e35e:	f000 fba3 	bl	800eaa8 <memmove>
 800e362:	68a3      	ldr	r3, [r4, #8]
 800e364:	1b9b      	subs	r3, r3, r6
 800e366:	60a3      	str	r3, [r4, #8]
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	4433      	add	r3, r6
 800e36c:	6023      	str	r3, [r4, #0]
 800e36e:	2000      	movs	r0, #0
 800e370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e374:	462a      	mov	r2, r5
 800e376:	f7fd ffb1 	bl	800c2dc <_realloc_r>
 800e37a:	4606      	mov	r6, r0
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d1e0      	bne.n	800e342 <__ssputs_r+0x5a>
 800e380:	6921      	ldr	r1, [r4, #16]
 800e382:	4650      	mov	r0, sl
 800e384:	f7ff fbe0 	bl	800db48 <_free_r>
 800e388:	230c      	movs	r3, #12
 800e38a:	f8ca 3000 	str.w	r3, [sl]
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	f04f 30ff 	mov.w	r0, #4294967295
 800e39a:	e7e9      	b.n	800e370 <__ssputs_r+0x88>

0800e39c <_svfiprintf_r>:
 800e39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a0:	4698      	mov	r8, r3
 800e3a2:	898b      	ldrh	r3, [r1, #12]
 800e3a4:	061b      	lsls	r3, r3, #24
 800e3a6:	b09d      	sub	sp, #116	; 0x74
 800e3a8:	4607      	mov	r7, r0
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	4614      	mov	r4, r2
 800e3ae:	d50e      	bpl.n	800e3ce <_svfiprintf_r+0x32>
 800e3b0:	690b      	ldr	r3, [r1, #16]
 800e3b2:	b963      	cbnz	r3, 800e3ce <_svfiprintf_r+0x32>
 800e3b4:	2140      	movs	r1, #64	; 0x40
 800e3b6:	f7fd ff05 	bl	800c1c4 <_malloc_r>
 800e3ba:	6028      	str	r0, [r5, #0]
 800e3bc:	6128      	str	r0, [r5, #16]
 800e3be:	b920      	cbnz	r0, 800e3ca <_svfiprintf_r+0x2e>
 800e3c0:	230c      	movs	r3, #12
 800e3c2:	603b      	str	r3, [r7, #0]
 800e3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c8:	e0d0      	b.n	800e56c <_svfiprintf_r+0x1d0>
 800e3ca:	2340      	movs	r3, #64	; 0x40
 800e3cc:	616b      	str	r3, [r5, #20]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d2:	2320      	movs	r3, #32
 800e3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3dc:	2330      	movs	r3, #48	; 0x30
 800e3de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e584 <_svfiprintf_r+0x1e8>
 800e3e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3e6:	f04f 0901 	mov.w	r9, #1
 800e3ea:	4623      	mov	r3, r4
 800e3ec:	469a      	mov	sl, r3
 800e3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3f2:	b10a      	cbz	r2, 800e3f8 <_svfiprintf_r+0x5c>
 800e3f4:	2a25      	cmp	r2, #37	; 0x25
 800e3f6:	d1f9      	bne.n	800e3ec <_svfiprintf_r+0x50>
 800e3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e3fc:	d00b      	beq.n	800e416 <_svfiprintf_r+0x7a>
 800e3fe:	465b      	mov	r3, fp
 800e400:	4622      	mov	r2, r4
 800e402:	4629      	mov	r1, r5
 800e404:	4638      	mov	r0, r7
 800e406:	f7ff ff6f 	bl	800e2e8 <__ssputs_r>
 800e40a:	3001      	adds	r0, #1
 800e40c:	f000 80a9 	beq.w	800e562 <_svfiprintf_r+0x1c6>
 800e410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e412:	445a      	add	r2, fp
 800e414:	9209      	str	r2, [sp, #36]	; 0x24
 800e416:	f89a 3000 	ldrb.w	r3, [sl]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	f000 80a1 	beq.w	800e562 <_svfiprintf_r+0x1c6>
 800e420:	2300      	movs	r3, #0
 800e422:	f04f 32ff 	mov.w	r2, #4294967295
 800e426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e42a:	f10a 0a01 	add.w	sl, sl, #1
 800e42e:	9304      	str	r3, [sp, #16]
 800e430:	9307      	str	r3, [sp, #28]
 800e432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e436:	931a      	str	r3, [sp, #104]	; 0x68
 800e438:	4654      	mov	r4, sl
 800e43a:	2205      	movs	r2, #5
 800e43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e440:	4850      	ldr	r0, [pc, #320]	; (800e584 <_svfiprintf_r+0x1e8>)
 800e442:	f7f1 ff4d 	bl	80002e0 <memchr>
 800e446:	9a04      	ldr	r2, [sp, #16]
 800e448:	b9d8      	cbnz	r0, 800e482 <_svfiprintf_r+0xe6>
 800e44a:	06d0      	lsls	r0, r2, #27
 800e44c:	bf44      	itt	mi
 800e44e:	2320      	movmi	r3, #32
 800e450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e454:	0711      	lsls	r1, r2, #28
 800e456:	bf44      	itt	mi
 800e458:	232b      	movmi	r3, #43	; 0x2b
 800e45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e45e:	f89a 3000 	ldrb.w	r3, [sl]
 800e462:	2b2a      	cmp	r3, #42	; 0x2a
 800e464:	d015      	beq.n	800e492 <_svfiprintf_r+0xf6>
 800e466:	9a07      	ldr	r2, [sp, #28]
 800e468:	4654      	mov	r4, sl
 800e46a:	2000      	movs	r0, #0
 800e46c:	f04f 0c0a 	mov.w	ip, #10
 800e470:	4621      	mov	r1, r4
 800e472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e476:	3b30      	subs	r3, #48	; 0x30
 800e478:	2b09      	cmp	r3, #9
 800e47a:	d94d      	bls.n	800e518 <_svfiprintf_r+0x17c>
 800e47c:	b1b0      	cbz	r0, 800e4ac <_svfiprintf_r+0x110>
 800e47e:	9207      	str	r2, [sp, #28]
 800e480:	e014      	b.n	800e4ac <_svfiprintf_r+0x110>
 800e482:	eba0 0308 	sub.w	r3, r0, r8
 800e486:	fa09 f303 	lsl.w	r3, r9, r3
 800e48a:	4313      	orrs	r3, r2
 800e48c:	9304      	str	r3, [sp, #16]
 800e48e:	46a2      	mov	sl, r4
 800e490:	e7d2      	b.n	800e438 <_svfiprintf_r+0x9c>
 800e492:	9b03      	ldr	r3, [sp, #12]
 800e494:	1d19      	adds	r1, r3, #4
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	9103      	str	r1, [sp, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	bfbb      	ittet	lt
 800e49e:	425b      	neglt	r3, r3
 800e4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e4a4:	9307      	strge	r3, [sp, #28]
 800e4a6:	9307      	strlt	r3, [sp, #28]
 800e4a8:	bfb8      	it	lt
 800e4aa:	9204      	strlt	r2, [sp, #16]
 800e4ac:	7823      	ldrb	r3, [r4, #0]
 800e4ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e4b0:	d10c      	bne.n	800e4cc <_svfiprintf_r+0x130>
 800e4b2:	7863      	ldrb	r3, [r4, #1]
 800e4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b6:	d134      	bne.n	800e522 <_svfiprintf_r+0x186>
 800e4b8:	9b03      	ldr	r3, [sp, #12]
 800e4ba:	1d1a      	adds	r2, r3, #4
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	9203      	str	r2, [sp, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bfb8      	it	lt
 800e4c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4c8:	3402      	adds	r4, #2
 800e4ca:	9305      	str	r3, [sp, #20]
 800e4cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e594 <_svfiprintf_r+0x1f8>
 800e4d0:	7821      	ldrb	r1, [r4, #0]
 800e4d2:	2203      	movs	r2, #3
 800e4d4:	4650      	mov	r0, sl
 800e4d6:	f7f1 ff03 	bl	80002e0 <memchr>
 800e4da:	b138      	cbz	r0, 800e4ec <_svfiprintf_r+0x150>
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	eba0 000a 	sub.w	r0, r0, sl
 800e4e2:	2240      	movs	r2, #64	; 0x40
 800e4e4:	4082      	lsls	r2, r0
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	3401      	adds	r4, #1
 800e4ea:	9304      	str	r3, [sp, #16]
 800e4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4f0:	4825      	ldr	r0, [pc, #148]	; (800e588 <_svfiprintf_r+0x1ec>)
 800e4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4f6:	2206      	movs	r2, #6
 800e4f8:	f7f1 fef2 	bl	80002e0 <memchr>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d038      	beq.n	800e572 <_svfiprintf_r+0x1d6>
 800e500:	4b22      	ldr	r3, [pc, #136]	; (800e58c <_svfiprintf_r+0x1f0>)
 800e502:	bb1b      	cbnz	r3, 800e54c <_svfiprintf_r+0x1b0>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	3307      	adds	r3, #7
 800e508:	f023 0307 	bic.w	r3, r3, #7
 800e50c:	3308      	adds	r3, #8
 800e50e:	9303      	str	r3, [sp, #12]
 800e510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e512:	4433      	add	r3, r6
 800e514:	9309      	str	r3, [sp, #36]	; 0x24
 800e516:	e768      	b.n	800e3ea <_svfiprintf_r+0x4e>
 800e518:	fb0c 3202 	mla	r2, ip, r2, r3
 800e51c:	460c      	mov	r4, r1
 800e51e:	2001      	movs	r0, #1
 800e520:	e7a6      	b.n	800e470 <_svfiprintf_r+0xd4>
 800e522:	2300      	movs	r3, #0
 800e524:	3401      	adds	r4, #1
 800e526:	9305      	str	r3, [sp, #20]
 800e528:	4619      	mov	r1, r3
 800e52a:	f04f 0c0a 	mov.w	ip, #10
 800e52e:	4620      	mov	r0, r4
 800e530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e534:	3a30      	subs	r2, #48	; 0x30
 800e536:	2a09      	cmp	r2, #9
 800e538:	d903      	bls.n	800e542 <_svfiprintf_r+0x1a6>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d0c6      	beq.n	800e4cc <_svfiprintf_r+0x130>
 800e53e:	9105      	str	r1, [sp, #20]
 800e540:	e7c4      	b.n	800e4cc <_svfiprintf_r+0x130>
 800e542:	fb0c 2101 	mla	r1, ip, r1, r2
 800e546:	4604      	mov	r4, r0
 800e548:	2301      	movs	r3, #1
 800e54a:	e7f0      	b.n	800e52e <_svfiprintf_r+0x192>
 800e54c:	ab03      	add	r3, sp, #12
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	462a      	mov	r2, r5
 800e552:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <_svfiprintf_r+0x1f4>)
 800e554:	a904      	add	r1, sp, #16
 800e556:	4638      	mov	r0, r7
 800e558:	f7fd ff82 	bl	800c460 <_printf_float>
 800e55c:	1c42      	adds	r2, r0, #1
 800e55e:	4606      	mov	r6, r0
 800e560:	d1d6      	bne.n	800e510 <_svfiprintf_r+0x174>
 800e562:	89ab      	ldrh	r3, [r5, #12]
 800e564:	065b      	lsls	r3, r3, #25
 800e566:	f53f af2d 	bmi.w	800e3c4 <_svfiprintf_r+0x28>
 800e56a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e56c:	b01d      	add	sp, #116	; 0x74
 800e56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e572:	ab03      	add	r3, sp, #12
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	462a      	mov	r2, r5
 800e578:	4b05      	ldr	r3, [pc, #20]	; (800e590 <_svfiprintf_r+0x1f4>)
 800e57a:	a904      	add	r1, sp, #16
 800e57c:	4638      	mov	r0, r7
 800e57e:	f7fe f9f7 	bl	800c970 <_printf_i>
 800e582:	e7eb      	b.n	800e55c <_svfiprintf_r+0x1c0>
 800e584:	08013f04 	.word	0x08013f04
 800e588:	08013f0e 	.word	0x08013f0e
 800e58c:	0800c461 	.word	0x0800c461
 800e590:	0800e2e9 	.word	0x0800e2e9
 800e594:	08013f0a 	.word	0x08013f0a

0800e598 <__sfputc_r>:
 800e598:	6893      	ldr	r3, [r2, #8]
 800e59a:	3b01      	subs	r3, #1
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	b410      	push	{r4}
 800e5a0:	6093      	str	r3, [r2, #8]
 800e5a2:	da08      	bge.n	800e5b6 <__sfputc_r+0x1e>
 800e5a4:	6994      	ldr	r4, [r2, #24]
 800e5a6:	42a3      	cmp	r3, r4
 800e5a8:	db01      	blt.n	800e5ae <__sfputc_r+0x16>
 800e5aa:	290a      	cmp	r1, #10
 800e5ac:	d103      	bne.n	800e5b6 <__sfputc_r+0x1e>
 800e5ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b2:	f000 b9e3 	b.w	800e97c <__swbuf_r>
 800e5b6:	6813      	ldr	r3, [r2, #0]
 800e5b8:	1c58      	adds	r0, r3, #1
 800e5ba:	6010      	str	r0, [r2, #0]
 800e5bc:	7019      	strb	r1, [r3, #0]
 800e5be:	4608      	mov	r0, r1
 800e5c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <__sfputs_r>:
 800e5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	460f      	mov	r7, r1
 800e5cc:	4614      	mov	r4, r2
 800e5ce:	18d5      	adds	r5, r2, r3
 800e5d0:	42ac      	cmp	r4, r5
 800e5d2:	d101      	bne.n	800e5d8 <__sfputs_r+0x12>
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	e007      	b.n	800e5e8 <__sfputs_r+0x22>
 800e5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5dc:	463a      	mov	r2, r7
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7ff ffda 	bl	800e598 <__sfputc_r>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d1f3      	bne.n	800e5d0 <__sfputs_r+0xa>
 800e5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5ec <_vfiprintf_r>:
 800e5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	b09d      	sub	sp, #116	; 0x74
 800e5f4:	4614      	mov	r4, r2
 800e5f6:	4698      	mov	r8, r3
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	b118      	cbz	r0, 800e604 <_vfiprintf_r+0x18>
 800e5fc:	6a03      	ldr	r3, [r0, #32]
 800e5fe:	b90b      	cbnz	r3, 800e604 <_vfiprintf_r+0x18>
 800e600:	f7fe fb64 	bl	800cccc <__sinit>
 800e604:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e606:	07d9      	lsls	r1, r3, #31
 800e608:	d405      	bmi.n	800e616 <_vfiprintf_r+0x2a>
 800e60a:	89ab      	ldrh	r3, [r5, #12]
 800e60c:	059a      	lsls	r2, r3, #22
 800e60e:	d402      	bmi.n	800e616 <_vfiprintf_r+0x2a>
 800e610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e612:	f7fe fc94 	bl	800cf3e <__retarget_lock_acquire_recursive>
 800e616:	89ab      	ldrh	r3, [r5, #12]
 800e618:	071b      	lsls	r3, r3, #28
 800e61a:	d501      	bpl.n	800e620 <_vfiprintf_r+0x34>
 800e61c:	692b      	ldr	r3, [r5, #16]
 800e61e:	b99b      	cbnz	r3, 800e648 <_vfiprintf_r+0x5c>
 800e620:	4629      	mov	r1, r5
 800e622:	4630      	mov	r0, r6
 800e624:	f000 f9e8 	bl	800e9f8 <__swsetup_r>
 800e628:	b170      	cbz	r0, 800e648 <_vfiprintf_r+0x5c>
 800e62a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e62c:	07dc      	lsls	r4, r3, #31
 800e62e:	d504      	bpl.n	800e63a <_vfiprintf_r+0x4e>
 800e630:	f04f 30ff 	mov.w	r0, #4294967295
 800e634:	b01d      	add	sp, #116	; 0x74
 800e636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63a:	89ab      	ldrh	r3, [r5, #12]
 800e63c:	0598      	lsls	r0, r3, #22
 800e63e:	d4f7      	bmi.n	800e630 <_vfiprintf_r+0x44>
 800e640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e642:	f7fe fc7d 	bl	800cf40 <__retarget_lock_release_recursive>
 800e646:	e7f3      	b.n	800e630 <_vfiprintf_r+0x44>
 800e648:	2300      	movs	r3, #0
 800e64a:	9309      	str	r3, [sp, #36]	; 0x24
 800e64c:	2320      	movs	r3, #32
 800e64e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e652:	f8cd 800c 	str.w	r8, [sp, #12]
 800e656:	2330      	movs	r3, #48	; 0x30
 800e658:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e80c <_vfiprintf_r+0x220>
 800e65c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e660:	f04f 0901 	mov.w	r9, #1
 800e664:	4623      	mov	r3, r4
 800e666:	469a      	mov	sl, r3
 800e668:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e66c:	b10a      	cbz	r2, 800e672 <_vfiprintf_r+0x86>
 800e66e:	2a25      	cmp	r2, #37	; 0x25
 800e670:	d1f9      	bne.n	800e666 <_vfiprintf_r+0x7a>
 800e672:	ebba 0b04 	subs.w	fp, sl, r4
 800e676:	d00b      	beq.n	800e690 <_vfiprintf_r+0xa4>
 800e678:	465b      	mov	r3, fp
 800e67a:	4622      	mov	r2, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	4630      	mov	r0, r6
 800e680:	f7ff ffa1 	bl	800e5c6 <__sfputs_r>
 800e684:	3001      	adds	r0, #1
 800e686:	f000 80a9 	beq.w	800e7dc <_vfiprintf_r+0x1f0>
 800e68a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e68c:	445a      	add	r2, fp
 800e68e:	9209      	str	r2, [sp, #36]	; 0x24
 800e690:	f89a 3000 	ldrb.w	r3, [sl]
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 80a1 	beq.w	800e7dc <_vfiprintf_r+0x1f0>
 800e69a:	2300      	movs	r3, #0
 800e69c:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6a4:	f10a 0a01 	add.w	sl, sl, #1
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	9307      	str	r3, [sp, #28]
 800e6ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6b0:	931a      	str	r3, [sp, #104]	; 0x68
 800e6b2:	4654      	mov	r4, sl
 800e6b4:	2205      	movs	r2, #5
 800e6b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ba:	4854      	ldr	r0, [pc, #336]	; (800e80c <_vfiprintf_r+0x220>)
 800e6bc:	f7f1 fe10 	bl	80002e0 <memchr>
 800e6c0:	9a04      	ldr	r2, [sp, #16]
 800e6c2:	b9d8      	cbnz	r0, 800e6fc <_vfiprintf_r+0x110>
 800e6c4:	06d1      	lsls	r1, r2, #27
 800e6c6:	bf44      	itt	mi
 800e6c8:	2320      	movmi	r3, #32
 800e6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6ce:	0713      	lsls	r3, r2, #28
 800e6d0:	bf44      	itt	mi
 800e6d2:	232b      	movmi	r3, #43	; 0x2b
 800e6d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e6de:	d015      	beq.n	800e70c <_vfiprintf_r+0x120>
 800e6e0:	9a07      	ldr	r2, [sp, #28]
 800e6e2:	4654      	mov	r4, sl
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	f04f 0c0a 	mov.w	ip, #10
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6f0:	3b30      	subs	r3, #48	; 0x30
 800e6f2:	2b09      	cmp	r3, #9
 800e6f4:	d94d      	bls.n	800e792 <_vfiprintf_r+0x1a6>
 800e6f6:	b1b0      	cbz	r0, 800e726 <_vfiprintf_r+0x13a>
 800e6f8:	9207      	str	r2, [sp, #28]
 800e6fa:	e014      	b.n	800e726 <_vfiprintf_r+0x13a>
 800e6fc:	eba0 0308 	sub.w	r3, r0, r8
 800e700:	fa09 f303 	lsl.w	r3, r9, r3
 800e704:	4313      	orrs	r3, r2
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	46a2      	mov	sl, r4
 800e70a:	e7d2      	b.n	800e6b2 <_vfiprintf_r+0xc6>
 800e70c:	9b03      	ldr	r3, [sp, #12]
 800e70e:	1d19      	adds	r1, r3, #4
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	9103      	str	r1, [sp, #12]
 800e714:	2b00      	cmp	r3, #0
 800e716:	bfbb      	ittet	lt
 800e718:	425b      	neglt	r3, r3
 800e71a:	f042 0202 	orrlt.w	r2, r2, #2
 800e71e:	9307      	strge	r3, [sp, #28]
 800e720:	9307      	strlt	r3, [sp, #28]
 800e722:	bfb8      	it	lt
 800e724:	9204      	strlt	r2, [sp, #16]
 800e726:	7823      	ldrb	r3, [r4, #0]
 800e728:	2b2e      	cmp	r3, #46	; 0x2e
 800e72a:	d10c      	bne.n	800e746 <_vfiprintf_r+0x15a>
 800e72c:	7863      	ldrb	r3, [r4, #1]
 800e72e:	2b2a      	cmp	r3, #42	; 0x2a
 800e730:	d134      	bne.n	800e79c <_vfiprintf_r+0x1b0>
 800e732:	9b03      	ldr	r3, [sp, #12]
 800e734:	1d1a      	adds	r2, r3, #4
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	9203      	str	r2, [sp, #12]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	bfb8      	it	lt
 800e73e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e742:	3402      	adds	r4, #2
 800e744:	9305      	str	r3, [sp, #20]
 800e746:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e81c <_vfiprintf_r+0x230>
 800e74a:	7821      	ldrb	r1, [r4, #0]
 800e74c:	2203      	movs	r2, #3
 800e74e:	4650      	mov	r0, sl
 800e750:	f7f1 fdc6 	bl	80002e0 <memchr>
 800e754:	b138      	cbz	r0, 800e766 <_vfiprintf_r+0x17a>
 800e756:	9b04      	ldr	r3, [sp, #16]
 800e758:	eba0 000a 	sub.w	r0, r0, sl
 800e75c:	2240      	movs	r2, #64	; 0x40
 800e75e:	4082      	lsls	r2, r0
 800e760:	4313      	orrs	r3, r2
 800e762:	3401      	adds	r4, #1
 800e764:	9304      	str	r3, [sp, #16]
 800e766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76a:	4829      	ldr	r0, [pc, #164]	; (800e810 <_vfiprintf_r+0x224>)
 800e76c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e770:	2206      	movs	r2, #6
 800e772:	f7f1 fdb5 	bl	80002e0 <memchr>
 800e776:	2800      	cmp	r0, #0
 800e778:	d03f      	beq.n	800e7fa <_vfiprintf_r+0x20e>
 800e77a:	4b26      	ldr	r3, [pc, #152]	; (800e814 <_vfiprintf_r+0x228>)
 800e77c:	bb1b      	cbnz	r3, 800e7c6 <_vfiprintf_r+0x1da>
 800e77e:	9b03      	ldr	r3, [sp, #12]
 800e780:	3307      	adds	r3, #7
 800e782:	f023 0307 	bic.w	r3, r3, #7
 800e786:	3308      	adds	r3, #8
 800e788:	9303      	str	r3, [sp, #12]
 800e78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e78c:	443b      	add	r3, r7
 800e78e:	9309      	str	r3, [sp, #36]	; 0x24
 800e790:	e768      	b.n	800e664 <_vfiprintf_r+0x78>
 800e792:	fb0c 3202 	mla	r2, ip, r2, r3
 800e796:	460c      	mov	r4, r1
 800e798:	2001      	movs	r0, #1
 800e79a:	e7a6      	b.n	800e6ea <_vfiprintf_r+0xfe>
 800e79c:	2300      	movs	r3, #0
 800e79e:	3401      	adds	r4, #1
 800e7a0:	9305      	str	r3, [sp, #20]
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	f04f 0c0a 	mov.w	ip, #10
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7ae:	3a30      	subs	r2, #48	; 0x30
 800e7b0:	2a09      	cmp	r2, #9
 800e7b2:	d903      	bls.n	800e7bc <_vfiprintf_r+0x1d0>
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d0c6      	beq.n	800e746 <_vfiprintf_r+0x15a>
 800e7b8:	9105      	str	r1, [sp, #20]
 800e7ba:	e7c4      	b.n	800e746 <_vfiprintf_r+0x15a>
 800e7bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e7f0      	b.n	800e7a8 <_vfiprintf_r+0x1bc>
 800e7c6:	ab03      	add	r3, sp, #12
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	462a      	mov	r2, r5
 800e7cc:	4b12      	ldr	r3, [pc, #72]	; (800e818 <_vfiprintf_r+0x22c>)
 800e7ce:	a904      	add	r1, sp, #16
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f7fd fe45 	bl	800c460 <_printf_float>
 800e7d6:	4607      	mov	r7, r0
 800e7d8:	1c78      	adds	r0, r7, #1
 800e7da:	d1d6      	bne.n	800e78a <_vfiprintf_r+0x19e>
 800e7dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7de:	07d9      	lsls	r1, r3, #31
 800e7e0:	d405      	bmi.n	800e7ee <_vfiprintf_r+0x202>
 800e7e2:	89ab      	ldrh	r3, [r5, #12]
 800e7e4:	059a      	lsls	r2, r3, #22
 800e7e6:	d402      	bmi.n	800e7ee <_vfiprintf_r+0x202>
 800e7e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7ea:	f7fe fba9 	bl	800cf40 <__retarget_lock_release_recursive>
 800e7ee:	89ab      	ldrh	r3, [r5, #12]
 800e7f0:	065b      	lsls	r3, r3, #25
 800e7f2:	f53f af1d 	bmi.w	800e630 <_vfiprintf_r+0x44>
 800e7f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7f8:	e71c      	b.n	800e634 <_vfiprintf_r+0x48>
 800e7fa:	ab03      	add	r3, sp, #12
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	462a      	mov	r2, r5
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <_vfiprintf_r+0x22c>)
 800e802:	a904      	add	r1, sp, #16
 800e804:	4630      	mov	r0, r6
 800e806:	f7fe f8b3 	bl	800c970 <_printf_i>
 800e80a:	e7e4      	b.n	800e7d6 <_vfiprintf_r+0x1ea>
 800e80c:	08013f04 	.word	0x08013f04
 800e810:	08013f0e 	.word	0x08013f0e
 800e814:	0800c461 	.word	0x0800c461
 800e818:	0800e5c7 	.word	0x0800e5c7
 800e81c:	08013f0a 	.word	0x08013f0a

0800e820 <__sflush_r>:
 800e820:	898a      	ldrh	r2, [r1, #12]
 800e822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e826:	4605      	mov	r5, r0
 800e828:	0710      	lsls	r0, r2, #28
 800e82a:	460c      	mov	r4, r1
 800e82c:	d458      	bmi.n	800e8e0 <__sflush_r+0xc0>
 800e82e:	684b      	ldr	r3, [r1, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	dc05      	bgt.n	800e840 <__sflush_r+0x20>
 800e834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e836:	2b00      	cmp	r3, #0
 800e838:	dc02      	bgt.n	800e840 <__sflush_r+0x20>
 800e83a:	2000      	movs	r0, #0
 800e83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e842:	2e00      	cmp	r6, #0
 800e844:	d0f9      	beq.n	800e83a <__sflush_r+0x1a>
 800e846:	2300      	movs	r3, #0
 800e848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e84c:	682f      	ldr	r7, [r5, #0]
 800e84e:	6a21      	ldr	r1, [r4, #32]
 800e850:	602b      	str	r3, [r5, #0]
 800e852:	d032      	beq.n	800e8ba <__sflush_r+0x9a>
 800e854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e856:	89a3      	ldrh	r3, [r4, #12]
 800e858:	075a      	lsls	r2, r3, #29
 800e85a:	d505      	bpl.n	800e868 <__sflush_r+0x48>
 800e85c:	6863      	ldr	r3, [r4, #4]
 800e85e:	1ac0      	subs	r0, r0, r3
 800e860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e862:	b10b      	cbz	r3, 800e868 <__sflush_r+0x48>
 800e864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e866:	1ac0      	subs	r0, r0, r3
 800e868:	2300      	movs	r3, #0
 800e86a:	4602      	mov	r2, r0
 800e86c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e86e:	6a21      	ldr	r1, [r4, #32]
 800e870:	4628      	mov	r0, r5
 800e872:	47b0      	blx	r6
 800e874:	1c43      	adds	r3, r0, #1
 800e876:	89a3      	ldrh	r3, [r4, #12]
 800e878:	d106      	bne.n	800e888 <__sflush_r+0x68>
 800e87a:	6829      	ldr	r1, [r5, #0]
 800e87c:	291d      	cmp	r1, #29
 800e87e:	d82b      	bhi.n	800e8d8 <__sflush_r+0xb8>
 800e880:	4a29      	ldr	r2, [pc, #164]	; (800e928 <__sflush_r+0x108>)
 800e882:	410a      	asrs	r2, r1
 800e884:	07d6      	lsls	r6, r2, #31
 800e886:	d427      	bmi.n	800e8d8 <__sflush_r+0xb8>
 800e888:	2200      	movs	r2, #0
 800e88a:	6062      	str	r2, [r4, #4]
 800e88c:	04d9      	lsls	r1, r3, #19
 800e88e:	6922      	ldr	r2, [r4, #16]
 800e890:	6022      	str	r2, [r4, #0]
 800e892:	d504      	bpl.n	800e89e <__sflush_r+0x7e>
 800e894:	1c42      	adds	r2, r0, #1
 800e896:	d101      	bne.n	800e89c <__sflush_r+0x7c>
 800e898:	682b      	ldr	r3, [r5, #0]
 800e89a:	b903      	cbnz	r3, 800e89e <__sflush_r+0x7e>
 800e89c:	6560      	str	r0, [r4, #84]	; 0x54
 800e89e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8a0:	602f      	str	r7, [r5, #0]
 800e8a2:	2900      	cmp	r1, #0
 800e8a4:	d0c9      	beq.n	800e83a <__sflush_r+0x1a>
 800e8a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8aa:	4299      	cmp	r1, r3
 800e8ac:	d002      	beq.n	800e8b4 <__sflush_r+0x94>
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	f7ff f94a 	bl	800db48 <_free_r>
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	6360      	str	r0, [r4, #52]	; 0x34
 800e8b8:	e7c0      	b.n	800e83c <__sflush_r+0x1c>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	4628      	mov	r0, r5
 800e8be:	47b0      	blx	r6
 800e8c0:	1c41      	adds	r1, r0, #1
 800e8c2:	d1c8      	bne.n	800e856 <__sflush_r+0x36>
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d0c5      	beq.n	800e856 <__sflush_r+0x36>
 800e8ca:	2b1d      	cmp	r3, #29
 800e8cc:	d001      	beq.n	800e8d2 <__sflush_r+0xb2>
 800e8ce:	2b16      	cmp	r3, #22
 800e8d0:	d101      	bne.n	800e8d6 <__sflush_r+0xb6>
 800e8d2:	602f      	str	r7, [r5, #0]
 800e8d4:	e7b1      	b.n	800e83a <__sflush_r+0x1a>
 800e8d6:	89a3      	ldrh	r3, [r4, #12]
 800e8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8dc:	81a3      	strh	r3, [r4, #12]
 800e8de:	e7ad      	b.n	800e83c <__sflush_r+0x1c>
 800e8e0:	690f      	ldr	r7, [r1, #16]
 800e8e2:	2f00      	cmp	r7, #0
 800e8e4:	d0a9      	beq.n	800e83a <__sflush_r+0x1a>
 800e8e6:	0793      	lsls	r3, r2, #30
 800e8e8:	680e      	ldr	r6, [r1, #0]
 800e8ea:	bf08      	it	eq
 800e8ec:	694b      	ldreq	r3, [r1, #20]
 800e8ee:	600f      	str	r7, [r1, #0]
 800e8f0:	bf18      	it	ne
 800e8f2:	2300      	movne	r3, #0
 800e8f4:	eba6 0807 	sub.w	r8, r6, r7
 800e8f8:	608b      	str	r3, [r1, #8]
 800e8fa:	f1b8 0f00 	cmp.w	r8, #0
 800e8fe:	dd9c      	ble.n	800e83a <__sflush_r+0x1a>
 800e900:	6a21      	ldr	r1, [r4, #32]
 800e902:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e904:	4643      	mov	r3, r8
 800e906:	463a      	mov	r2, r7
 800e908:	4628      	mov	r0, r5
 800e90a:	47b0      	blx	r6
 800e90c:	2800      	cmp	r0, #0
 800e90e:	dc06      	bgt.n	800e91e <__sflush_r+0xfe>
 800e910:	89a3      	ldrh	r3, [r4, #12]
 800e912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	e78e      	b.n	800e83c <__sflush_r+0x1c>
 800e91e:	4407      	add	r7, r0
 800e920:	eba8 0800 	sub.w	r8, r8, r0
 800e924:	e7e9      	b.n	800e8fa <__sflush_r+0xda>
 800e926:	bf00      	nop
 800e928:	dfbffffe 	.word	0xdfbffffe

0800e92c <_fflush_r>:
 800e92c:	b538      	push	{r3, r4, r5, lr}
 800e92e:	690b      	ldr	r3, [r1, #16]
 800e930:	4605      	mov	r5, r0
 800e932:	460c      	mov	r4, r1
 800e934:	b913      	cbnz	r3, 800e93c <_fflush_r+0x10>
 800e936:	2500      	movs	r5, #0
 800e938:	4628      	mov	r0, r5
 800e93a:	bd38      	pop	{r3, r4, r5, pc}
 800e93c:	b118      	cbz	r0, 800e946 <_fflush_r+0x1a>
 800e93e:	6a03      	ldr	r3, [r0, #32]
 800e940:	b90b      	cbnz	r3, 800e946 <_fflush_r+0x1a>
 800e942:	f7fe f9c3 	bl	800cccc <__sinit>
 800e946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d0f3      	beq.n	800e936 <_fflush_r+0xa>
 800e94e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e950:	07d0      	lsls	r0, r2, #31
 800e952:	d404      	bmi.n	800e95e <_fflush_r+0x32>
 800e954:	0599      	lsls	r1, r3, #22
 800e956:	d402      	bmi.n	800e95e <_fflush_r+0x32>
 800e958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e95a:	f7fe faf0 	bl	800cf3e <__retarget_lock_acquire_recursive>
 800e95e:	4628      	mov	r0, r5
 800e960:	4621      	mov	r1, r4
 800e962:	f7ff ff5d 	bl	800e820 <__sflush_r>
 800e966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e968:	07da      	lsls	r2, r3, #31
 800e96a:	4605      	mov	r5, r0
 800e96c:	d4e4      	bmi.n	800e938 <_fflush_r+0xc>
 800e96e:	89a3      	ldrh	r3, [r4, #12]
 800e970:	059b      	lsls	r3, r3, #22
 800e972:	d4e1      	bmi.n	800e938 <_fflush_r+0xc>
 800e974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e976:	f7fe fae3 	bl	800cf40 <__retarget_lock_release_recursive>
 800e97a:	e7dd      	b.n	800e938 <_fflush_r+0xc>

0800e97c <__swbuf_r>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	460e      	mov	r6, r1
 800e980:	4614      	mov	r4, r2
 800e982:	4605      	mov	r5, r0
 800e984:	b118      	cbz	r0, 800e98e <__swbuf_r+0x12>
 800e986:	6a03      	ldr	r3, [r0, #32]
 800e988:	b90b      	cbnz	r3, 800e98e <__swbuf_r+0x12>
 800e98a:	f7fe f99f 	bl	800cccc <__sinit>
 800e98e:	69a3      	ldr	r3, [r4, #24]
 800e990:	60a3      	str	r3, [r4, #8]
 800e992:	89a3      	ldrh	r3, [r4, #12]
 800e994:	071a      	lsls	r2, r3, #28
 800e996:	d525      	bpl.n	800e9e4 <__swbuf_r+0x68>
 800e998:	6923      	ldr	r3, [r4, #16]
 800e99a:	b31b      	cbz	r3, 800e9e4 <__swbuf_r+0x68>
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	6922      	ldr	r2, [r4, #16]
 800e9a0:	1a98      	subs	r0, r3, r2
 800e9a2:	6963      	ldr	r3, [r4, #20]
 800e9a4:	b2f6      	uxtb	r6, r6
 800e9a6:	4283      	cmp	r3, r0
 800e9a8:	4637      	mov	r7, r6
 800e9aa:	dc04      	bgt.n	800e9b6 <__swbuf_r+0x3a>
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f7ff ffbc 	bl	800e92c <_fflush_r>
 800e9b4:	b9e0      	cbnz	r0, 800e9f0 <__swbuf_r+0x74>
 800e9b6:	68a3      	ldr	r3, [r4, #8]
 800e9b8:	3b01      	subs	r3, #1
 800e9ba:	60a3      	str	r3, [r4, #8]
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	1c5a      	adds	r2, r3, #1
 800e9c0:	6022      	str	r2, [r4, #0]
 800e9c2:	701e      	strb	r6, [r3, #0]
 800e9c4:	6962      	ldr	r2, [r4, #20]
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d004      	beq.n	800e9d6 <__swbuf_r+0x5a>
 800e9cc:	89a3      	ldrh	r3, [r4, #12]
 800e9ce:	07db      	lsls	r3, r3, #31
 800e9d0:	d506      	bpl.n	800e9e0 <__swbuf_r+0x64>
 800e9d2:	2e0a      	cmp	r6, #10
 800e9d4:	d104      	bne.n	800e9e0 <__swbuf_r+0x64>
 800e9d6:	4621      	mov	r1, r4
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f7ff ffa7 	bl	800e92c <_fflush_r>
 800e9de:	b938      	cbnz	r0, 800e9f0 <__swbuf_r+0x74>
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f000 f806 	bl	800e9f8 <__swsetup_r>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d0d5      	beq.n	800e99c <__swbuf_r+0x20>
 800e9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e9f4:	e7f4      	b.n	800e9e0 <__swbuf_r+0x64>
	...

0800e9f8 <__swsetup_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4b2a      	ldr	r3, [pc, #168]	; (800eaa4 <__swsetup_r+0xac>)
 800e9fc:	4605      	mov	r5, r0
 800e9fe:	6818      	ldr	r0, [r3, #0]
 800ea00:	460c      	mov	r4, r1
 800ea02:	b118      	cbz	r0, 800ea0c <__swsetup_r+0x14>
 800ea04:	6a03      	ldr	r3, [r0, #32]
 800ea06:	b90b      	cbnz	r3, 800ea0c <__swsetup_r+0x14>
 800ea08:	f7fe f960 	bl	800cccc <__sinit>
 800ea0c:	89a3      	ldrh	r3, [r4, #12]
 800ea0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea12:	0718      	lsls	r0, r3, #28
 800ea14:	d422      	bmi.n	800ea5c <__swsetup_r+0x64>
 800ea16:	06d9      	lsls	r1, r3, #27
 800ea18:	d407      	bmi.n	800ea2a <__swsetup_r+0x32>
 800ea1a:	2309      	movs	r3, #9
 800ea1c:	602b      	str	r3, [r5, #0]
 800ea1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea22:	81a3      	strh	r3, [r4, #12]
 800ea24:	f04f 30ff 	mov.w	r0, #4294967295
 800ea28:	e034      	b.n	800ea94 <__swsetup_r+0x9c>
 800ea2a:	0758      	lsls	r0, r3, #29
 800ea2c:	d512      	bpl.n	800ea54 <__swsetup_r+0x5c>
 800ea2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea30:	b141      	cbz	r1, 800ea44 <__swsetup_r+0x4c>
 800ea32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea36:	4299      	cmp	r1, r3
 800ea38:	d002      	beq.n	800ea40 <__swsetup_r+0x48>
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f7ff f884 	bl	800db48 <_free_r>
 800ea40:	2300      	movs	r3, #0
 800ea42:	6363      	str	r3, [r4, #52]	; 0x34
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea4a:	81a3      	strh	r3, [r4, #12]
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	6063      	str	r3, [r4, #4]
 800ea50:	6923      	ldr	r3, [r4, #16]
 800ea52:	6023      	str	r3, [r4, #0]
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	f043 0308 	orr.w	r3, r3, #8
 800ea5a:	81a3      	strh	r3, [r4, #12]
 800ea5c:	6923      	ldr	r3, [r4, #16]
 800ea5e:	b94b      	cbnz	r3, 800ea74 <__swsetup_r+0x7c>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea6a:	d003      	beq.n	800ea74 <__swsetup_r+0x7c>
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	4628      	mov	r0, r5
 800ea70:	f000 f8c0 	bl	800ebf4 <__smakebuf_r>
 800ea74:	89a0      	ldrh	r0, [r4, #12]
 800ea76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea7a:	f010 0301 	ands.w	r3, r0, #1
 800ea7e:	d00a      	beq.n	800ea96 <__swsetup_r+0x9e>
 800ea80:	2300      	movs	r3, #0
 800ea82:	60a3      	str	r3, [r4, #8]
 800ea84:	6963      	ldr	r3, [r4, #20]
 800ea86:	425b      	negs	r3, r3
 800ea88:	61a3      	str	r3, [r4, #24]
 800ea8a:	6923      	ldr	r3, [r4, #16]
 800ea8c:	b943      	cbnz	r3, 800eaa0 <__swsetup_r+0xa8>
 800ea8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea92:	d1c4      	bne.n	800ea1e <__swsetup_r+0x26>
 800ea94:	bd38      	pop	{r3, r4, r5, pc}
 800ea96:	0781      	lsls	r1, r0, #30
 800ea98:	bf58      	it	pl
 800ea9a:	6963      	ldrpl	r3, [r4, #20]
 800ea9c:	60a3      	str	r3, [r4, #8]
 800ea9e:	e7f4      	b.n	800ea8a <__swsetup_r+0x92>
 800eaa0:	2000      	movs	r0, #0
 800eaa2:	e7f7      	b.n	800ea94 <__swsetup_r+0x9c>
 800eaa4:	24000674 	.word	0x24000674

0800eaa8 <memmove>:
 800eaa8:	4288      	cmp	r0, r1
 800eaaa:	b510      	push	{r4, lr}
 800eaac:	eb01 0402 	add.w	r4, r1, r2
 800eab0:	d902      	bls.n	800eab8 <memmove+0x10>
 800eab2:	4284      	cmp	r4, r0
 800eab4:	4623      	mov	r3, r4
 800eab6:	d807      	bhi.n	800eac8 <memmove+0x20>
 800eab8:	1e43      	subs	r3, r0, #1
 800eaba:	42a1      	cmp	r1, r4
 800eabc:	d008      	beq.n	800ead0 <memmove+0x28>
 800eabe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eac6:	e7f8      	b.n	800eaba <memmove+0x12>
 800eac8:	4402      	add	r2, r0
 800eaca:	4601      	mov	r1, r0
 800eacc:	428a      	cmp	r2, r1
 800eace:	d100      	bne.n	800ead2 <memmove+0x2a>
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ead6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eada:	e7f7      	b.n	800eacc <memmove+0x24>

0800eadc <__assert_func>:
 800eadc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eade:	4614      	mov	r4, r2
 800eae0:	461a      	mov	r2, r3
 800eae2:	4b09      	ldr	r3, [pc, #36]	; (800eb08 <__assert_func+0x2c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4605      	mov	r5, r0
 800eae8:	68d8      	ldr	r0, [r3, #12]
 800eaea:	b14c      	cbz	r4, 800eb00 <__assert_func+0x24>
 800eaec:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <__assert_func+0x30>)
 800eaee:	9100      	str	r1, [sp, #0]
 800eaf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eaf4:	4906      	ldr	r1, [pc, #24]	; (800eb10 <__assert_func+0x34>)
 800eaf6:	462b      	mov	r3, r5
 800eaf8:	f000 f844 	bl	800eb84 <fiprintf>
 800eafc:	f000 f8d8 	bl	800ecb0 <abort>
 800eb00:	4b04      	ldr	r3, [pc, #16]	; (800eb14 <__assert_func+0x38>)
 800eb02:	461c      	mov	r4, r3
 800eb04:	e7f3      	b.n	800eaee <__assert_func+0x12>
 800eb06:	bf00      	nop
 800eb08:	24000674 	.word	0x24000674
 800eb0c:	08013f1f 	.word	0x08013f1f
 800eb10:	08013f2c 	.word	0x08013f2c
 800eb14:	08013f5a 	.word	0x08013f5a

0800eb18 <_calloc_r>:
 800eb18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb1a:	fba1 2402 	umull	r2, r4, r1, r2
 800eb1e:	b94c      	cbnz	r4, 800eb34 <_calloc_r+0x1c>
 800eb20:	4611      	mov	r1, r2
 800eb22:	9201      	str	r2, [sp, #4]
 800eb24:	f7fd fb4e 	bl	800c1c4 <_malloc_r>
 800eb28:	9a01      	ldr	r2, [sp, #4]
 800eb2a:	4605      	mov	r5, r0
 800eb2c:	b930      	cbnz	r0, 800eb3c <_calloc_r+0x24>
 800eb2e:	4628      	mov	r0, r5
 800eb30:	b003      	add	sp, #12
 800eb32:	bd30      	pop	{r4, r5, pc}
 800eb34:	220c      	movs	r2, #12
 800eb36:	6002      	str	r2, [r0, #0]
 800eb38:	2500      	movs	r5, #0
 800eb3a:	e7f8      	b.n	800eb2e <_calloc_r+0x16>
 800eb3c:	4621      	mov	r1, r4
 800eb3e:	f7fe f970 	bl	800ce22 <memset>
 800eb42:	e7f4      	b.n	800eb2e <_calloc_r+0x16>

0800eb44 <__ascii_mbtowc>:
 800eb44:	b082      	sub	sp, #8
 800eb46:	b901      	cbnz	r1, 800eb4a <__ascii_mbtowc+0x6>
 800eb48:	a901      	add	r1, sp, #4
 800eb4a:	b142      	cbz	r2, 800eb5e <__ascii_mbtowc+0x1a>
 800eb4c:	b14b      	cbz	r3, 800eb62 <__ascii_mbtowc+0x1e>
 800eb4e:	7813      	ldrb	r3, [r2, #0]
 800eb50:	600b      	str	r3, [r1, #0]
 800eb52:	7812      	ldrb	r2, [r2, #0]
 800eb54:	1e10      	subs	r0, r2, #0
 800eb56:	bf18      	it	ne
 800eb58:	2001      	movne	r0, #1
 800eb5a:	b002      	add	sp, #8
 800eb5c:	4770      	bx	lr
 800eb5e:	4610      	mov	r0, r2
 800eb60:	e7fb      	b.n	800eb5a <__ascii_mbtowc+0x16>
 800eb62:	f06f 0001 	mvn.w	r0, #1
 800eb66:	e7f8      	b.n	800eb5a <__ascii_mbtowc+0x16>

0800eb68 <__ascii_wctomb>:
 800eb68:	b149      	cbz	r1, 800eb7e <__ascii_wctomb+0x16>
 800eb6a:	2aff      	cmp	r2, #255	; 0xff
 800eb6c:	bf85      	ittet	hi
 800eb6e:	238a      	movhi	r3, #138	; 0x8a
 800eb70:	6003      	strhi	r3, [r0, #0]
 800eb72:	700a      	strbls	r2, [r1, #0]
 800eb74:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb78:	bf98      	it	ls
 800eb7a:	2001      	movls	r0, #1
 800eb7c:	4770      	bx	lr
 800eb7e:	4608      	mov	r0, r1
 800eb80:	4770      	bx	lr
	...

0800eb84 <fiprintf>:
 800eb84:	b40e      	push	{r1, r2, r3}
 800eb86:	b503      	push	{r0, r1, lr}
 800eb88:	4601      	mov	r1, r0
 800eb8a:	ab03      	add	r3, sp, #12
 800eb8c:	4805      	ldr	r0, [pc, #20]	; (800eba4 <fiprintf+0x20>)
 800eb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb92:	6800      	ldr	r0, [r0, #0]
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	f7ff fd29 	bl	800e5ec <_vfiprintf_r>
 800eb9a:	b002      	add	sp, #8
 800eb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eba0:	b003      	add	sp, #12
 800eba2:	4770      	bx	lr
 800eba4:	24000674 	.word	0x24000674

0800eba8 <__swhatbuf_r>:
 800eba8:	b570      	push	{r4, r5, r6, lr}
 800ebaa:	460c      	mov	r4, r1
 800ebac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb0:	2900      	cmp	r1, #0
 800ebb2:	b096      	sub	sp, #88	; 0x58
 800ebb4:	4615      	mov	r5, r2
 800ebb6:	461e      	mov	r6, r3
 800ebb8:	da0d      	bge.n	800ebd6 <__swhatbuf_r+0x2e>
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ebc0:	f04f 0100 	mov.w	r1, #0
 800ebc4:	bf0c      	ite	eq
 800ebc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ebca:	2340      	movne	r3, #64	; 0x40
 800ebcc:	2000      	movs	r0, #0
 800ebce:	6031      	str	r1, [r6, #0]
 800ebd0:	602b      	str	r3, [r5, #0]
 800ebd2:	b016      	add	sp, #88	; 0x58
 800ebd4:	bd70      	pop	{r4, r5, r6, pc}
 800ebd6:	466a      	mov	r2, sp
 800ebd8:	f000 f848 	bl	800ec6c <_fstat_r>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dbec      	blt.n	800ebba <__swhatbuf_r+0x12>
 800ebe0:	9901      	ldr	r1, [sp, #4]
 800ebe2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ebe6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ebea:	4259      	negs	r1, r3
 800ebec:	4159      	adcs	r1, r3
 800ebee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebf2:	e7eb      	b.n	800ebcc <__swhatbuf_r+0x24>

0800ebf4 <__smakebuf_r>:
 800ebf4:	898b      	ldrh	r3, [r1, #12]
 800ebf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebf8:	079d      	lsls	r5, r3, #30
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	d507      	bpl.n	800ec10 <__smakebuf_r+0x1c>
 800ec00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	6123      	str	r3, [r4, #16]
 800ec08:	2301      	movs	r3, #1
 800ec0a:	6163      	str	r3, [r4, #20]
 800ec0c:	b002      	add	sp, #8
 800ec0e:	bd70      	pop	{r4, r5, r6, pc}
 800ec10:	ab01      	add	r3, sp, #4
 800ec12:	466a      	mov	r2, sp
 800ec14:	f7ff ffc8 	bl	800eba8 <__swhatbuf_r>
 800ec18:	9900      	ldr	r1, [sp, #0]
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	f7fd fad1 	bl	800c1c4 <_malloc_r>
 800ec22:	b948      	cbnz	r0, 800ec38 <__smakebuf_r+0x44>
 800ec24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec28:	059a      	lsls	r2, r3, #22
 800ec2a:	d4ef      	bmi.n	800ec0c <__smakebuf_r+0x18>
 800ec2c:	f023 0303 	bic.w	r3, r3, #3
 800ec30:	f043 0302 	orr.w	r3, r3, #2
 800ec34:	81a3      	strh	r3, [r4, #12]
 800ec36:	e7e3      	b.n	800ec00 <__smakebuf_r+0xc>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	6020      	str	r0, [r4, #0]
 800ec3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec40:	81a3      	strh	r3, [r4, #12]
 800ec42:	9b00      	ldr	r3, [sp, #0]
 800ec44:	6163      	str	r3, [r4, #20]
 800ec46:	9b01      	ldr	r3, [sp, #4]
 800ec48:	6120      	str	r0, [r4, #16]
 800ec4a:	b15b      	cbz	r3, 800ec64 <__smakebuf_r+0x70>
 800ec4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 f81d 	bl	800ec90 <_isatty_r>
 800ec56:	b128      	cbz	r0, 800ec64 <__smakebuf_r+0x70>
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	f023 0303 	bic.w	r3, r3, #3
 800ec5e:	f043 0301 	orr.w	r3, r3, #1
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	89a3      	ldrh	r3, [r4, #12]
 800ec66:	431d      	orrs	r5, r3
 800ec68:	81a5      	strh	r5, [r4, #12]
 800ec6a:	e7cf      	b.n	800ec0c <__smakebuf_r+0x18>

0800ec6c <_fstat_r>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4d07      	ldr	r5, [pc, #28]	; (800ec8c <_fstat_r+0x20>)
 800ec70:	2300      	movs	r3, #0
 800ec72:	4604      	mov	r4, r0
 800ec74:	4608      	mov	r0, r1
 800ec76:	4611      	mov	r1, r2
 800ec78:	602b      	str	r3, [r5, #0]
 800ec7a:	f000 fa95 	bl	800f1a8 <_fstat>
 800ec7e:	1c43      	adds	r3, r0, #1
 800ec80:	d102      	bne.n	800ec88 <_fstat_r+0x1c>
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	b103      	cbz	r3, 800ec88 <_fstat_r+0x1c>
 800ec86:	6023      	str	r3, [r4, #0]
 800ec88:	bd38      	pop	{r3, r4, r5, pc}
 800ec8a:	bf00      	nop
 800ec8c:	24003238 	.word	0x24003238

0800ec90 <_isatty_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d06      	ldr	r5, [pc, #24]	; (800ecac <_isatty_r+0x1c>)
 800ec94:	2300      	movs	r3, #0
 800ec96:	4604      	mov	r4, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	f000 fa94 	bl	800f1c8 <_isatty>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_isatty_r+0x1a>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_isatty_r+0x1a>
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	24003238 	.word	0x24003238

0800ecb0 <abort>:
 800ecb0:	b508      	push	{r3, lr}
 800ecb2:	2006      	movs	r0, #6
 800ecb4:	f000 f82c 	bl	800ed10 <raise>
 800ecb8:	2001      	movs	r0, #1
 800ecba:	f000 faad 	bl	800f218 <_exit>

0800ecbe <_raise_r>:
 800ecbe:	291f      	cmp	r1, #31
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	460d      	mov	r5, r1
 800ecc6:	d904      	bls.n	800ecd2 <_raise_r+0x14>
 800ecc8:	2316      	movs	r3, #22
 800ecca:	6003      	str	r3, [r0, #0]
 800eccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd0:	bd38      	pop	{r3, r4, r5, pc}
 800ecd2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ecd4:	b112      	cbz	r2, 800ecdc <_raise_r+0x1e>
 800ecd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecda:	b94b      	cbnz	r3, 800ecf0 <_raise_r+0x32>
 800ecdc:	4620      	mov	r0, r4
 800ecde:	f000 f831 	bl	800ed44 <_getpid_r>
 800ece2:	462a      	mov	r2, r5
 800ece4:	4601      	mov	r1, r0
 800ece6:	4620      	mov	r0, r4
 800ece8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecec:	f000 b818 	b.w	800ed20 <_kill_r>
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d00a      	beq.n	800ed0a <_raise_r+0x4c>
 800ecf4:	1c59      	adds	r1, r3, #1
 800ecf6:	d103      	bne.n	800ed00 <_raise_r+0x42>
 800ecf8:	2316      	movs	r3, #22
 800ecfa:	6003      	str	r3, [r0, #0]
 800ecfc:	2001      	movs	r0, #1
 800ecfe:	e7e7      	b.n	800ecd0 <_raise_r+0x12>
 800ed00:	2400      	movs	r4, #0
 800ed02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed06:	4628      	mov	r0, r5
 800ed08:	4798      	blx	r3
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	e7e0      	b.n	800ecd0 <_raise_r+0x12>
	...

0800ed10 <raise>:
 800ed10:	4b02      	ldr	r3, [pc, #8]	; (800ed1c <raise+0xc>)
 800ed12:	4601      	mov	r1, r0
 800ed14:	6818      	ldr	r0, [r3, #0]
 800ed16:	f7ff bfd2 	b.w	800ecbe <_raise_r>
 800ed1a:	bf00      	nop
 800ed1c:	24000674 	.word	0x24000674

0800ed20 <_kill_r>:
 800ed20:	b538      	push	{r3, r4, r5, lr}
 800ed22:	4d07      	ldr	r5, [pc, #28]	; (800ed40 <_kill_r+0x20>)
 800ed24:	2300      	movs	r3, #0
 800ed26:	4604      	mov	r4, r0
 800ed28:	4608      	mov	r0, r1
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	602b      	str	r3, [r5, #0]
 800ed2e:	f000 fa53 	bl	800f1d8 <_kill>
 800ed32:	1c43      	adds	r3, r0, #1
 800ed34:	d102      	bne.n	800ed3c <_kill_r+0x1c>
 800ed36:	682b      	ldr	r3, [r5, #0]
 800ed38:	b103      	cbz	r3, 800ed3c <_kill_r+0x1c>
 800ed3a:	6023      	str	r3, [r4, #0]
 800ed3c:	bd38      	pop	{r3, r4, r5, pc}
 800ed3e:	bf00      	nop
 800ed40:	24003238 	.word	0x24003238

0800ed44 <_getpid_r>:
 800ed44:	f000 ba38 	b.w	800f1b8 <_getpid>

0800ed48 <fabsf>:
 800ed48:	ee10 3a10 	vmov	r3, s0
 800ed4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed50:	ee00 3a10 	vmov	s0, r3
 800ed54:	4770      	bx	lr
	...

0800ed58 <tanhf>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	ee10 5a10 	vmov	r5, s0
 800ed5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ed66:	ed2d 8b02 	vpush	{d8}
 800ed6a:	db0f      	blt.n	800ed8c <tanhf+0x34>
 800ed6c:	4b2a      	ldr	r3, [pc, #168]	; (800ee18 <tanhf+0xc0>)
 800ed6e:	ed93 6a00 	vldr	s12, [r3]
 800ed72:	edd3 6a00 	vldr	s13, [r3]
 800ed76:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800ed7a:	2d00      	cmp	r5, #0
 800ed7c:	bfac      	ite	ge
 800ed7e:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 800ed82:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800ed86:	ecbd 8b02 	vpop	{d8}
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	4a23      	ldr	r2, [pc, #140]	; (800ee1c <tanhf+0xc4>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	dc39      	bgt.n	800ee06 <tanhf+0xae>
 800ed92:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800ed96:	da07      	bge.n	800eda8 <tanhf+0x50>
 800ed98:	4b1f      	ldr	r3, [pc, #124]	; (800ee18 <tanhf+0xc0>)
 800ed9a:	edd3 7a00 	vldr	s15, [r3]
 800ed9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800eda2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eda6:	e7ee      	b.n	800ed86 <tanhf+0x2e>
 800eda8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800edac:	4c1c      	ldr	r4, [pc, #112]	; (800ee20 <tanhf+0xc8>)
 800edae:	db19      	blt.n	800ede4 <tanhf+0x8c>
 800edb0:	f7ff ffca 	bl	800ed48 <fabsf>
 800edb4:	edd4 7a00 	vldr	s15, [r4]
 800edb8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800edbc:	f000 f834 	bl	800ee28 <expm1f>
 800edc0:	4b15      	ldr	r3, [pc, #84]	; (800ee18 <tanhf+0xc0>)
 800edc2:	edd3 7a00 	vldr	s15, [r3]
 800edc6:	edd4 6a00 	vldr	s13, [r4]
 800edca:	ed94 7a00 	vldr	s14, [r4]
 800edce:	ee37 0a00 	vadd.f32	s0, s14, s0
 800edd2:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800edd6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800edda:	2d00      	cmp	r5, #0
 800eddc:	bfb8      	it	lt
 800edde:	eeb1 0a40 	vneglt.f32	s0, s0
 800ede2:	e7d0      	b.n	800ed86 <tanhf+0x2e>
 800ede4:	ed94 8a00 	vldr	s16, [r4]
 800ede8:	f7ff ffae 	bl	800ed48 <fabsf>
 800edec:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800edf0:	f000 f81a 	bl	800ee28 <expm1f>
 800edf4:	edd4 7a00 	vldr	s15, [r4]
 800edf8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800edfc:	eeb1 7a40 	vneg.f32	s14, s0
 800ee00:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ee04:	e7e9      	b.n	800edda <tanhf+0x82>
 800ee06:	4b04      	ldr	r3, [pc, #16]	; (800ee18 <tanhf+0xc0>)
 800ee08:	ed93 0a00 	vldr	s0, [r3]
 800ee0c:	4b05      	ldr	r3, [pc, #20]	; (800ee24 <tanhf+0xcc>)
 800ee0e:	edd3 7a00 	vldr	s15, [r3]
 800ee12:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee16:	e7e0      	b.n	800edda <tanhf+0x82>
 800ee18:	240007e4 	.word	0x240007e4
 800ee1c:	41afffff 	.word	0x41afffff
 800ee20:	240007ec 	.word	0x240007ec
 800ee24:	240007e8 	.word	0x240007e8

0800ee28 <expm1f>:
 800ee28:	ee10 2a10 	vmov	r2, s0
 800ee2c:	497d      	ldr	r1, [pc, #500]	; (800f024 <expm1f+0x1fc>)
 800ee2e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ee32:	428b      	cmp	r3, r1
 800ee34:	d920      	bls.n	800ee78 <expm1f+0x50>
 800ee36:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ee3a:	d902      	bls.n	800ee42 <expm1f+0x1a>
 800ee3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ee40:	4770      	bx	lr
 800ee42:	d105      	bne.n	800ee50 <expm1f+0x28>
 800ee44:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	fe20 0a27 	vselge.f32	s0, s0, s15
 800ee4e:	4770      	bx	lr
 800ee50:	2a00      	cmp	r2, #0
 800ee52:	db05      	blt.n	800ee60 <expm1f+0x38>
 800ee54:	4974      	ldr	r1, [pc, #464]	; (800f028 <expm1f+0x200>)
 800ee56:	428b      	cmp	r3, r1
 800ee58:	d95c      	bls.n	800ef14 <expm1f+0xec>
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f000 b996 	b.w	800f18c <__math_oflowf>
 800ee60:	eddf 7a72 	vldr	s15, [pc, #456]	; 800f02c <expm1f+0x204>
 800ee64:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ee68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee70:	d550      	bpl.n	800ef14 <expm1f+0xec>
 800ee72:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ee76:	4770      	bx	lr
 800ee78:	496d      	ldr	r1, [pc, #436]	; (800f030 <expm1f+0x208>)
 800ee7a:	428b      	cmp	r3, r1
 800ee7c:	d966      	bls.n	800ef4c <expm1f+0x124>
 800ee7e:	496d      	ldr	r1, [pc, #436]	; (800f034 <expm1f+0x20c>)
 800ee80:	428b      	cmp	r3, r1
 800ee82:	d847      	bhi.n	800ef14 <expm1f+0xec>
 800ee84:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800f038 <expm1f+0x210>
 800ee88:	2a00      	cmp	r2, #0
 800ee8a:	bfa7      	ittee	ge
 800ee8c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800ee90:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 800f03c <expm1f+0x214>
 800ee94:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 800f040 <expm1f+0x218>
 800ee98:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800ee9c:	bfac      	ite	ge
 800ee9e:	2301      	movge	r3, #1
 800eea0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eea4:	ee37 0a66 	vsub.f32	s0, s14, s13
 800eea8:	ee77 7a40 	vsub.f32	s15, s14, s0
 800eeac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eeb0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800eeb4:	ee20 4a25 	vmul.f32	s8, s0, s11
 800eeb8:	ed9f 6a62 	vldr	s12, [pc, #392]	; 800f044 <expm1f+0x21c>
 800eebc:	eddf 6a62 	vldr	s13, [pc, #392]	; 800f048 <expm1f+0x220>
 800eec0:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800f04c <expm1f+0x224>
 800eec4:	ee20 7a04 	vmul.f32	s14, s0, s8
 800eec8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800eecc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800eed0:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 800f050 <expm1f+0x228>
 800eed4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800eed8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f054 <expm1f+0x22c>
 800eedc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800eee0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800eee4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800eee8:	eef0 6a46 	vmov.f32	s13, s12
 800eeec:	eee5 6a07 	vfma.f32	s13, s10, s14
 800eef0:	eee4 4a66 	vfms.f32	s9, s8, s13
 800eef4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800eef8:	eea0 4a64 	vfms.f32	s8, s0, s9
 800eefc:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800ef00:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800ef04:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ef08:	bb73      	cbnz	r3, 800ef68 <expm1f+0x140>
 800ef0a:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800ef0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ef12:	4770      	bx	lr
 800ef14:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ef18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ef1c:	2a00      	cmp	r2, #0
 800ef1e:	fe67 7a87 	vselge.f32	s15, s15, s14
 800ef22:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f058 <expm1f+0x230>
 800ef26:	ee40 7a07 	vmla.f32	s15, s0, s14
 800ef2a:	eeb0 7a40 	vmov.f32	s14, s0
 800ef2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ef32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ef36:	ee17 3a90 	vmov	r3, s15
 800ef3a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f038 <expm1f+0x210>
 800ef3e:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800ef42:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800f03c <expm1f+0x214>
 800ef46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ef4a:	e7ab      	b.n	800eea4 <expm1f+0x7c>
 800ef4c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800ef50:	d208      	bcs.n	800ef64 <expm1f+0x13c>
 800ef52:	eddf 7a42 	vldr	s15, [pc, #264]	; 800f05c <expm1f+0x234>
 800ef56:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ef5a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800ef5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef62:	4770      	bx	lr
 800ef64:	2300      	movs	r3, #0
 800ef66:	e7a3      	b.n	800eeb0 <expm1f+0x88>
 800ef68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ef72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef76:	d106      	bne.n	800ef86 <expm1f+0x15e>
 800ef78:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ef7c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ef80:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ef84:	4770      	bx	lr
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d118      	bne.n	800efbc <expm1f+0x194>
 800ef8a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ef8e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ef92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef96:	bf5b      	ittet	pl
 800ef98:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800ef9c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800efa0:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800efa4:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800efa8:	bf43      	ittte	mi
 800efaa:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800efae:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800efb2:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800efb6:	eeb0 0a46 	vmovpl.f32	s0, s12
 800efba:	4770      	bx	lr
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	2a39      	cmp	r2, #57	; 0x39
 800efc0:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800efc4:	d90b      	bls.n	800efde <expm1f+0x1b6>
 800efc6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800efca:	ee76 7a67 	vsub.f32	s15, s12, s15
 800efce:	ee17 3a90 	vmov	r3, s15
 800efd2:	4419      	add	r1, r3
 800efd4:	ee07 1a90 	vmov	s15, r1
 800efd8:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800efdc:	4770      	bx	lr
 800efde:	2b16      	cmp	r3, #22
 800efe0:	dc11      	bgt.n	800f006 <expm1f+0x1de>
 800efe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efe6:	fa42 f303 	asr.w	r3, r2, r3
 800efea:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800efee:	ee07 3a10 	vmov	s14, r3
 800eff2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800eff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800effa:	ee17 3a90 	vmov	r3, s15
 800effe:	440b      	add	r3, r1
 800f000:	ee00 3a10 	vmov	s0, r3
 800f004:	4770      	bx	lr
 800f006:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800f00a:	05db      	lsls	r3, r3, #23
 800f00c:	ee07 3a10 	vmov	s14, r3
 800f010:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f014:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f018:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f01c:	ee17 3a90 	vmov	r3, s15
 800f020:	e7ed      	b.n	800effe <expm1f+0x1d6>
 800f022:	bf00      	nop
 800f024:	4195b843 	.word	0x4195b843
 800f028:	42b17217 	.word	0x42b17217
 800f02c:	0da24260 	.word	0x0da24260
 800f030:	3eb17218 	.word	0x3eb17218
 800f034:	3f851591 	.word	0x3f851591
 800f038:	3f317180 	.word	0x3f317180
 800f03c:	3717f7d1 	.word	0x3717f7d1
 800f040:	b717f7d1 	.word	0xb717f7d1
 800f044:	b457edbb 	.word	0xb457edbb
 800f048:	36867e54 	.word	0x36867e54
 800f04c:	bd088889 	.word	0xbd088889
 800f050:	b8a670cd 	.word	0xb8a670cd
 800f054:	3ad00d01 	.word	0x3ad00d01
 800f058:	3fb8aa3b 	.word	0x3fb8aa3b
 800f05c:	7149f2ca 	.word	0x7149f2ca

0800f060 <expf>:
 800f060:	ee10 2a10 	vmov	r2, s0
 800f064:	f240 412a 	movw	r1, #1066	; 0x42a
 800f068:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800f06c:	428b      	cmp	r3, r1
 800f06e:	b430      	push	{r4, r5}
 800f070:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f074:	d92a      	bls.n	800f0cc <expf+0x6c>
 800f076:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800f07a:	d058      	beq.n	800f12e <expf+0xce>
 800f07c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f080:	d303      	bcc.n	800f08a <expf+0x2a>
 800f082:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f086:	bc30      	pop	{r4, r5}
 800f088:	4770      	bx	lr
 800f08a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800f134 <expf+0xd4>
 800f08e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f096:	dd03      	ble.n	800f0a0 <expf+0x40>
 800f098:	bc30      	pop	{r4, r5}
 800f09a:	2000      	movs	r0, #0
 800f09c:	f000 b876 	b.w	800f18c <__math_oflowf>
 800f0a0:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f138 <expf+0xd8>
 800f0a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ac:	d503      	bpl.n	800f0b6 <expf+0x56>
 800f0ae:	bc30      	pop	{r4, r5}
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	f000 b85f 	b.w	800f174 <__math_uflowf>
 800f0b6:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f13c <expf+0xdc>
 800f0ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c2:	d503      	bpl.n	800f0cc <expf+0x6c>
 800f0c4:	bc30      	pop	{r4, r5}
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	f000 b85a 	b.w	800f180 <__math_may_uflowf>
 800f0cc:	4b1c      	ldr	r3, [pc, #112]	; (800f140 <expf+0xe0>)
 800f0ce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f0d2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800f0d6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800f0da:	eeb0 7b44 	vmov.f64	d7, d4
 800f0de:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f0e2:	ee17 0a10 	vmov	r0, s14
 800f0e6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f0ea:	f000 021f 	and.w	r2, r0, #31
 800f0ee:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800f0f2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800f0f6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f0fa:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800f0fe:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800f102:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f106:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800f10a:	684d      	ldr	r5, [r1, #4]
 800f10c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800f110:	2100      	movs	r1, #0
 800f112:	190a      	adds	r2, r1, r4
 800f114:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800f118:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f11c:	ec43 2b17 	vmov	d7, r2, r3
 800f120:	eea6 0b04 	vfma.f64	d0, d6, d4
 800f124:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f128:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f12c:	e7ab      	b.n	800f086 <expf+0x26>
 800f12e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f144 <expf+0xe4>
 800f132:	e7a8      	b.n	800f086 <expf+0x26>
 800f134:	42b17217 	.word	0x42b17217
 800f138:	c2cff1b4 	.word	0xc2cff1b4
 800f13c:	c2ce8ecf 	.word	0xc2ce8ecf
 800f140:	08014060 	.word	0x08014060
 800f144:	00000000 	.word	0x00000000

0800f148 <with_errnof>:
 800f148:	b513      	push	{r0, r1, r4, lr}
 800f14a:	4604      	mov	r4, r0
 800f14c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f150:	f7fd feca 	bl	800cee8 <__errno>
 800f154:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f158:	6004      	str	r4, [r0, #0]
 800f15a:	b002      	add	sp, #8
 800f15c:	bd10      	pop	{r4, pc}

0800f15e <xflowf>:
 800f15e:	b130      	cbz	r0, 800f16e <xflowf+0x10>
 800f160:	eef1 7a40 	vneg.f32	s15, s0
 800f164:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f168:	2022      	movs	r0, #34	; 0x22
 800f16a:	f7ff bfed 	b.w	800f148 <with_errnof>
 800f16e:	eef0 7a40 	vmov.f32	s15, s0
 800f172:	e7f7      	b.n	800f164 <xflowf+0x6>

0800f174 <__math_uflowf>:
 800f174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f17c <__math_uflowf+0x8>
 800f178:	f7ff bff1 	b.w	800f15e <xflowf>
 800f17c:	10000000 	.word	0x10000000

0800f180 <__math_may_uflowf>:
 800f180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f188 <__math_may_uflowf+0x8>
 800f184:	f7ff bfeb 	b.w	800f15e <xflowf>
 800f188:	1a200000 	.word	0x1a200000

0800f18c <__math_oflowf>:
 800f18c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f194 <__math_oflowf+0x8>
 800f190:	f7ff bfe5 	b.w	800f15e <xflowf>
 800f194:	70000000 	.word	0x70000000

0800f198 <_close>:
 800f198:	4b02      	ldr	r3, [pc, #8]	; (800f1a4 <_close+0xc>)
 800f19a:	2258      	movs	r2, #88	; 0x58
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a2:	4770      	bx	lr
 800f1a4:	24003238 	.word	0x24003238

0800f1a8 <_fstat>:
 800f1a8:	4b02      	ldr	r3, [pc, #8]	; (800f1b4 <_fstat+0xc>)
 800f1aa:	2258      	movs	r2, #88	; 0x58
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f1b2:	4770      	bx	lr
 800f1b4:	24003238 	.word	0x24003238

0800f1b8 <_getpid>:
 800f1b8:	4b02      	ldr	r3, [pc, #8]	; (800f1c4 <_getpid+0xc>)
 800f1ba:	2258      	movs	r2, #88	; 0x58
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c2:	4770      	bx	lr
 800f1c4:	24003238 	.word	0x24003238

0800f1c8 <_isatty>:
 800f1c8:	4b02      	ldr	r3, [pc, #8]	; (800f1d4 <_isatty+0xc>)
 800f1ca:	2258      	movs	r2, #88	; 0x58
 800f1cc:	601a      	str	r2, [r3, #0]
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	24003238 	.word	0x24003238

0800f1d8 <_kill>:
 800f1d8:	4b02      	ldr	r3, [pc, #8]	; (800f1e4 <_kill+0xc>)
 800f1da:	2258      	movs	r2, #88	; 0x58
 800f1dc:	601a      	str	r2, [r3, #0]
 800f1de:	f04f 30ff 	mov.w	r0, #4294967295
 800f1e2:	4770      	bx	lr
 800f1e4:	24003238 	.word	0x24003238

0800f1e8 <_lseek>:
 800f1e8:	4b02      	ldr	r3, [pc, #8]	; (800f1f4 <_lseek+0xc>)
 800f1ea:	2258      	movs	r2, #88	; 0x58
 800f1ec:	601a      	str	r2, [r3, #0]
 800f1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f2:	4770      	bx	lr
 800f1f4:	24003238 	.word	0x24003238

0800f1f8 <_read>:
 800f1f8:	4b02      	ldr	r3, [pc, #8]	; (800f204 <_read+0xc>)
 800f1fa:	2258      	movs	r2, #88	; 0x58
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f202:	4770      	bx	lr
 800f204:	24003238 	.word	0x24003238

0800f208 <_write>:
 800f208:	4b02      	ldr	r3, [pc, #8]	; (800f214 <_write+0xc>)
 800f20a:	2258      	movs	r2, #88	; 0x58
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	f04f 30ff 	mov.w	r0, #4294967295
 800f212:	4770      	bx	lr
 800f214:	24003238 	.word	0x24003238

0800f218 <_exit>:
 800f218:	e7fe      	b.n	800f218 <_exit>
	...

0800f21c <_init>:
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21e:	bf00      	nop
 800f220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f222:	bc08      	pop	{r3}
 800f224:	469e      	mov	lr, r3
 800f226:	4770      	bx	lr

0800f228 <_fini>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	bf00      	nop
 800f22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22e:	bc08      	pop	{r3}
 800f230:	469e      	mov	lr, r3
 800f232:	4770      	bx	lr
